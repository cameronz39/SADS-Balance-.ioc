
FINAL_IMU_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f8c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08009160  08009160  0000a160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095e0  080095e0  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  080095e0  080095e0  0000a5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095e8  080095e8  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080095e8  080095e8  0000a5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080095f0  080095f0  0000a5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080095f8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  200001dc  080097d4  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  080097d4  0000b5a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164ab  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000325d  00000000  00000000  000216b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00024918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e90  00000000  00000000  00025bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ea4  00000000  00000000  00026a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ed9  00000000  00000000  0004d8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000daa38  00000000  00000000  000647c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f1fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060bc  00000000  00000000  0013f240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001452fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009144 	.word	0x08009144

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08009144 	.word	0x08009144

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <_ZN5TimerC1EPFvvE>:

// -----                      -----
// ----- Timer implementation -----
// -----                      -----

Timer::Timer(const callback_function f)
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
    : _delay(10), _periodic(false), f((void*)f), running(false), next(nullptr)
 8000ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8000f14 <_ZN5TimerC1EPFvvE+0x3c>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	220a      	movs	r2, #10
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	721a      	strb	r2, [r3, #8]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	683a      	ldr	r2, [r7, #0]
 8000ef8:	611a      	str	r2, [r3, #16]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	751a      	strb	r2, [r3, #20]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
{}
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	0800922c 	.word	0x0800922c

08000f18 <_ZN5TimerC1EmbPFvvE>:

Timer::Timer(uint32_t delay, bool isPeriodic, const callback_function f)
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	4613      	mov	r3, r2
 8000f26:	71fb      	strb	r3, [r7, #7]
    : _delay(delay), _periodic(isPeriodic), f((void*)f), running(false), next(nullptr)
 8000f28:	4a0c      	ldr	r2, [pc, #48]	@ (8000f5c <_ZN5TimerC1EmbPFvvE+0x44>)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	79fa      	ldrb	r2, [r7, #7]
 8000f38:	721a      	strb	r2, [r3, #8]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	611a      	str	r2, [r3, #16]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2200      	movs	r2, #0
 8000f44:	751a      	strb	r2, [r3, #20]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
{}
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	0800922c 	.word	0x0800922c

08000f60 <_ZN5Timer4fireEv>:
void Timer::delay(uint32_t val){
    if (running) return; // can't change parameters directly if running
    _delay = val;
}

void Timer::fire(){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
    ((callback_function)f)();
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	4798      	blx	r3
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_TIM_OC_DelayElapsedCallback>:
// capture update events and fire the timer array's callback chain
// a single call to tick would suffice in case of one timer array,
// but this way multiple callback handlers for the same interrupt
// routine can exist independently, without requiring rewriting
// the function for the current setup at all times
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef* htim){
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
    TIM_OC_DelayElapsed_CallbackChain::fire(htim);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 fa7a 	bl	8001478 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEE4fireES2_>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <_ZN17TimerArrayControl9TimerFeedC1EP17TIM_HandleTypeDefh>:

// -----                            -----
// ----- TimerString implementation -----
// -----                            -----

TimerArrayControl::TimerFeed::TimerFeed(TIM_HandleTypeDef *const htim, const uint8_t bits) :
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	4613      	mov	r3, r2
 8000f98:	71fb      	strb	r3, [r7, #7]
    root(nullptr),
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff9a 	bl	8000ed8 <_ZN5TimerC1EPFvvE>
    htim(htim),
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	61da      	str	r2, [r3, #28]
    bits(bits)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	79fa      	ldrb	r2, [r7, #7]
 8000fae:	f883 2020 	strb.w	r2, [r3, #32]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2301      	movs	r3, #1
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	625a      	str	r2, [r3, #36]	@ 0x24
{}
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_ZN17TimerArrayControl9TimerFeed22findTimerInsertionLinkEP5TimerS2_>:

Timer* TimerArrayControl::TimerFeed::findTimerInsertionLink(Timer* it, Timer* timer){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
    while(it->next && isSooner(it->next->target, timer->target)){
 8000fdc:	e002      	b.n	8000fe4 <_ZN17TimerArrayControl9TimerFeed22findTimerInsertionLinkEP5TimerS2_+0x14>
        // while there are more timers and the next timer's target is sooner than the new one's
        // advance it on the timer string
        it = it->next;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	60bb      	str	r3, [r7, #8]
    while(it->next && isSooner(it->next->target, timer->target)){
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00d      	beq.n	8001008 <_ZN17TimerArrayControl9TimerFeed22findTimerInsertionLinkEP5TimerS2_+0x38>
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	68d9      	ldr	r1, [r3, #12]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f000 f8a2 	bl	8001142 <_ZN17TimerArrayControl9TimerFeed8isSoonerEmm>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <_ZN17TimerArrayControl9TimerFeed22findTimerInsertionLinkEP5TimerS2_+0x38>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <_ZN17TimerArrayControl9TimerFeed22findTimerInsertionLinkEP5TimerS2_+0x3a>
 8001008:	2300      	movs	r3, #0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1e7      	bne.n	8000fde <_ZN17TimerArrayControl9TimerFeed22findTimerInsertionLinkEP5TimerS2_+0xe>
    }
    return it;
 800100e:	68bb      	ldr	r3, [r7, #8]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <_ZN17TimerArrayControl9TimerFeed11insertTimerEP5TimerS2_>:

// insert timer after the iterator
void TimerArrayControl::TimerFeed::insertTimer(Timer* it, Timer* timer){
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
    
    // insert the new timer between it and next of it
    timer->running = true;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	751a      	strb	r2, [r3, #20]
    timer->next = it->next;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	699a      	ldr	r2, [r3, #24]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	619a      	str	r2, [r3, #24]
    it->next = timer;
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	619a      	str	r2, [r3, #24]

    // if the first timer changed, adjust interrupt target
    if (root.next == timer) SET_TARGET(timer->target);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	429a      	cmp	r2, r3
 8001040:	d105      	bne.n	800104e <_ZN17TimerArrayControl9TimerFeed11insertTimerEP5TimerS2_+0x36>
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	68d2      	ldr	r2, [r2, #12]
 800104c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <_ZN17TimerArrayControl9TimerFeed11insertTimerEP5Timer>:

// insert timer based on target
void TimerArrayControl::TimerFeed::insertTimer(Timer* timer){
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
    insertTimer(findTimerInsertionLink(&root, timer), timer);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffb0 	bl	8000fd0 <_ZN17TimerArrayControl9TimerFeed22findTimerInsertionLinkEP5TimerS2_>
 8001070:	4603      	mov	r3, r0
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffce 	bl	8001018 <_ZN17TimerArrayControl9TimerFeed11insertTimerEP5TimerS2_>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm>:
    // if the removed timer was the first in the feed, update interrupt target
    if (&root == it && root.next) SET_TARGET(root.next->target);
}

// remove and insert timer in one operation, according to it's target
void TimerArrayControl::TimerFeed::updateTimerTarget(Timer* timer, uint32_t target){
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
    
    // find fitting place for timer in string
    Timer* ins = &root;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	617b      	str	r3, [r7, #20]
    Timer* rem = ins;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	613b      	str	r3, [r7, #16]

    // search attach position
    while(ins->next && isSooner(ins->next->target, target)){
 8001098:	e009      	b.n	80010ae <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x2a>
        // while there are more timers and the next timer's target is sooner than the modified one's
        // advance |ins| on the timer string
        ins = ins->next;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	617b      	str	r3, [r7, #20]

        // if the next timer is not our's to remove, advance |rem| on the string
        if (rem->next != timer) rem = ins;
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d001      	beq.n	80010ae <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x2a>
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	613b      	str	r3, [r7, #16]
    while(ins->next && isSooner(ins->next->target, target)){
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00c      	beq.n	80010d0 <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x4c>
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	4619      	mov	r1, r3
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f000 f83e 	bl	8001142 <_ZN17TimerArrayControl9TimerFeed8isSoonerEmm>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x4c>
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x4e>
 80010d0:	2300      	movs	r3, #0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1e1      	bne.n	800109a <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x16>
    }

    // search where the timer was, to detach it from that position
    while(rem->next && rem->next != timer) rem = rem->next;
 80010d6:	e002      	b.n	80010de <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x5a>
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d004      	beq.n	80010f0 <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x6c>
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d1f3      	bne.n	80010d8 <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x54>

    // only move timer if the predecessor changed and it is not itself
    if (ins != rem && ins != timer){
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d00e      	beq.n	8001116 <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x92>
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d00a      	beq.n	8001116 <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x92>
        // remove our timer from the string
        rem->next = timer->next;
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	699a      	ldr	r2, [r3, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	619a      	str	r2, [r3, #24]

        // insert our timer between |ins| and next of |ins|
        timer->next = ins->next;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	699a      	ldr	r2, [r3, #24]
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	619a      	str	r2, [r3, #24]
        ins->next = timer;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	619a      	str	r2, [r3, #24]
    }

    // update the timer's target
    timer->target = target;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	60da      	str	r2, [r3, #12]
    // If the interrupt was set to a timer that has changed, set new target.
    // If ins is first timer, the timer was put to first place.
    // If rem is first timer, the timer was moved from first place.
    // If both, the first timers target was probably changed.
    // In all cases new target is needed.
    if (&root == ins || &root == rem) {
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	429a      	cmp	r2, r3
 8001122:	d003      	beq.n	800112c <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0xa8>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	429a      	cmp	r2, r3
 800112a:	d106      	bne.n	800113a <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0xb6>
        SET_TARGET(root.next->target);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	699a      	ldr	r2, [r3, #24]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68d2      	ldr	r2, [r2, #12]
 8001138:	635a      	str	r2, [r3, #52]	@ 0x34
    }
}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <_ZN17TimerArrayControl9TimerFeed8isSoonerEmm>:

bool TimerArrayControl::TimerFeed::isSooner(uint32_t target, uint32_t reference){
 8001142:	b480      	push	{r7}
 8001144:	b085      	sub	sp, #20
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
    return (max_count & ((uint32_t)(target - cnt))) < (max_count & ((uint32_t)(reference - cnt)));
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	1acb      	subs	r3, r1, r3
 800115a:	401a      	ands	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	1ac3      	subs	r3, r0, r3
 8001168:	400b      	ands	r3, r1
 800116a:	429a      	cmp	r2, r3
 800116c:	bf34      	ite	cc
 800116e:	2301      	movcc	r3, #1
 8001170:	2300      	movcs	r3, #0
 8001172:	b2db      	uxtb	r3, r3
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <_ZN17TimerArrayControl9TimerFeed10updateTimeEv>:

void TimerArrayControl::TimerFeed::updateTime(){
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
    cnt = __HAL_TIM_GET_COUNTER(htim);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <_ZN17TimerArrayControl9TimerFeed14updateTickTimeEv>:

void TimerArrayControl::TimerFeed::updateTickTime(){
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
    cnt = GET_TARGET();
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	629a      	str	r2, [r3, #40]	@ 0x28
    uint32_t tim_cnt = __HAL_TIM_GET_COUNTER(htim);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011bc:	60fb      	str	r3, [r7, #12]
    
    if ((max_count & ((uint32_t)(tim_cnt - cnt))) >= CALLBACK_JITTER){
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c6:	68f9      	ldr	r1, [r7, #12]
 80011c8:	1acb      	subs	r3, r1, r3
 80011ca:	4013      	ands	r3, r2
 80011cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011d0:	d302      	bcc.n	80011d8 <_ZN17TimerArrayControl9TimerFeed14updateTickTimeEv+0x38>
        // if CNT passed CCR more than the acceptable jitter, use the CNT value
        cnt = tim_cnt;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <_ZN17TimerArrayControlC1EP17TIM_HandleTypeDefmmh>:
// -----                                  -----
// ----- TimerArrayControl implementation -----
// -----                                  -----


TimerArrayControl::TimerArrayControl(TIM_HandleTypeDef *const htim, const uint32_t fclk, const uint32_t clkdiv, const uint8_t bits) : 
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	603b      	str	r3, [r7, #0]
    fclk(fclk),
    clkdiv(clkdiv),
    timerFeed(htim, bits),
    isTickOngoing(false)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 f95b 	bl	80014b0 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEEC1Ev>
 80011fa:	4a11      	ldr	r2, [pc, #68]	@ (8001240 <_ZN17TimerArrayControlC1EP17TIM_HandleTypeDefmmh+0x5c>)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	601a      	str	r2, [r3, #0]
    fclk(fclk),
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	609a      	str	r2, [r3, #8]
    clkdiv(clkdiv),
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	60da      	str	r2, [r3, #12]
    isTickOngoing(false)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001214:	bf28      	it	cs
 8001216:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 800121a:	461a      	mov	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	611a      	str	r2, [r3, #16]
    timerFeed(htim, bits),
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3314      	adds	r3, #20
 8001224:	7e3a      	ldrb	r2, [r7, #24]
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff feaf 	bl	8000f8c <_ZN17TimerArrayControl9TimerFeedC1EP17TIM_HandleTypeDefh>
    isTickOngoing(false)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
{}
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	08009238 	.word	0x08009238

08001244 <_ZN17TimerArrayControl5beginEv>:

void TimerArrayControl::begin(){
 8001244:	b580      	push	{r7, lr}
 8001246:	b08c      	sub	sp, #48	@ 0x30
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

    // stop timer if it was running
    HAL_TIM_OC_Stop_IT(timerFeed.htim, TARGET_CC_CHANNEL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fe5c 	bl	8004f10 <HAL_TIM_OC_Stop_IT>

    timerFeed.htim->Init.CounterMode = TIM_COUNTERMODE_UP; // all STM32 counters support it
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
    #ifdef TIM_AUTORELOAD_PRELOAD_DISABLE  // not used by STM32F4
    timerFeed.htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE; // by disabling, write to ARR shadow regs happens immedietely
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
    #endif
    timerFeed.htim->Init.Period = timerFeed.max_count; // set max period for maximum amount of possible delay
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001270:	60da      	str	r2, [r3, #12]
    timerFeed.htim->Init.Prescaler = prescaler - 1; // prescaler divides clock by Prescaler+1
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	3a01      	subs	r2, #1
 800127c:	605a      	str	r2, [r3, #4]

    TIM_OC_InitTypeDef oc_init;
    oc_init.OCMode = TIM_OCMODE_TIMING;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]

    HAL_TIM_OC_Init(timerFeed.htim);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4618      	mov	r0, r3
 8001288:	f003 fcd3 	bl	8004c32 <HAL_TIM_OC_Init>
    HAL_TIM_OC_ConfigChannel(timerFeed.htim, &oc_init, TARGET_CC_CHANNEL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001290:	f107 010c 	add.w	r1, r7, #12
 8001294:	2200      	movs	r2, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f003 ffe8 	bl	800526c <HAL_TIM_OC_ConfigChannel>
    uint32_t cnt = __HAL_TIM_GET_COUNTER(timerFeed.htim);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t target = timerFeed.root.next == nullptr ? (timerFeed.max_count & (cnt-1)) : timerFeed.root.next->target;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d105      	bne.n	80012ba <_ZN17TimerArrayControl5beginEv+0x76>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b4:	3b01      	subs	r3, #1
 80012b6:	4013      	ands	r3, r2
 80012b8:	e002      	b.n	80012c0 <_ZN17TimerArrayControl5beginEv+0x7c>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    __HAL_TIM_SET_COMPARE(timerFeed.htim, TARGET_CC_CHANNEL, target); // if no timers to fire yet, set max delay between unneeded interrupts
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012ca:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_OC_Start_IT(timerFeed.htim, TARGET_CC_CHANNEL);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 fd06 	bl	8004ce4 <HAL_TIM_OC_Start_IT>
}
 80012d8:	bf00      	nop
 80012da:	3730      	adds	r7, #48	@ 0x30
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_ZN17TimerArrayControl15chainedCallbackEP17TIM_HandleTypeDef>:

/*
 * Subscribed to interrupts generated by timerFeed.htim.
 * Only call tick if really timerFeed.htim was the source.
 */
void TimerArrayControl::chainedCallback(TIM_HandleTypeDef* htim){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
    if (timerFeed.htim == htim) tick();
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d102      	bne.n	80012fa <_ZN17TimerArrayControl15chainedCallbackEP17TIM_HandleTypeDef+0x1a>
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f804 	bl	8001302 <_ZN17TimerArrayControl4tickEv>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <_ZN17TimerArrayControl4tickEv>:

/**
 * This method can only be called from interupts.
 * */
void TimerArrayControl::tick(){
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]

    isTickOngoing = true;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    timerFeed.updateTickTime();
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3314      	adds	r3, #20
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff42 	bl	80011a0 <_ZN17TimerArrayControl9TimerFeed14updateTickTimeEv>

    // handle timeout
    while (timerFeed.root.next && COUNTER_MODULO(timerFeed.cnt - timerFeed.root.next->target) < CALLBACK_JITTER){
 800131c:	e042      	b.n	80013a4 <_ZN17TimerArrayControl4tickEv+0xa2>
        Timer* timer = timerFeed.root.next;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001322:	617b      	str	r3, [r7, #20]

        // set up the next interrupt generation
        if (timer->_periodic){
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	7a1b      	ldrb	r3, [r3, #8]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d010      	beq.n	800134e <_ZN17TimerArrayControl4tickEv+0x4c>

            // set new target for timer
            uint32_t target = COUNTER_MODULO(timer->target + timer->_delay);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	68d9      	ldr	r1, [r3, #12]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	440b      	add	r3, r1
 800133a:	4013      	ands	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]

            // find fitting place for timer in string
            timerFeed.updateTimerTarget(timer, target);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3314      	adds	r3, #20
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	6979      	ldr	r1, [r7, #20]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fe9c 	bl	8001084 <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm>
 800134c:	e00c      	b.n	8001368 <_ZN17TimerArrayControl4tickEv+0x66>

        } else {
            // if timer is not periodic, it is done, we can detach it
            Timer* timer = timerFeed.root.next;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001352:	613b      	str	r3, [r7, #16]
            timer->running = false;
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	2200      	movs	r2, #0
 8001358:	751a      	strb	r2, [r3, #20]
            timerFeed.root.next = timer->next;
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	699a      	ldr	r2, [r3, #24]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	62da      	str	r2, [r3, #44]	@ 0x2c
            timer->next = nullptr;
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
        }

        // set the new target
        uint32_t target = timerFeed.root.next == nullptr ? COUNTER_MODULO(timerFeed.cnt - 1) : timerFeed.root.next->target;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800136c:	2b00      	cmp	r3, #0
 800136e:	d106      	bne.n	800137e <_ZN17TimerArrayControl4tickEv+0x7c>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001378:	3b01      	subs	r3, #1
 800137a:	4013      	ands	r3, r2
 800137c:	e002      	b.n	8001384 <_ZN17TimerArrayControl4tickEv+0x82>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	60bb      	str	r3, [r7, #8]
        __HAL_TIM_SET_COMPARE(timerFeed.htim, TARGET_CC_CHANNEL, target);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	635a      	str	r2, [r3, #52]	@ 0x34

        // fire callback
        timer->fire();
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	4798      	blx	r3

        timerFeed.updateTickTime();
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3314      	adds	r3, #20
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fefe 	bl	80011a0 <_ZN17TimerArrayControl9TimerFeed14updateTickTimeEv>
    while (timerFeed.root.next && COUNTER_MODULO(timerFeed.cnt - timerFeed.root.next->target) < CALLBACK_JITTER){
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00b      	beq.n	80013c4 <_ZN17TimerArrayControl4tickEv+0xc2>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	1acb      	subs	r3, r1, r3
 80013bc:	4013      	ands	r3, r2
 80013be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013c2:	d3ac      	bcc.n	800131e <_ZN17TimerArrayControl4tickEv+0x1c>
    }

    isTickOngoing = false;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80013cc:	bf00      	nop
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_ZN17TimerArrayControl21registerAttachedTimerEP5Timer>:

void TimerArrayControl::registerAttachedTimer(Timer* timer){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]

    // if timer is already attached to a controller, do nothing
    if (timer->running) return;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	7d1b      	ldrb	r3, [r3, #20]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d110      	bne.n	8001408 <_ZN17TimerArrayControl21registerAttachedTimerEP5Timer+0x34>

    // get current time in ticks and add the requested delay to find the target time
    timer->target = COUNTER_MODULO(timer->_delay + timerFeed.cnt);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	6859      	ldr	r1, [r3, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013f2:	440b      	add	r3, r1
 80013f4:	401a      	ands	r2, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	60da      	str	r2, [r3, #12]

    // insert timer based on the target time
    timerFeed.insertTimer(timer);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3314      	adds	r3, #20
 80013fe:	6839      	ldr	r1, [r7, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fe2a 	bl	800105a <_ZN17TimerArrayControl9TimerFeed11insertTimerEP5Timer>
 8001406:	e000      	b.n	800140a <_ZN17TimerArrayControl21registerAttachedTimerEP5Timer+0x36>
    if (timer->running) return;
 8001408:	bf00      	nop
}
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <_ZN17TimerArrayControl11attachTimerEP5Timer>:
//
// Public members
//


void TimerArrayControl::attachTimer(Timer* timer){
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]

    if (!isTickOngoing){
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d01d      	beq.n	8001468 <_ZN17TimerArrayControl11attachTimerEP5Timer+0x58>
        // timer is running and this is not on interrupt thread, use interrupt safe attach
        
        DISABLE_INTERRUPT();
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0202 	bic.w	r2, r2, #2
 800143e:	60da      	str	r2, [r3, #12]
        timerFeed.updateTime(); // fetch counter
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3314      	adds	r3, #20
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fe9b 	bl	8001180 <_ZN17TimerArrayControl9TimerFeed10updateTimeEv>
        registerAttachedTimer(timer);
 800144a:	6839      	ldr	r1, [r7, #0]
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ffc1 	bl	80013d4 <_ZN17TimerArrayControl21registerAttachedTimerEP5Timer>
        ENABLE_INTERRUPT();
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 0202 	orr.w	r2, r2, #2
 8001464:	60da      	str	r2, [r3, #12]
    } else {
        // timer is not running or this is an interrupt handler, attach is safe
        registerAttachedTimer(timer);
    }

}
 8001466:	e003      	b.n	8001470 <_ZN17TimerArrayControl11attachTimerEP5Timer+0x60>
        registerAttachedTimer(timer);
 8001468:	6839      	ldr	r1, [r7, #0]
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffb2 	bl	80013d4 <_ZN17TimerArrayControl21registerAttachedTimerEP5Timer>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEE4fireES2_>:
    }
    *hnext = this->next;
}

template<typename ChainID, typename ... Args>
void CallbackChain<ChainID, Args...>::fire(Args... args){
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
    CallbackChain<ChainID, Args...>* obj = last;
 8001480:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEE4fireES2_+0x34>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]
    while(obj){
 8001486:	e009      	b.n	800149c <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEE4fireES2_+0x24>
        obj->chainedCallback(args...);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	3308      	adds	r3, #8
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	4798      	blx	r3
        obj = obj->next;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	60fb      	str	r3, [r7, #12]
    while(obj){
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f2      	bne.n	8001488 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEE4fireES2_+0x10>
    }
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200001f8 	.word	0x200001f8

080014b0 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEEC1Ev>:
CallbackChain<ChainID, Args...>::CallbackChain() : next(last){
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	4a08      	ldr	r2, [pc, #32]	@ (80014dc <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEEC1Ev+0x2c>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEEC1Ev+0x30>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	605a      	str	r2, [r3, #4]
    last = this;
 80014c6:	4a06      	ldr	r2, [pc, #24]	@ (80014e0 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEEC1Ev+0x30>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	0800924c 	.word	0x0800924c
 80014e0:	200001f8 	.word	0x200001f8

080014e4 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEED1Ev>:
CallbackChain<ChainID, Args...>::~CallbackChain() {
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
}
 80014ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001520 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEED1Ev+0x3c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
    CallbackChain<ChainID, Args...>** hnext = &last;
 80014f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEED1Ev+0x40>)
 80014f4:	60fb      	str	r3, [r7, #12]
    while(*hnext != this){
 80014f6:	e003      	b.n	8001500 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEED1Ev+0x1c>
        hnext = &((*hnext)->next);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	3304      	adds	r3, #4
 80014fe:	60fb      	str	r3, [r7, #12]
    while(*hnext != this){
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	d1f6      	bne.n	80014f8 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEED1Ev+0x14>
    *hnext = this->next;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	601a      	str	r2, [r3, #0]
}
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	0800924c 	.word	0x0800924c
 8001524:	200001f8 	.word	0x200001f8

08001528 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEED0Ev>:
CallbackChain<ChainID, Args...>::~CallbackChain() {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
}
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ffd7 	bl	80014e4 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEED1Ev>
 8001536:	2108      	movs	r1, #8
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f004 ff9b 	bl	8006474 <_ZdlPvj>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_ZN17TimerArrayControlD1Ev>:
// clkdiv: how much clock division is required, maximum allowed value depends on the specific timer's prescale register's size
//         currently limited for every timer to 65536 (16 bit prescale register), it could become a setting if needed
// bits: the number of bits in the counter register (16 or 32)
// prescaler: minimum of 65536 and clkdiv, compare with clkdiv to find out if selected prescale is possible
// fcnt: the actual counting frequency based on the settings and limitations
class TimerArrayControl : TIM_OC_DelayElapsed_CallbackChain{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	4a05      	ldr	r2, [pc, #20]	@ (8001568 <_ZN17TimerArrayControlD1Ev+0x20>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ffc3 	bl	80014e4 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEED1Ev>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	08009238 	.word	0x08009238

0800156c <_ZN17TimerArrayControlD0Ev>:
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ffe7 	bl	8001548 <_ZN17TimerArrayControlD1Ev>
 800157a:	2144      	movs	r1, #68	@ 0x44
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f004 ff79 	bl	8006474 <_ZdlPvj>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <_Z6doStepv>:
int toggleCount = 0;

// variables for generating sinwave target path
int desiredPos1 = 0;

void doStep() {
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	if(currentPos < desiredPos1) {
 8001590:	4b25      	ldr	r3, [pc, #148]	@ (8001628 <_Z6doStepv+0x9c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b25      	ldr	r3, [pc, #148]	@ (800162c <_Z6doStepv+0xa0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	da1e      	bge.n	80015da <_Z6doStepv+0x4e>
		HAL_GPIO_WritePin(GPIOA,DIR4_Pin,GPIO_PIN_SET);
 800159c:	2201      	movs	r2, #1
 800159e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015a2:	4823      	ldr	r0, [pc, #140]	@ (8001630 <_Z6doStepv+0xa4>)
 80015a4:	f001 fc52 	bl	8002e4c <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GPIOB,STEP4_Pin);
 80015a8:	2102      	movs	r1, #2
 80015aa:	4822      	ldr	r0, [pc, #136]	@ (8001634 <_Z6doStepv+0xa8>)
 80015ac:	f001 fc67 	bl	8002e7e <HAL_GPIO_TogglePin>
		if (toggleCount == 1) {
 80015b0:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <_Z6doStepv+0xac>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d104      	bne.n	80015c2 <_Z6doStepv+0x36>
			currentPos++;
 80015b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <_Z6doStepv+0x9c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	4a1a      	ldr	r2, [pc, #104]	@ (8001628 <_Z6doStepv+0x9c>)
 80015c0:	6013      	str	r3, [r2, #0]
		}

		if (toggleCount == 0) {
 80015c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <_Z6doStepv+0xac>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d103      	bne.n	80015d2 <_Z6doStepv+0x46>
			toggleCount = 1;
 80015ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <_Z6doStepv+0xac>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
			toggleCount = 1;
		} else {
			toggleCount = 0;
		}
	}
}
 80015d0:	e027      	b.n	8001622 <_Z6doStepv+0x96>
			toggleCount = 0;
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <_Z6doStepv+0xac>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
}
 80015d8:	e023      	b.n	8001622 <_Z6doStepv+0x96>
	} else if (currentPos > desiredPos1) {
 80015da:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <_Z6doStepv+0x9c>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4b13      	ldr	r3, [pc, #76]	@ (800162c <_Z6doStepv+0xa0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	dd1d      	ble.n	8001622 <_Z6doStepv+0x96>
		HAL_GPIO_WritePin(GPIOA,DIR4_Pin,GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015ec:	4810      	ldr	r0, [pc, #64]	@ (8001630 <_Z6doStepv+0xa4>)
 80015ee:	f001 fc2d 	bl	8002e4c <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GPIOB,STEP4_Pin);
 80015f2:	2102      	movs	r1, #2
 80015f4:	480f      	ldr	r0, [pc, #60]	@ (8001634 <_Z6doStepv+0xa8>)
 80015f6:	f001 fc42 	bl	8002e7e <HAL_GPIO_TogglePin>
		if (toggleCount == 1) {
 80015fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <_Z6doStepv+0xac>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d104      	bne.n	800160c <_Z6doStepv+0x80>
			currentPos--;
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <_Z6doStepv+0x9c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3b01      	subs	r3, #1
 8001608:	4a07      	ldr	r2, [pc, #28]	@ (8001628 <_Z6doStepv+0x9c>)
 800160a:	6013      	str	r3, [r2, #0]
		if (toggleCount == 0) {
 800160c:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <_Z6doStepv+0xac>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d103      	bne.n	800161c <_Z6doStepv+0x90>
			toggleCount = 1;
 8001614:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <_Z6doStepv+0xac>)
 8001616:	2201      	movs	r2, #1
 8001618:	601a      	str	r2, [r3, #0]
}
 800161a:	e002      	b.n	8001622 <_Z6doStepv+0x96>
			toggleCount = 0;
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <_Z6doStepv+0xac>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000244 	.word	0x20000244
 800162c:	2000024c 	.word	0x2000024c
 8001630:	40020000 	.word	0x40020000
 8001634:	40020400 	.word	0x40020400
 8001638:	20000248 	.word	0x20000248

0800163c <app_start>:
	doStep // pointer to the static callback function
);



void app_start(){
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
    control.attachTimer(&stepperTimer);
 8001640:	4904      	ldr	r1, [pc, #16]	@ (8001654 <app_start+0x18>)
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <app_start+0x1c>)
 8001644:	f7ff fee4 	bl	8001410 <_ZN17TimerArrayControl11attachTimerEP5Timer>
    control.begin();
 8001648:	4803      	ldr	r0, [pc, #12]	@ (8001658 <app_start+0x1c>)
 800164a:	f7ff fdfb 	bl	8001244 <_ZN17TimerArrayControl5beginEv>
//    	if(desiredPos1 < 800) {
//    		desiredPos1++;
//    	}
//
//    }
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000250 	.word	0x20000250
 8001658:	20000200 	.word	0x20000200

0800165c <_Z41__static_initialization_and_destruction_0ii>:
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af02      	add	r7, sp, #8
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d11f      	bne.n	80016ac <_Z41__static_initialization_and_destruction_0ii+0x50>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001672:	4293      	cmp	r3, r2
 8001674:	d11a      	bne.n	80016ac <_Z41__static_initialization_and_destruction_0ii+0x50>
uint32_t frequencyDivision = timerInputFrequency/10000;
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a15      	ldr	r2, [pc, #84]	@ (80016d0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800167c:	fba2 2303 	umull	r2, r3, r2, r3
 8001680:	0b5b      	lsrs	r3, r3, #13
 8001682:	4a14      	ldr	r2, [pc, #80]	@ (80016d4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001684:	6013      	str	r3, [r2, #0]
    timerCounterBits);
 8001686:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800168c:	6819      	ldr	r1, [r3, #0]
 800168e:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	460b      	mov	r3, r1
 8001698:	4910      	ldr	r1, [pc, #64]	@ (80016dc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800169a:	4811      	ldr	r0, [pc, #68]	@ (80016e0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800169c:	f7ff fda2 	bl	80011e4 <_ZN17TimerArrayControlC1EP17TIM_HandleTypeDefmmh>
);
 80016a0:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	2103      	movs	r1, #3
 80016a6:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80016a8:	f7ff fc36 	bl	8000f18 <_ZN5TimerC1EmbPFvvE>
Timer stepperTimer(
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d107      	bne.n	80016c2 <_Z41__static_initialization_and_destruction_0ii+0x66>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d102      	bne.n	80016c2 <_Z41__static_initialization_and_destruction_0ii+0x66>
TimerArrayControl control(
 80016bc:	4808      	ldr	r0, [pc, #32]	@ (80016e0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80016be:	f7ff ff43 	bl	8001548 <_ZN17TimerArrayControlD1Ev>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000000 	.word	0x20000000
 80016d0:	d1b71759 	.word	0xd1b71759
 80016d4:	200001fc 	.word	0x200001fc
 80016d8:	20000004 	.word	0x20000004
 80016dc:	200002c0 	.word	0x200002c0
 80016e0:	20000200 	.word	0x20000200
 80016e4:	0800158d 	.word	0x0800158d
 80016e8:	20000250 	.word	0x20000250

080016ec <_GLOBAL__sub_I_timerInputFrequency>:
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7ff ffb1 	bl	800165c <_Z41__static_initialization_and_destruction_0ii>
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_GLOBAL__sub_D_timerInputFrequency>:
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
 8001700:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001704:	2000      	movs	r0, #0
 8001706:	f7ff ffa9 	bl	800165c <_Z41__static_initialization_and_destruction_0ii>
 800170a:	bd80      	pop	{r7, pc}

0800170c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800170c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001710:	f5ad 7d4c 	sub.w	sp, sp, #816	@ 0x330
 8001714:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001716:	f001 f845 	bl	80027a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800171a:	f000 fa5d 	bl	8001bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800171e:	f000 fb73 	bl	8001e08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001722:	f000 fb47 	bl	8001db4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001726:	f000 fac9 	bl	8001cbc <MX_I2C1_Init>
  MX_TIM2_Init();
 800172a:	f000 faf7 	bl	8001d1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	char UART_buffer[100];
	int len = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c

	uint8_t state = WAITING_FOR_WAKEUP;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
	uint8_t m_dataBuffer[256]; // Buffer for incoming messages
	m_dataBuffer[0] = XBUS_PREAMBLE;
 800173a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800173e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001742:	22fa      	movs	r2, #250	@ 0xfa
 8001744:	701a      	strb	r2, [r3, #0]
	m_dataBuffer[1] = XBUS_MASTERDEVICE;
 8001746:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 800174a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800174e:	22ff      	movs	r2, #255	@ 0xff
 8001750:	705a      	strb	r2, [r3, #1]

	uint16_t notificationMessageSize;
	uint16_t measurementMessageSize;
	uint8_t status[4];

	app_start();
 8001752:	f7ff ff73 	bl	800163c <app_start>
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 8001756:	2201      	movs	r2, #1
 8001758:	2120      	movs	r1, #32
 800175a:	48cc      	ldr	r0, [pc, #816]	@ (8001a8c <main+0x380>)
 800175c:	f001 fb76 	bl	8002e4c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001760:	2064      	movs	r0, #100	@ 0x64
 8001762:	f001 f891 	bl	8002888 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	2120      	movs	r1, #32
 800176a:	48c8      	ldr	r0, [pc, #800]	@ (8001a8c <main+0x380>)
 800176c:	f001 fb6e 	bl	8002e4c <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// 1) Read pipe status and save incoming message sizes
			if(checkDataReadyLineMain())
 8001770:	f000 febc 	bl	80024ec <checkDataReadyLineMain>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d02d      	beq.n	80017d6 <main+0xca>
			{
				HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), XBUS_PIPE_STATUS, 1, status, sizeof(status), 100);
 800177a:	2364      	movs	r3, #100	@ 0x64
 800177c:	9302      	str	r3, [sp, #8]
 800177e:	2304      	movs	r3, #4
 8001780:	9301      	str	r3, [sp, #4]
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	2301      	movs	r3, #1
 8001788:	2204      	movs	r2, #4
 800178a:	21d6      	movs	r1, #214	@ 0xd6
 800178c:	48c0      	ldr	r0, [pc, #768]	@ (8001a90 <main+0x384>)
 800178e:	f001 fdf7 	bl	8003380 <HAL_I2C_Mem_Read>
				notificationMessageSize = status[0] | (status[1] << 8);
 8001792:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001796:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b21a      	sxth	r2, r3
 800179e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80017a2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80017a6:	785b      	ldrb	r3, [r3, #1]
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	4313      	orrs	r3, r2
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	f8a7 3314 	strh.w	r3, [r7, #788]	@ 0x314
				measurementMessageSize = status[2] | (status[3] << 8);
 80017b4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80017b8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80017bc:	789b      	ldrb	r3, [r3, #2]
 80017be:	b21a      	sxth	r2, r3
 80017c0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80017c4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80017c8:	78db      	ldrb	r3, [r3, #3]
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	f8a7 3312 	strh.w	r3, [r7, #786]	@ 0x312
			}

			// 2) Read incoming notification, save into m_dataBuffer (being sure to skip preamble and master device bytes)
			if ((notificationMessageSize && notificationMessageSize < sizeof(m_dataBuffer)) ) {
 80017d6:	f8b7 3314 	ldrh.w	r3, [r7, #788]	@ 0x314
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 8127 	beq.w	8001a2e <main+0x322>
 80017e0:	f8b7 3314 	ldrh.w	r3, [r7, #788]	@ 0x314
 80017e4:	2bff      	cmp	r3, #255	@ 0xff
 80017e6:	f200 8122 	bhi.w	8001a2e <main+0x322>
				if(checkDataReadyLineMain()) {
 80017ea:	f000 fe7f 	bl	80024ec <checkDataReadyLineMain>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 811c 	beq.w	8001a2e <main+0x322>
					HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), XBUS_NOTIFICATION_PIPE, 1, &m_dataBuffer[2], notificationMessageSize, 100);
 80017f6:	2364      	movs	r3, #100	@ 0x64
 80017f8:	9302      	str	r3, [sp, #8]
 80017fa:	f8b7 3314 	ldrh.w	r3, [r7, #788]	@ 0x314
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8001804:	3302      	adds	r3, #2
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2301      	movs	r3, #1
 800180a:	2205      	movs	r2, #5
 800180c:	21d6      	movs	r1, #214	@ 0xd6
 800180e:	48a0      	ldr	r0, [pc, #640]	@ (8001a90 <main+0x384>)
 8001810:	f001 fdb6 	bl	8003380 <HAL_I2C_Mem_Read>


					// 3) User xbus.h helper to read the message ID and enter a new program state if needed
					if (Xbus_getMessageId(m_dataBuffer) == XMID_Wakeup && state == WAITING_FOR_WAKEUP)
 8001814:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8001818:	4618      	mov	r0, r3
 800181a:	f000 fdc3 	bl	80023a4 <Xbus_getMessageId>
 800181e:	4603      	mov	r3, r0
 8001820:	2b3e      	cmp	r3, #62	@ 0x3e
 8001822:	d135      	bne.n	8001890 <main+0x184>
 8001824:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 8001828:	2b00      	cmp	r3, #0
 800182a:	d131      	bne.n	8001890 <main+0x184>
					{
						len = snprintf(UART_buffer, sizeof(UART_buffer), "Got Wakeup\n");
 800182c:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001830:	4a98      	ldr	r2, [pc, #608]	@ (8001a94 <main+0x388>)
 8001832:	2164      	movs	r1, #100	@ 0x64
 8001834:	4618      	mov	r0, r3
 8001836:	f005 fbf9 	bl	800702c <sniprintf>
 800183a:	f8c7 030c 	str.w	r0, [r7, #780]	@ 0x30c
						HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 10000);
 800183e:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8001842:	b29a      	uxth	r2, r3
 8001844:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8001848:	f242 7310 	movw	r3, #10000	@ 0x2710
 800184c:	4892      	ldr	r0, [pc, #584]	@ (8001a98 <main+0x38c>)
 800184e:	f004 fa55 	bl	8005cfc <HAL_UART_Transmit>

						Xbus_message(m_xbusTxBuffer, 0xFF, XMID_ReqDid, 0);
 8001852:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8001856:	2300      	movs	r3, #0
 8001858:	2200      	movs	r2, #0
 800185a:	21ff      	movs	r1, #255	@ 0xff
 800185c:	f000 fe03 	bl	8002466 <Xbus_message>

						rawLength = Xbus_createRawMessageHelper(buffer, m_xbusTxBuffer);
 8001860:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f000 fe4e 	bl	800250c <Xbus_createRawMessageHelper>
 8001870:	f8c7 0308 	str.w	r0, [r7, #776]	@ 0x308
						HAL_I2C_Master_Transmit(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), (uint8_t*)buffer, rawLength, 100);
 8001874:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8001878:	b29b      	uxth	r3, r3
 800187a:	f107 020c 	add.w	r2, r7, #12
 800187e:	2164      	movs	r1, #100	@ 0x64
 8001880:	9100      	str	r1, [sp, #0]
 8001882:	21d6      	movs	r1, #214	@ 0xd6
 8001884:	4882      	ldr	r0, [pc, #520]	@ (8001a90 <main+0x384>)
 8001886:	f001 fc7d 	bl	8003184 <HAL_I2C_Master_Transmit>

						state = WAITING_FOR_ID;
 800188a:	2301      	movs	r3, #1
 800188c:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
					}

					if (Xbus_getMessageId(m_dataBuffer) == XMID_DeviceId && state == WAITING_FOR_ID)
 8001890:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fd85 	bl	80023a4 <Xbus_getMessageId>
 800189a:	4603      	mov	r3, r0
 800189c:	2b01      	cmp	r3, #1
 800189e:	d158      	bne.n	8001952 <main+0x246>
 80018a0:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d154      	bne.n	8001952 <main+0x246>
					{
						len = snprintf(UART_buffer, sizeof(UART_buffer), "Got Device ID\n");
 80018a8:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80018ac:	4a7b      	ldr	r2, [pc, #492]	@ (8001a9c <main+0x390>)
 80018ae:	2164      	movs	r1, #100	@ 0x64
 80018b0:	4618      	mov	r0, r3
 80018b2:	f005 fbbb 	bl	800702c <sniprintf>
 80018b6:	f8c7 030c 	str.w	r0, [r7, #780]	@ 0x30c
						HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 10000);
 80018ba:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80018be:	b29a      	uxth	r2, r3
 80018c0:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 80018c4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80018c8:	4873      	ldr	r0, [pc, #460]	@ (8001a98 <main+0x38c>)
 80018ca:	f004 fa17 	bl	8005cfc <HAL_UART_Transmit>

						Xbus_message(m_xbusTxBuffer, 0xFF, XMID_SetOutputConfig, 4);
 80018ce:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 80018d2:	2304      	movs	r3, #4
 80018d4:	22c0      	movs	r2, #192	@ 0xc0
 80018d6:	21ff      	movs	r1, #255	@ 0xff
 80018d8:	f000 fdc5 	bl	8002466 <Xbus_message>
						// Set Output mode: Euler angles (0x2030)
						Xbus_getPointerToPayload(m_xbusTxBuffer)[0] = 0x20;
 80018dc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 fde3 	bl	80024ac <Xbus_getPointerToPayload>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2220      	movs	r2, #32
 80018ea:	701a      	strb	r2, [r3, #0]
						Xbus_getPointerToPayload(m_xbusTxBuffer)[1] = 0x30;
 80018ec:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 fddb 	bl	80024ac <Xbus_getPointerToPayload>
 80018f6:	4603      	mov	r3, r0
 80018f8:	3301      	adds	r3, #1
 80018fa:	2230      	movs	r2, #48	@ 0x30
 80018fc:	701a      	strb	r2, [r3, #0]
						// Set Output rate: 1Hz (0x0001)
						Xbus_getPointerToPayload(m_xbusTxBuffer)[2] = 0x00;
 80018fe:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fdd2 	bl	80024ac <Xbus_getPointerToPayload>
 8001908:	4603      	mov	r3, r0
 800190a:	3302      	adds	r3, #2
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
						Xbus_getPointerToPayload(m_xbusTxBuffer)[3] = 0x64;
 8001910:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001914:	4618      	mov	r0, r3
 8001916:	f000 fdc9 	bl	80024ac <Xbus_getPointerToPayload>
 800191a:	4603      	mov	r3, r0
 800191c:	3303      	adds	r3, #3
 800191e:	2264      	movs	r2, #100	@ 0x64
 8001920:	701a      	strb	r2, [r3, #0]


						rawLength = Xbus_createRawMessageHelper(buffer, m_xbusTxBuffer);
 8001922:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fded 	bl	800250c <Xbus_createRawMessageHelper>
 8001932:	f8c7 0308 	str.w	r0, [r7, #776]	@ 0x308
						HAL_I2C_Master_Transmit(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), (uint8_t*)buffer, rawLength, 100);
 8001936:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 800193a:	b29b      	uxth	r3, r3
 800193c:	f107 020c 	add.w	r2, r7, #12
 8001940:	2164      	movs	r1, #100	@ 0x64
 8001942:	9100      	str	r1, [sp, #0]
 8001944:	21d6      	movs	r1, #214	@ 0xd6
 8001946:	4852      	ldr	r0, [pc, #328]	@ (8001a90 <main+0x384>)
 8001948:	f001 fc1c 	bl	8003184 <HAL_I2C_Master_Transmit>

						state = WAITING_FOR_CONFIG_ACK;
 800194c:	2302      	movs	r3, #2
 800194e:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
					}

					// note: the config ack message is just the output config itself
					if(Xbus_getMessageId(m_dataBuffer) == XMID_OutputConfig && state == WAITING_FOR_CONFIG_ACK)
 8001952:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fd24 	bl	80023a4 <Xbus_getMessageId>
 800195c:	4603      	mov	r3, r0
 800195e:	2bc1      	cmp	r3, #193	@ 0xc1
 8001960:	d165      	bne.n	8001a2e <main+0x322>
 8001962:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 8001966:	2b02      	cmp	r3, #2
 8001968:	d161      	bne.n	8001a2e <main+0x322>
					{
						len = snprintf(UART_buffer, sizeof(UART_buffer), "Got config ACK\n");
 800196a:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800196e:	4a4c      	ldr	r2, [pc, #304]	@ (8001aa0 <main+0x394>)
 8001970:	2164      	movs	r1, #100	@ 0x64
 8001972:	4618      	mov	r0, r3
 8001974:	f005 fb5a 	bl	800702c <sniprintf>
 8001978:	f8c7 030c 	str.w	r0, [r7, #780]	@ 0x30c
						HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 10000);
 800197c:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8001980:	b29a      	uxth	r2, r3
 8001982:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8001986:	f242 7310 	movw	r3, #10000	@ 0x2710
 800198a:	4843      	ldr	r0, [pc, #268]	@ (8001a98 <main+0x38c>)
 800198c:	f004 f9b6 	bl	8005cfc <HAL_UART_Transmit>

						uint8_t buffer[2];
						HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), XBUS_PROTOCOL_INFO, 1, buffer, sizeof(buffer), 100);
 8001990:	2364      	movs	r3, #100	@ 0x64
 8001992:	9302      	str	r3, [sp, #8]
 8001994:	2302      	movs	r3, #2
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	463b      	mov	r3, r7
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2301      	movs	r3, #1
 800199e:	2201      	movs	r2, #1
 80019a0:	21d6      	movs	r1, #214	@ 0xd6
 80019a2:	483b      	ldr	r0, [pc, #236]	@ (8001a90 <main+0x384>)
 80019a4:	f001 fcec 	bl	8003380 <HAL_I2C_Mem_Read>

						uint8_t version = buffer[0];
 80019a8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80019ac:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	f887 3307 	strb.w	r3, [r7, #775]	@ 0x307
						uint8_t dataReadyConfig = buffer[1];
 80019b6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80019ba:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80019be:	785b      	ldrb	r3, [r3, #1]
 80019c0:	f887 3306 	strb.w	r3, [r7, #774]	@ 0x306

						len = snprintf(UART_buffer, sizeof(UART_buffer), "Version: %d\nData Ready Config: %d\nGoing into measurement mode...\n",version,dataReadyConfig);
 80019c4:	f897 2307 	ldrb.w	r2, [r7, #775]	@ 0x307
 80019c8:	f897 3306 	ldrb.w	r3, [r7, #774]	@ 0x306
 80019cc:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	4613      	mov	r3, r2
 80019d4:	4a33      	ldr	r2, [pc, #204]	@ (8001aa4 <main+0x398>)
 80019d6:	2164      	movs	r1, #100	@ 0x64
 80019d8:	f005 fb28 	bl	800702c <sniprintf>
 80019dc:	f8c7 030c 	str.w	r0, [r7, #780]	@ 0x30c
						HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 10000);
 80019e0:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 80019ea:	f242 7310 	movw	r3, #10000	@ 0x2710
 80019ee:	482a      	ldr	r0, [pc, #168]	@ (8001a98 <main+0x38c>)
 80019f0:	f004 f984 	bl	8005cfc <HAL_UART_Transmit>

						Xbus_message(m_xbusTxBuffer, 0xFF, XMID_GotoMeasurement, 0);
 80019f4:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 80019f8:	2300      	movs	r3, #0
 80019fa:	2210      	movs	r2, #16
 80019fc:	21ff      	movs	r1, #255	@ 0xff
 80019fe:	f000 fd32 	bl	8002466 <Xbus_message>
						rawLength = Xbus_createRawMessageHelper(buffer, m_xbusTxBuffer);
 8001a02:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001a06:	463b      	mov	r3, r7
 8001a08:	4611      	mov	r1, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fd7e 	bl	800250c <Xbus_createRawMessageHelper>
 8001a10:	f8c7 0308 	str.w	r0, [r7, #776]	@ 0x308
						HAL_I2C_Master_Transmit(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), (uint8_t*)buffer, rawLength, 100);
 8001a14:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	463a      	mov	r2, r7
 8001a1c:	2164      	movs	r1, #100	@ 0x64
 8001a1e:	9100      	str	r1, [sp, #0]
 8001a20:	21d6      	movs	r1, #214	@ 0xd6
 8001a22:	481b      	ldr	r0, [pc, #108]	@ (8001a90 <main+0x384>)
 8001a24:	f001 fbae 	bl	8003184 <HAL_I2C_Master_Transmit>

						state = READY;
 8001a28:	2304      	movs	r3, #4
 8001a2a:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
					}
				}
			}

			if ((measurementMessageSize && measurementMessageSize < sizeof(m_dataBuffer)) && state == READY) {
 8001a2e:	f8b7 3312 	ldrh.w	r3, [r7, #786]	@ 0x312
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f43f ae9c 	beq.w	8001770 <main+0x64>
 8001a38:	f8b7 3312 	ldrh.w	r3, [r7, #786]	@ 0x312
 8001a3c:	2bff      	cmp	r3, #255	@ 0xff
 8001a3e:	f63f ae97 	bhi.w	8001770 <main+0x64>
 8001a42:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	f47f ae92 	bne.w	8001770 <main+0x64>
				if(checkDataReadyLineMain())
 8001a4c:	f000 fd4e 	bl	80024ec <checkDataReadyLineMain>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f43f ae8c 	beq.w	8001770 <main+0x64>
				{
					HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), XBUS_MEASUREMENT_PIPE, 1, &m_dataBuffer[2], measurementMessageSize, 100);
 8001a58:	2364      	movs	r3, #100	@ 0x64
 8001a5a:	9302      	str	r3, [sp, #8]
 8001a5c:	f8b7 3312 	ldrh.w	r3, [r7, #786]	@ 0x312
 8001a60:	9301      	str	r3, [sp, #4]
 8001a62:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8001a66:	3302      	adds	r3, #2
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	2206      	movs	r2, #6
 8001a6e:	21d6      	movs	r1, #214	@ 0xd6
 8001a70:	4807      	ldr	r0, [pc, #28]	@ (8001a90 <main+0x384>)
 8001a72:	f001 fc85 	bl	8003380 <HAL_I2C_Mem_Read>


					if(Xbus_getMessageId(m_dataBuffer) == XMID_MtData2)
 8001a76:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 fc92 	bl	80023a4 <Xbus_getMessageId>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b36      	cmp	r3, #54	@ 0x36
 8001a84:	f47f ae74 	bne.w	8001770 <main+0x64>
 8001a88:	e00e      	b.n	8001aa8 <main+0x39c>
 8001a8a:	bf00      	nop
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	2000026c 	.word	0x2000026c
 8001a94:	08009160 	.word	0x08009160
 8001a98:	20000308 	.word	0x20000308
 8001a9c:	0800916c 	.word	0x0800916c
 8001aa0:	0800917c 	.word	0x0800917c
 8001aa4:	0800918c 	.word	0x0800918c
					{
						index = 4;
 8001aa8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8001aac:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	601a      	str	r2, [r3, #0]

						uint16_t dataId = extractUint16(m_dataBuffer, &index);
 8001ab4:	f107 0208 	add.w	r2, r7, #8
 8001ab8:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8001abc:	4611      	mov	r1, r2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 fdb7 	bl	8002632 <extractUint16>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f8a7 3304 	strh.w	r3, [r7, #772]	@ 0x304
						uint8_t dataSize = extractUint8(m_dataBuffer, &index);
 8001aca:	f107 0208 	add.w	r2, r7, #8
 8001ace:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 fd94 	bl	8002602 <extractUint8>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f887 3303 	strb.w	r3, [r7, #771]	@ 0x303
						if (dataId == 0x2030 && dataSize == 12)
 8001ae0:	f8b7 3304 	ldrh.w	r3, [r7, #772]	@ 0x304
 8001ae4:	f242 0230 	movw	r2, #8240	@ 0x2030
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d157      	bne.n	8001b9c <main+0x490>
 8001aec:	f897 3303 	ldrb.w	r3, [r7, #771]	@ 0x303
 8001af0:	2b0c      	cmp	r3, #12
 8001af2:	d153      	bne.n	8001b9c <main+0x490>
						{
							float roll = extractFloat(m_dataBuffer, &index);
 8001af4:	f107 0208 	add.w	r2, r7, #8
 8001af8:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fe10 	bl	8002724 <extractFloat>
 8001b04:	ed87 0abf 	vstr	s0, [r7, #764]	@ 0x2fc
							float pitch = extractFloat(m_dataBuffer, &index);
 8001b08:	f107 0208 	add.w	r2, r7, #8
 8001b0c:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 fe06 	bl	8002724 <extractFloat>
 8001b18:	ed87 0abe 	vstr	s0, [r7, #760]	@ 0x2f8
							float yaw = extractFloat(m_dataBuffer, &index);
 8001b1c:	f107 0208 	add.w	r2, r7, #8
 8001b20:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8001b24:	4611      	mov	r1, r2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fdfc 	bl	8002724 <extractFloat>
 8001b2c:	ed87 0abd 	vstr	s0, [r7, #756]	@ 0x2f4
							int len2 = snprintf(g_textBuffer, sizeof(g_textBuffer), "XMID_MtData2: roll = %.2f, pitch = %.2f, yaw = %.2f\n", roll , pitch, yaw);
 8001b30:	f8d7 02fc 	ldr.w	r0, [r7, #764]	@ 0x2fc
 8001b34:	f7fe fd28 	bl	8000588 <__aeabi_f2d>
 8001b38:	4604      	mov	r4, r0
 8001b3a:	460d      	mov	r5, r1
 8001b3c:	f8d7 02f8 	ldr.w	r0, [r7, #760]	@ 0x2f8
 8001b40:	f7fe fd22 	bl	8000588 <__aeabi_f2d>
 8001b44:	4680      	mov	r8, r0
 8001b46:	4689      	mov	r9, r1
 8001b48:	f8d7 02f4 	ldr.w	r0, [r7, #756]	@ 0x2f4
 8001b4c:	f7fe fd1c 	bl	8000588 <__aeabi_f2d>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b58:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001b5c:	e9cd 4500 	strd	r4, r5, [sp]
 8001b60:	4a18      	ldr	r2, [pc, #96]	@ (8001bc4 <main+0x4b8>)
 8001b62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b66:	4818      	ldr	r0, [pc, #96]	@ (8001bc8 <main+0x4bc>)
 8001b68:	f005 fa60 	bl	800702c <sniprintf>
 8001b6c:	f8c7 02f0 	str.w	r0, [r7, #752]	@ 0x2f0
							HAL_UART_Transmit(&huart2, (uint8_t*)g_textBuffer, len2, 100);
 8001b70:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	2364      	movs	r3, #100	@ 0x64
 8001b78:	4913      	ldr	r1, [pc, #76]	@ (8001bc8 <main+0x4bc>)
 8001b7a:	4814      	ldr	r0, [pc, #80]	@ (8001bcc <main+0x4c0>)
 8001b7c:	f004 f8be 	bl	8005cfc <HAL_UART_Transmit>
							// host->printf("%s\n", g_textBuffer);
							desiredPos1 = 12*(int)roll;
 8001b80:	edd7 7abf 	vldr	s15, [r7, #764]	@ 0x2fc
 8001b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b88:	ee17 2a90 	vmov	r2, s15
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <main+0x4c4>)
 8001b98:	601a      	str	r2, [r3, #0]
						{
 8001b9a:	e011      	b.n	8001bc0 <main+0x4b4>
						} else {
							len = snprintf(UART_buffer, sizeof(UART_buffer), "Error reading message ID\n");
 8001b9c:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd4 <main+0x4c8>)
 8001ba2:	2164      	movs	r1, #100	@ 0x64
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f005 fa41 	bl	800702c <sniprintf>
 8001baa:	f8c7 030c 	str.w	r0, [r7, #780]	@ 0x30c
						HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 100);
 8001bae:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8001bb8:	2364      	movs	r3, #100	@ 0x64
 8001bba:	4804      	ldr	r0, [pc, #16]	@ (8001bcc <main+0x4c0>)
 8001bbc:	f004 f89e 	bl	8005cfc <HAL_UART_Transmit>
			if(checkDataReadyLineMain())
 8001bc0:	e5d6      	b.n	8001770 <main+0x64>
 8001bc2:	bf00      	nop
 8001bc4:	080091d0 	.word	0x080091d0
 8001bc8:	20000350 	.word	0x20000350
 8001bcc:	20000308 	.word	0x20000308
 8001bd0:	2000024c 	.word	0x2000024c
 8001bd4:	08009208 	.word	0x08009208

08001bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b094      	sub	sp, #80	@ 0x50
 8001bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	2234      	movs	r2, #52	@ 0x34
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f005 fa97 	bl	800711a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bec:	f107 0308 	add.w	r3, r7, #8
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb4 <SystemClock_Config+0xdc>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	4a2b      	ldr	r2, [pc, #172]	@ (8001cb4 <SystemClock_Config+0xdc>)
 8001c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0c:	4b29      	ldr	r3, [pc, #164]	@ (8001cb4 <SystemClock_Config+0xdc>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c18:	2300      	movs	r3, #0
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	4b26      	ldr	r3, [pc, #152]	@ (8001cb8 <SystemClock_Config+0xe0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a25      	ldr	r2, [pc, #148]	@ (8001cb8 <SystemClock_Config+0xe0>)
 8001c22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b23      	ldr	r3, [pc, #140]	@ (8001cb8 <SystemClock_Config+0xe0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c30:	603b      	str	r3, [r7, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c34:	2302      	movs	r3, #2
 8001c36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c3c:	2310      	movs	r3, #16
 8001c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c40:	2302      	movs	r3, #2
 8001c42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c44:	2300      	movs	r3, #0
 8001c46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c48:	2308      	movs	r3, #8
 8001c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001c4c:	23b4      	movs	r3, #180	@ 0xb4
 8001c4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c50:	2302      	movs	r3, #2
 8001c52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c54:	2302      	movs	r3, #2
 8001c56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c5c:	f107 031c 	add.w	r3, r7, #28
 8001c60:	4618      	mov	r0, r3
 8001c62:	f002 fcf9 	bl	8004658 <HAL_RCC_OscConfig>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c6c:	f000 f98e 	bl	8001f8c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c70:	f002 f958 	bl	8003f24 <HAL_PWREx_EnableOverDrive>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c7a:	f000 f987 	bl	8001f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c7e:	230f      	movs	r3, #15
 8001c80:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c82:	2302      	movs	r3, #2
 8001c84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c8a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c94:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c96:	f107 0308 	add.w	r3, r7, #8
 8001c9a:	2105      	movs	r1, #5
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f002 f991 	bl	8003fc4 <HAL_RCC_ClockConfig>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001ca8:	f000 f970 	bl	8001f8c <Error_Handler>
  }
}
 8001cac:	bf00      	nop
 8001cae:	3750      	adds	r7, #80	@ 0x50
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40007000 	.word	0x40007000

08001cbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cc0:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <MX_I2C1_Init+0x54>)
 8001cc2:	4a14      	ldr	r2, [pc, #80]	@ (8001d14 <MX_I2C1_Init+0x58>)
 8001cc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001cc6:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <MX_I2C1_Init+0x54>)
 8001cc8:	4a13      	ldr	r2, [pc, #76]	@ (8001d18 <MX_I2C1_Init+0x5c>)
 8001cca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001ccc:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <MX_I2C1_Init+0x54>)
 8001cce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cd2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <MX_I2C1_Init+0x54>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cda:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <MX_I2C1_Init+0x54>)
 8001cdc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ce0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <MX_I2C1_Init+0x54>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <MX_I2C1_Init+0x54>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cee:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <MX_I2C1_Init+0x54>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <MX_I2C1_Init+0x54>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <MX_I2C1_Init+0x54>)
 8001cfc:	f001 f8fe 	bl	8002efc <HAL_I2C_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001d06:	f000 f941 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000026c 	.word	0x2000026c
 8001d14:	40005400 	.word	0x40005400
 8001d18:	00061a80 	.word	0x00061a80

08001d1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d30:	463b      	mov	r3, r7
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d38:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <MX_TIM2_Init+0x94>)
 8001d3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	@ (8001db0 <MX_TIM2_Init+0x94>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d46:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <MX_TIM2_Init+0x94>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d4c:	4b18      	ldr	r3, [pc, #96]	@ (8001db0 <MX_TIM2_Init+0x94>)
 8001d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d54:	4b16      	ldr	r3, [pc, #88]	@ (8001db0 <MX_TIM2_Init+0x94>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5a:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <MX_TIM2_Init+0x94>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d60:	4813      	ldr	r0, [pc, #76]	@ (8001db0 <MX_TIM2_Init+0x94>)
 8001d62:	f002 ff17 	bl	8004b94 <HAL_TIM_Base_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d6c:	f000 f90e 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480c      	ldr	r0, [pc, #48]	@ (8001db0 <MX_TIM2_Init+0x94>)
 8001d7e:	f003 fad1 	bl	8005324 <HAL_TIM_ConfigClockSource>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d88:	f000 f900 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d94:	463b      	mov	r3, r7
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	@ (8001db0 <MX_TIM2_Init+0x94>)
 8001d9a:	f003 fecf 	bl	8005b3c <HAL_TIMEx_MasterConfigSynchronization>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001da4:	f000 f8f2 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	200002c0 	.word	0x200002c0

08001db4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001db8:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <MX_USART2_UART_Init+0x4c>)
 8001dba:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <MX_USART2_UART_Init+0x50>)
 8001dbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001dbe:	4b10      	ldr	r3, [pc, #64]	@ (8001e00 <MX_USART2_UART_Init+0x4c>)
 8001dc0:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001dc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e00 <MX_USART2_UART_Init+0x4c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e00 <MX_USART2_UART_Init+0x4c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <MX_USART2_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <MX_USART2_UART_Init+0x4c>)
 8001dda:	220c      	movs	r2, #12
 8001ddc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dde:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <MX_USART2_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de4:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <MX_USART2_UART_Init+0x4c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dea:	4805      	ldr	r0, [pc, #20]	@ (8001e00 <MX_USART2_UART_Init+0x4c>)
 8001dec:	f003 ff36 	bl	8005c5c <HAL_UART_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001df6:	f000 f8c9 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000308 	.word	0x20000308
 8001e04:	40004400 	.word	0x40004400

08001e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	@ 0x28
 8001e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
 8001e1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	4b56      	ldr	r3, [pc, #344]	@ (8001f7c <MX_GPIO_Init+0x174>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	4a55      	ldr	r2, [pc, #340]	@ (8001f7c <MX_GPIO_Init+0x174>)
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2e:	4b53      	ldr	r3, [pc, #332]	@ (8001f7c <MX_GPIO_Init+0x174>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b4f      	ldr	r3, [pc, #316]	@ (8001f7c <MX_GPIO_Init+0x174>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	4a4e      	ldr	r2, [pc, #312]	@ (8001f7c <MX_GPIO_Init+0x174>)
 8001e44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f7c <MX_GPIO_Init+0x174>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	4b48      	ldr	r3, [pc, #288]	@ (8001f7c <MX_GPIO_Init+0x174>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	4a47      	ldr	r2, [pc, #284]	@ (8001f7c <MX_GPIO_Init+0x174>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e66:	4b45      	ldr	r3, [pc, #276]	@ (8001f7c <MX_GPIO_Init+0x174>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	4b41      	ldr	r3, [pc, #260]	@ (8001f7c <MX_GPIO_Init+0x174>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	4a40      	ldr	r2, [pc, #256]	@ (8001f7c <MX_GPIO_Init+0x174>)
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e82:	4b3e      	ldr	r3, [pc, #248]	@ (8001f7c <MX_GPIO_Init+0x174>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, I2C_ADD0_Pin|I2C_ADD1_Pin|I2C_ADD2_Pin|PSEL_1_Pin, GPIO_PIN_SET);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8001e94:	483a      	ldr	r0, [pc, #232]	@ (8001f80 <MX_GPIO_Init+0x178>)
 8001e96:	f000 ffd9 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP4_Pin|RESET_Pin, GPIO_PIN_RESET);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2122      	movs	r1, #34	@ 0x22
 8001e9e:	4839      	ldr	r0, [pc, #228]	@ (8001f84 <MX_GPIO_Init+0x17c>)
 8001ea0:	f000 ffd4 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PSEL_0_GPIO_Port, PSEL_0_Pin, GPIO_PIN_SET);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2180      	movs	r1, #128	@ 0x80
 8001ea8:	4837      	ldr	r0, [pc, #220]	@ (8001f88 <MX_GPIO_Init+0x180>)
 8001eaa:	f000 ffcf 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR4_GPIO_Port, DIR4_Pin, GPIO_PIN_RESET);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001eb4:	4832      	ldr	r0, [pc, #200]	@ (8001f80 <MX_GPIO_Init+0x178>)
 8001eb6:	f000 ffc9 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001eba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ec0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	482d      	ldr	r0, [pc, #180]	@ (8001f88 <MX_GPIO_Init+0x180>)
 8001ed2:	f000 fe0f 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_ADD0_Pin I2C_ADD1_Pin I2C_ADD2_Pin DIR4_Pin
                           PSEL_1_Pin */
  GPIO_InitStruct.Pin = I2C_ADD0_Pin|I2C_ADD1_Pin|I2C_ADD2_Pin|DIR4_Pin
 8001ed6:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8001eda:	617b      	str	r3, [r7, #20]
                          |PSEL_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001edc:	2301      	movs	r3, #1
 8001ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	4619      	mov	r1, r3
 8001eee:	4824      	ldr	r0, [pc, #144]	@ (8001f80 <MX_GPIO_Init+0x178>)
 8001ef0:	f000 fe00 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP4_Pin */
  GPIO_InitStruct.Pin = STEP4_Pin;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4619      	mov	r1, r3
 8001f0a:	481e      	ldr	r0, [pc, #120]	@ (8001f84 <MX_GPIO_Init+0x17c>)
 8001f0c:	f000 fdf2 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PSEL_0_Pin */
  GPIO_InitStruct.Pin = PSEL_0_Pin;
 8001f10:	2380      	movs	r3, #128	@ 0x80
 8001f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f14:	2301      	movs	r3, #1
 8001f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PSEL_0_GPIO_Port, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	4818      	ldr	r0, [pc, #96]	@ (8001f88 <MX_GPIO_Init+0x180>)
 8001f28:	f000 fde4 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_READY_Pin */
  GPIO_InitStruct.Pin = DATA_READY_Pin;
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001f30:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f36:	2302      	movs	r3, #2
 8001f38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DATA_READY_GPIO_Port, &GPIO_InitStruct);
 8001f3a:	f107 0314 	add.w	r3, r7, #20
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4810      	ldr	r0, [pc, #64]	@ (8001f84 <MX_GPIO_Init+0x17c>)
 8001f42:	f000 fdd7 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8001f46:	2320      	movs	r3, #32
 8001f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f52:	2302      	movs	r3, #2
 8001f54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4809      	ldr	r0, [pc, #36]	@ (8001f84 <MX_GPIO_Init+0x17c>)
 8001f5e:	f000 fdc9 	bl	8002af4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2100      	movs	r1, #0
 8001f66:	2009      	movs	r0, #9
 8001f68:	f000 fd8d 	bl	8002a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001f6c:	2009      	movs	r0, #9
 8001f6e:	f000 fda6 	bl	8002abe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	@ 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020000 	.word	0x40020000
 8001f84:	40020400 	.word	0x40020400
 8001f88:	40020800 	.word	0x40020800

08001f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f90:	b672      	cpsid	i
}
 8001f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <Error_Handler+0x8>

08001f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <HAL_MspInit+0x4c>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe4 <HAL_MspInit+0x4c>)
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fae:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <HAL_MspInit+0x4c>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <HAL_MspInit+0x4c>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	4a08      	ldr	r2, [pc, #32]	@ (8001fe4 <HAL_MspInit+0x4c>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_MspInit+0x4c>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fd6:	2007      	movs	r0, #7
 8001fd8:	f000 fd4a 	bl	8002a70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40023800 	.word	0x40023800

08001fe8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	@ 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a19      	ldr	r2, [pc, #100]	@ (800206c <HAL_I2C_MspInit+0x84>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d12c      	bne.n	8002064 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	4b18      	ldr	r3, [pc, #96]	@ (8002070 <HAL_I2C_MspInit+0x88>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	4a17      	ldr	r2, [pc, #92]	@ (8002070 <HAL_I2C_MspInit+0x88>)
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	6313      	str	r3, [r2, #48]	@ 0x30
 800201a:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <HAL_I2C_MspInit+0x88>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002026:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800202a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202c:	2312      	movs	r3, #18
 800202e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002038:	2304      	movs	r3, #4
 800203a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	4619      	mov	r1, r3
 8002042:	480c      	ldr	r0, [pc, #48]	@ (8002074 <HAL_I2C_MspInit+0x8c>)
 8002044:	f000 fd56 	bl	8002af4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <HAL_I2C_MspInit+0x88>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002050:	4a07      	ldr	r2, [pc, #28]	@ (8002070 <HAL_I2C_MspInit+0x88>)
 8002052:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002056:	6413      	str	r3, [r2, #64]	@ 0x40
 8002058:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <HAL_I2C_MspInit+0x88>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	@ 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40005400 	.word	0x40005400
 8002070:	40023800 	.word	0x40023800
 8002074:	40020400 	.word	0x40020400

08002078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002088:	d115      	bne.n	80020b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <HAL_TIM_Base_MspInit+0x48>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	4a0b      	ldr	r2, [pc, #44]	@ (80020c0 <HAL_TIM_Base_MspInit+0x48>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6413      	str	r3, [r2, #64]	@ 0x40
 800209a:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <HAL_TIM_Base_MspInit+0x48>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	201c      	movs	r0, #28
 80020ac:	f000 fceb 	bl	8002a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020b0:	201c      	movs	r0, #28
 80020b2:	f000 fd04 	bl	8002abe <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800

080020c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	@ 0x28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a19      	ldr	r2, [pc, #100]	@ (8002148 <HAL_UART_MspInit+0x84>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d12b      	bne.n	800213e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	4b18      	ldr	r3, [pc, #96]	@ (800214c <HAL_UART_MspInit+0x88>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	4a17      	ldr	r2, [pc, #92]	@ (800214c <HAL_UART_MspInit+0x88>)
 80020f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f6:	4b15      	ldr	r3, [pc, #84]	@ (800214c <HAL_UART_MspInit+0x88>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b11      	ldr	r3, [pc, #68]	@ (800214c <HAL_UART_MspInit+0x88>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	4a10      	ldr	r2, [pc, #64]	@ (800214c <HAL_UART_MspInit+0x88>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6313      	str	r3, [r2, #48]	@ 0x30
 8002112:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <HAL_UART_MspInit+0x88>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800211e:	230c      	movs	r3, #12
 8002120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212a:	2303      	movs	r3, #3
 800212c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800212e:	2307      	movs	r3, #7
 8002130:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4619      	mov	r1, r3
 8002138:	4805      	ldr	r0, [pc, #20]	@ (8002150 <HAL_UART_MspInit+0x8c>)
 800213a:	f000 fcdb 	bl	8002af4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800213e:	bf00      	nop
 8002140:	3728      	adds	r7, #40	@ 0x28
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40004400 	.word	0x40004400
 800214c:	40023800 	.word	0x40023800
 8002150:	40020000 	.word	0x40020000

08002154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <NMI_Handler+0x4>

0800215c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <HardFault_Handler+0x4>

08002164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <MemManage_Handler+0x4>

0800216c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <BusFault_Handler+0x4>

08002174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002178:	bf00      	nop
 800217a:	e7fd      	b.n	8002178 <UsageFault_Handler+0x4>

0800217c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021aa:	f000 fb4d 	bl	8002848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DATA_READY_Pin);
 80021b6:	2008      	movs	r0, #8
 80021b8:	f000 fe7c 	bl	8002eb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}

080021c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021c4:	4802      	ldr	r0, [pc, #8]	@ (80021d0 <TIM2_IRQHandler+0x10>)
 80021c6:	f002 ff61 	bl	800508c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200002c0 	.word	0x200002c0

080021d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return 1;
 80021d8:	2301      	movs	r3, #1
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <_kill>:

int _kill(int pid, int sig)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021ee:	f004 fff7 	bl	80071e0 <__errno>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2216      	movs	r2, #22
 80021f6:	601a      	str	r2, [r3, #0]
  return -1;
 80021f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_exit>:

void _exit (int status)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ffe7 	bl	80021e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002216:	bf00      	nop
 8002218:	e7fd      	b.n	8002216 <_exit+0x12>

0800221a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	e00a      	b.n	8002242 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800222c:	f3af 8000 	nop.w
 8002230:	4601      	mov	r1, r0
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	60ba      	str	r2, [r7, #8]
 8002238:	b2ca      	uxtb	r2, r1
 800223a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	3301      	adds	r3, #1
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	429a      	cmp	r2, r3
 8002248:	dbf0      	blt.n	800222c <_read+0x12>
  }

  return len;
 800224a:	687b      	ldr	r3, [r7, #4]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	e009      	b.n	800227a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	60ba      	str	r2, [r7, #8]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	3301      	adds	r3, #1
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	429a      	cmp	r2, r3
 8002280:	dbf1      	blt.n	8002266 <_write+0x12>
  }
  return len;
 8002282:	687b      	ldr	r3, [r7, #4]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <_close>:

int _close(int file)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002294:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022b4:	605a      	str	r2, [r3, #4]
  return 0;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <_isatty>:

int _isatty(int file)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022cc:	2301      	movs	r3, #1
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022da:	b480      	push	{r7}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022fc:	4a14      	ldr	r2, [pc, #80]	@ (8002350 <_sbrk+0x5c>)
 80022fe:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <_sbrk+0x60>)
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002308:	4b13      	ldr	r3, [pc, #76]	@ (8002358 <_sbrk+0x64>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002310:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <_sbrk+0x64>)
 8002312:	4a12      	ldr	r2, [pc, #72]	@ (800235c <_sbrk+0x68>)
 8002314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002316:	4b10      	ldr	r3, [pc, #64]	@ (8002358 <_sbrk+0x64>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	429a      	cmp	r2, r3
 8002322:	d207      	bcs.n	8002334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002324:	f004 ff5c 	bl	80071e0 <__errno>
 8002328:	4603      	mov	r3, r0
 800232a:	220c      	movs	r2, #12
 800232c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800232e:	f04f 33ff 	mov.w	r3, #4294967295
 8002332:	e009      	b.n	8002348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002334:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800233a:	4b07      	ldr	r3, [pc, #28]	@ (8002358 <_sbrk+0x64>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	4a05      	ldr	r2, [pc, #20]	@ (8002358 <_sbrk+0x64>)
 8002344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20020000 	.word	0x20020000
 8002354:	00000400 	.word	0x00000400
 8002358:	20000450 	.word	0x20000450
 800235c:	200005a8 	.word	0x200005a8

08002360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <SystemInit+0x20>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236a:	4a05      	ldr	r2, [pc, #20]	@ (8002380 <SystemInit+0x20>)
 800236c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002370:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <Xbus_setBusId>:
}

/*! \brief Sets xbus Bus identifier
*/
void Xbus_setBusId(uint8_t* xbusMessage, uint8_t busId)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	70fb      	strb	r3, [r7, #3]
	xbusMessage[OFFSET_TO_BID] = busId & 0xff;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3301      	adds	r3, #1
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	701a      	strb	r2, [r3, #0]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <Xbus_getMessageId>:

/*! \brief Returns xbus Message identifier
*/
int Xbus_getMessageId(const uint8_t* xbusMessage)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	return (xbusMessage[OFFSET_TO_MID] & 0xff);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3302      	adds	r3, #2
 80023b0:	781b      	ldrb	r3, [r3, #0]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <Xbus_setMessageId>:

/*! \brief Sets xbus Message identifier
*/
void Xbus_setMessageId(uint8_t* xbusMessage, uint8_t messageId)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	460b      	mov	r3, r1
 80023c8:	70fb      	strb	r3, [r7, #3]
	xbusMessage[OFFSET_TO_MID] = messageId & 0xff;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3302      	adds	r3, #2
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	701a      	strb	r2, [r3, #0]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <Xbus_getPayloadLength>:

/*! \brief Returns xbus message (payload) length
*/
int Xbus_getPayloadLength(const uint8_t* xbusMessage)
{
 80023de:	b480      	push	{r7}
 80023e0:	b085      	sub	sp, #20
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
	int length = xbusMessage[OFFSET_TO_LEN] & 0xff;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3303      	adds	r3, #3
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
	if (length != LENGTH_EXTENDER_BYTE)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2bff      	cmp	r3, #255	@ 0xff
 80023f2:	d001      	beq.n	80023f8 <Xbus_getPayloadLength+0x1a>
		return length;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	e00b      	b.n	8002410 <Xbus_getPayloadLength+0x32>
	else
	{
		int result = (xbusMessage[OFFSET_TO_LEN + 2] & 0xff);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3305      	adds	r3, #5
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	60bb      	str	r3, [r7, #8]
		result += (xbusMessage[OFFSET_TO_LEN + 1] & 0xff) << 8;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3304      	adds	r3, #4
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	4413      	add	r3, r2
 800240c:	60bb      	str	r3, [r7, #8]
		return result;
 800240e:	68bb      	ldr	r3, [r7, #8]
	}
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <Xbus_setPayloadLength>:

/*! \brief Sets xbus message (payload) length
*/
void Xbus_setPayloadLength(uint8_t* xbusMessage, uint16_t payloadLength)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
	if (payloadLength < 255)
 8002428:	887b      	ldrh	r3, [r7, #2]
 800242a:	2bfe      	cmp	r3, #254	@ 0xfe
 800242c:	d805      	bhi.n	800243a <Xbus_setPayloadLength+0x1e>
		xbusMessage[OFFSET_TO_LEN] = payloadLength & 0xff;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3303      	adds	r3, #3
 8002432:	887a      	ldrh	r2, [r7, #2]
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	701a      	strb	r2, [r3, #0]
	{
		xbusMessage[OFFSET_TO_LEN] = LENGTH_EXTENDER_BYTE;
		xbusMessage[OFFSET_TO_LEN + 1] = (payloadLength >> 8) & 0xff;
		xbusMessage[OFFSET_TO_LEN + 2] = payloadLength & 0xff;
	}
}
 8002438:	e00f      	b.n	800245a <Xbus_setPayloadLength+0x3e>
		xbusMessage[OFFSET_TO_LEN] = LENGTH_EXTENDER_BYTE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3303      	adds	r3, #3
 800243e:	22ff      	movs	r2, #255	@ 0xff
 8002440:	701a      	strb	r2, [r3, #0]
		xbusMessage[OFFSET_TO_LEN + 1] = (payloadLength >> 8) & 0xff;
 8002442:	887b      	ldrh	r3, [r7, #2]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	b29a      	uxth	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3304      	adds	r3, #4
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	701a      	strb	r2, [r3, #0]
		xbusMessage[OFFSET_TO_LEN + 2] = payloadLength & 0xff;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3305      	adds	r3, #5
 8002454:	887a      	ldrh	r2, [r7, #2]
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <Xbus_message>:

/*! \brief Initialize a xbus message with BID, MID and Length
*/
void Xbus_message(uint8_t* xbusMessage, uint8_t bid, uint8_t mid, uint16_t len)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	4608      	mov	r0, r1
 8002470:	4611      	mov	r1, r2
 8002472:	461a      	mov	r2, r3
 8002474:	4603      	mov	r3, r0
 8002476:	70fb      	strb	r3, [r7, #3]
 8002478:	460b      	mov	r3, r1
 800247a:	70bb      	strb	r3, [r7, #2]
 800247c:	4613      	mov	r3, r2
 800247e:	803b      	strh	r3, [r7, #0]
	xbusMessage[0] = 0xFA;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	22fa      	movs	r2, #250	@ 0xfa
 8002484:	701a      	strb	r2, [r3, #0]
	Xbus_setBusId(xbusMessage, bid);
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ff7a 	bl	8002384 <Xbus_setBusId>
	Xbus_setMessageId(xbusMessage, mid);
 8002490:	78bb      	ldrb	r3, [r7, #2]
 8002492:	4619      	mov	r1, r3
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ff92 	bl	80023be <Xbus_setMessageId>
	Xbus_setPayloadLength(xbusMessage, len);
 800249a:	883b      	ldrh	r3, [r7, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ffbc 	bl	800241c <Xbus_setPayloadLength>
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <Xbus_getPointerToPayload>:
}

/*! \brief Returns pointer to payload of an xbus message
*/
uint8_t* Xbus_getPointerToPayload(uint8_t* xbusMessage)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	if ((xbusMessage[OFFSET_TO_LEN] & 0xff) == LENGTH_EXTENDER_BYTE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3303      	adds	r3, #3
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2bff      	cmp	r3, #255	@ 0xff
 80024bc:	d102      	bne.n	80024c4 <Xbus_getPointerToPayload+0x18>
		return xbusMessage + OFFSET_TO_PAYLOAD_EXT;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3306      	adds	r3, #6
 80024c2:	e001      	b.n	80024c8 <Xbus_getPointerToPayload+0x1c>
	else
		return xbusMessage + OFFSET_TO_PAYLOAD;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3304      	adds	r3, #4
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <Xbus_getConstPointerToPayload>:

/*! \brief Returns a const pointer to payload of an xbus message
*/
uint8_t const* Xbus_getConstPointerToPayload(uint8_t const* xbusMessage)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	return Xbus_getPointerToPayload((uint8_t*)xbusMessage);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ffe5 	bl	80024ac <Xbus_getPointerToPayload>
 80024e2:	4603      	mov	r3, r0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <checkDataReadyLineMain>:
	checksum &= 0xff;
	return (checksum == 0);
}

bool checkDataReadyLineMain()
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(DATA_READY_PORT, DATA_READY_PIN) == GPIO_PIN_SET;
 80024f0:	2108      	movs	r1, #8
 80024f2:	4805      	ldr	r0, [pc, #20]	@ (8002508 <checkDataReadyLineMain+0x1c>)
 80024f4:	f000 fc92 	bl	8002e1c <HAL_GPIO_ReadPin>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	bf0c      	ite	eq
 80024fe:	2301      	moveq	r3, #1
 8002500:	2300      	movne	r3, #0
 8002502:	b2db      	uxtb	r3, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40020400 	.word	0x40020400

0800250c <Xbus_createRawMessageHelper>:

size_t Xbus_createRawMessageHelper(uint8_t* dest, uint8_t const* message)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
	int n;
	uint8_t checksum;
	uint16_t length;
	uint8_t* dptr = dest;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	60fb      	str	r3, [r7, #12]

	length = Xbus_getPayloadLength(message);
 800251a:	6838      	ldr	r0, [r7, #0]
 800251c:	f7ff ff5f 	bl	80023de <Xbus_getPayloadLength>
 8002520:	4603      	mov	r3, r0
 8002522:	817b      	strh	r3, [r7, #10]

	*dptr++ = XBUS_CONTROL_PIPE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	60fa      	str	r2, [r7, #12]
 800252a:	2203      	movs	r2, #3
 800252c:	701a      	strb	r2, [r3, #0]

	checksum = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	74fb      	strb	r3, [r7, #19]
	checksum -= XBUS_MASTERDEVICE;
 8002532:	7cfb      	ldrb	r3, [r7, #19]
 8002534:	3301      	adds	r3, #1
 8002536:	74fb      	strb	r3, [r7, #19]

	*dptr = Xbus_getMessageId(message);
 8002538:	6838      	ldr	r0, [r7, #0]
 800253a:	f7ff ff33 	bl	80023a4 <Xbus_getMessageId>
 800253e:	4603      	mov	r3, r0
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	701a      	strb	r2, [r3, #0]
	checksum -= *dptr++;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	60fa      	str	r2, [r7, #12]
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	7cfa      	ldrb	r2, [r7, #19]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	74fb      	strb	r3, [r7, #19]

	if (length < XBUS_EXTENDED_LENGTH)
 8002554:	897b      	ldrh	r3, [r7, #10]
 8002556:	2bfe      	cmp	r3, #254	@ 0xfe
 8002558:	d80b      	bhi.n	8002572 <Xbus_createRawMessageHelper+0x66>
	{
		*dptr = length;
 800255a:	897b      	ldrh	r3, [r7, #10]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	60fa      	str	r2, [r7, #12]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	7cfa      	ldrb	r2, [r7, #19]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	74fb      	strb	r3, [r7, #19]
 8002570:	e021      	b.n	80025b6 <Xbus_createRawMessageHelper+0xaa>
	}
	else
	{
		*dptr = XBUS_EXTENDED_LENGTH;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	22ff      	movs	r2, #255	@ 0xff
 8002576:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	60fa      	str	r2, [r7, #12]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	7cfa      	ldrb	r2, [r7, #19]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	74fb      	strb	r3, [r7, #19]
		*dptr = length >> 8;
 8002586:	897b      	ldrh	r3, [r7, #10]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	b29b      	uxth	r3, r3
 800258c:	b2da      	uxtb	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	60fa      	str	r2, [r7, #12]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	7cfa      	ldrb	r2, [r7, #19]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	74fb      	strb	r3, [r7, #19]
		*dptr = length & 0xFF;
 80025a0:	897b      	ldrh	r3, [r7, #10]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	60fa      	str	r2, [r7, #12]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	7cfa      	ldrb	r2, [r7, #19]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	74fb      	strb	r3, [r7, #19]
	}

	for (n = 0; n < length; n++)
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	e012      	b.n	80025e2 <Xbus_createRawMessageHelper+0xd6>
	{
		*dptr = Xbus_getConstPointerToPayload(message)[n];
 80025bc:	6838      	ldr	r0, [r7, #0]
 80025be:	f7ff ff89 	bl	80024d4 <Xbus_getConstPointerToPayload>
 80025c2:	4602      	mov	r2, r0
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	4413      	add	r3, r2
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	701a      	strb	r2, [r3, #0]
		checksum -= *dptr++;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	60fa      	str	r2, [r7, #12]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	7cfa      	ldrb	r2, [r7, #19]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	74fb      	strb	r3, [r7, #19]
	for (n = 0; n < length; n++)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	3301      	adds	r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	897b      	ldrh	r3, [r7, #10]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	dbe8      	blt.n	80025bc <Xbus_createRawMessageHelper+0xb0>
	}

	*dptr++ = checksum;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	60fa      	str	r2, [r7, #12]
 80025f0:	7cfa      	ldrb	r2, [r7, #19]
 80025f2:	701a      	strb	r2, [r3, #0]

	return dptr - dest;
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	1ad3      	subs	r3, r2, r3
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <extractUint8>:

uint8_t extractUint8(const uint8_t *data, int *index) {
 8002602:	b480      	push	{r7}
 8002604:	b085      	sub	sp, #20
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
    uint8_t result = data[*index];
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	73fb      	strb	r3, [r7, #15]
    (*index)++;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	601a      	str	r2, [r3, #0]
    return result;
 8002624:	7bfb      	ldrb	r3, [r7, #15]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <extractUint16>:

/* Extract a 16-bit unsigned integer from data in big-endian order.
   The first byte becomes the high 8 bits and the second byte the low 8 bits. */
uint16_t extractUint16(const uint8_t *data, int *index) {
 8002632:	b480      	push	{r7}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
    uint16_t result = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	81fb      	strh	r3, [r7, #14]
    result |= ((uint16_t)data[*index]) << 8;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	b21a      	sxth	r2, r3
 8002650:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002654:	4313      	orrs	r3, r2
 8002656:	b21b      	sxth	r3, r3
 8002658:	81fb      	strh	r3, [r7, #14]
    (*index)++;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	601a      	str	r2, [r3, #0]
    result |= ((uint16_t)data[*index]);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	89fb      	ldrh	r3, [r7, #14]
 8002674:	4313      	orrs	r3, r2
 8002676:	81fb      	strh	r3, [r7, #14]
    (*index)++;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	601a      	str	r2, [r3, #0]
    return result;
 8002682:	89fb      	ldrh	r3, [r7, #14]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <extractUint32>:

/* Extract a 32-bit unsigned integer from data in big-endian order.
   The first byte is shifted to the most significant position, etc. */
uint32_t extractUint32(const uint8_t *data, int *index) {
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
    uint32_t result = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
    result |= ((uint32_t)data[*index]) << 24;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4413      	add	r3, r2
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	061b      	lsls	r3, r3, #24
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
    (*index)++;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	601a      	str	r2, [r3, #0]
    result |= ((uint32_t)data[*index]) << 16;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	041b      	lsls	r3, r3, #16
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
    (*index)++;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	601a      	str	r2, [r3, #0]
    result |= ((uint32_t)data[*index]) << 8;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
    (*index)++;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	601a      	str	r2, [r3, #0]
    result |= ((uint32_t)data[*index]);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]
    (*index)++;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	601a      	str	r2, [r3, #0]
    return result;
 8002716:	68fb      	ldr	r3, [r7, #12]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <extractFloat>:

/* Extract a float by first reading 4 bytes as a 32-bit unsigned integer
   and then copying them into a float. */
float extractFloat(const uint8_t *data, int *index) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
    uint32_t temp = extractUint32(data, index);
 800272e:	6839      	ldr	r1, [r7, #0]
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff ffad 	bl	8002690 <extractUint32>
 8002736:	4603      	mov	r3, r0
 8002738:	60fb      	str	r3, [r7, #12]
    float result;
    memcpy(&result, &temp, sizeof(result));
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	60bb      	str	r3, [r7, #8]
    return result;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	ee07 3a90 	vmov	s15, r3
}
 8002744:	eeb0 0a67 	vmov.f32	s0, s15
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002750:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002788 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002754:	f7ff fe04 	bl	8002360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002758:	480c      	ldr	r0, [pc, #48]	@ (800278c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800275a:	490d      	ldr	r1, [pc, #52]	@ (8002790 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800275c:	4a0d      	ldr	r2, [pc, #52]	@ (8002794 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800275e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002760:	e002      	b.n	8002768 <LoopCopyDataInit>

08002762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002766:	3304      	adds	r3, #4

08002768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800276c:	d3f9      	bcc.n	8002762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800276e:	4a0a      	ldr	r2, [pc, #40]	@ (8002798 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002770:	4c0a      	ldr	r4, [pc, #40]	@ (800279c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002774:	e001      	b.n	800277a <LoopFillZerobss>

08002776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002778:	3204      	adds	r2, #4

0800277a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800277c:	d3fb      	bcc.n	8002776 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800277e:	f004 fd35 	bl	80071ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002782:	f7fe ffc3 	bl	800170c <main>
  bx  lr    
 8002786:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002788:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800278c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002790:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002794:	080095f8 	.word	0x080095f8
  ldr r2, =_sbss
 8002798:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800279c:	200005a4 	.word	0x200005a4

080027a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a0:	e7fe      	b.n	80027a0 <ADC_IRQHandler>
	...

080027a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027a8:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <HAL_Init+0x40>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0d      	ldr	r2, [pc, #52]	@ (80027e4 <HAL_Init+0x40>)
 80027ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027b4:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <HAL_Init+0x40>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0a      	ldr	r2, [pc, #40]	@ (80027e4 <HAL_Init+0x40>)
 80027ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c0:	4b08      	ldr	r3, [pc, #32]	@ (80027e4 <HAL_Init+0x40>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a07      	ldr	r2, [pc, #28]	@ (80027e4 <HAL_Init+0x40>)
 80027c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027cc:	2003      	movs	r0, #3
 80027ce:	f000 f94f 	bl	8002a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027d2:	2000      	movs	r0, #0
 80027d4:	f000 f808 	bl	80027e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027d8:	f7ff fbde 	bl	8001f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40023c00 	.word	0x40023c00

080027e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f0:	4b12      	ldr	r3, [pc, #72]	@ (800283c <HAL_InitTick+0x54>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b12      	ldr	r3, [pc, #72]	@ (8002840 <HAL_InitTick+0x58>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	4619      	mov	r1, r3
 80027fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002802:	fbb2 f3f3 	udiv	r3, r2, r3
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f967 	bl	8002ada <HAL_SYSTICK_Config>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e00e      	b.n	8002834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b0f      	cmp	r3, #15
 800281a:	d80a      	bhi.n	8002832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800281c:	2200      	movs	r2, #0
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	f000 f92f 	bl	8002a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002828:	4a06      	ldr	r2, [pc, #24]	@ (8002844 <HAL_InitTick+0x5c>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e000      	b.n	8002834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000008 	.word	0x20000008
 8002840:	20000010 	.word	0x20000010
 8002844:	2000000c 	.word	0x2000000c

08002848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800284c:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <HAL_IncTick+0x20>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	4b06      	ldr	r3, [pc, #24]	@ (800286c <HAL_IncTick+0x24>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4413      	add	r3, r2
 8002858:	4a04      	ldr	r2, [pc, #16]	@ (800286c <HAL_IncTick+0x24>)
 800285a:	6013      	str	r3, [r2, #0]
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	20000010 	.word	0x20000010
 800286c:	20000454 	.word	0x20000454

08002870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return uwTick;
 8002874:	4b03      	ldr	r3, [pc, #12]	@ (8002884 <HAL_GetTick+0x14>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000454 	.word	0x20000454

08002888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002890:	f7ff ffee 	bl	8002870 <HAL_GetTick>
 8002894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d005      	beq.n	80028ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a2:	4b0a      	ldr	r3, [pc, #40]	@ (80028cc <HAL_Delay+0x44>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ae:	bf00      	nop
 80028b0:	f7ff ffde 	bl	8002870 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d8f7      	bhi.n	80028b0 <HAL_Delay+0x28>
  {
  }
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000010 	.word	0x20000010

080028d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002914 <__NVIC_SetPriorityGrouping+0x44>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028ec:	4013      	ands	r3, r2
 80028ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002902:	4a04      	ldr	r2, [pc, #16]	@ (8002914 <__NVIC_SetPriorityGrouping+0x44>)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	60d3      	str	r3, [r2, #12]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800291c:	4b04      	ldr	r3, [pc, #16]	@ (8002930 <__NVIC_GetPriorityGrouping+0x18>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	0a1b      	lsrs	r3, r3, #8
 8002922:	f003 0307 	and.w	r3, r3, #7
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002942:	2b00      	cmp	r3, #0
 8002944:	db0b      	blt.n	800295e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	f003 021f 	and.w	r2, r3, #31
 800294c:	4907      	ldr	r1, [pc, #28]	@ (800296c <__NVIC_EnableIRQ+0x38>)
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	2001      	movs	r0, #1
 8002956:	fa00 f202 	lsl.w	r2, r0, r2
 800295a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	e000e100 	.word	0xe000e100

08002970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	6039      	str	r1, [r7, #0]
 800297a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002980:	2b00      	cmp	r3, #0
 8002982:	db0a      	blt.n	800299a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	b2da      	uxtb	r2, r3
 8002988:	490c      	ldr	r1, [pc, #48]	@ (80029bc <__NVIC_SetPriority+0x4c>)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	0112      	lsls	r2, r2, #4
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	440b      	add	r3, r1
 8002994:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002998:	e00a      	b.n	80029b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4908      	ldr	r1, [pc, #32]	@ (80029c0 <__NVIC_SetPriority+0x50>)
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	3b04      	subs	r3, #4
 80029a8:	0112      	lsls	r2, r2, #4
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	440b      	add	r3, r1
 80029ae:	761a      	strb	r2, [r3, #24]
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000e100 	.word	0xe000e100
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b089      	sub	sp, #36	@ 0x24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f1c3 0307 	rsb	r3, r3, #7
 80029de:	2b04      	cmp	r3, #4
 80029e0:	bf28      	it	cs
 80029e2:	2304      	movcs	r3, #4
 80029e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3304      	adds	r3, #4
 80029ea:	2b06      	cmp	r3, #6
 80029ec:	d902      	bls.n	80029f4 <NVIC_EncodePriority+0x30>
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3b03      	subs	r3, #3
 80029f2:	e000      	b.n	80029f6 <NVIC_EncodePriority+0x32>
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f8:	f04f 32ff 	mov.w	r2, #4294967295
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43da      	mvns	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	401a      	ands	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	43d9      	mvns	r1, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	4313      	orrs	r3, r2
         );
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3724      	adds	r7, #36	@ 0x24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
	...

08002a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a3c:	d301      	bcc.n	8002a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00f      	b.n	8002a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a42:	4a0a      	ldr	r2, [pc, #40]	@ (8002a6c <SysTick_Config+0x40>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a4a:	210f      	movs	r1, #15
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	f7ff ff8e 	bl	8002970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a54:	4b05      	ldr	r3, [pc, #20]	@ (8002a6c <SysTick_Config+0x40>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5a:	4b04      	ldr	r3, [pc, #16]	@ (8002a6c <SysTick_Config+0x40>)
 8002a5c:	2207      	movs	r2, #7
 8002a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	e000e010 	.word	0xe000e010

08002a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff ff29 	bl	80028d0 <__NVIC_SetPriorityGrouping>
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b086      	sub	sp, #24
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a98:	f7ff ff3e 	bl	8002918 <__NVIC_GetPriorityGrouping>
 8002a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	6978      	ldr	r0, [r7, #20]
 8002aa4:	f7ff ff8e 	bl	80029c4 <NVIC_EncodePriority>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff ff5d 	bl	8002970 <__NVIC_SetPriority>
}
 8002ab6:	bf00      	nop
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff ff31 	bl	8002934 <__NVIC_EnableIRQ>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff ffa2 	bl	8002a2c <SysTick_Config>
 8002ae8:	4603      	mov	r3, r0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	@ 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	e165      	b.n	8002ddc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b10:	2201      	movs	r2, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	f040 8154 	bne.w	8002dd6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d005      	beq.n	8002b46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d130      	bne.n	8002ba8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	2203      	movs	r2, #3
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 0201 	and.w	r2, r3, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d017      	beq.n	8002be4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d123      	bne.n	8002c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	08da      	lsrs	r2, r3, #3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3208      	adds	r2, #8
 8002bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	220f      	movs	r2, #15
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	08da      	lsrs	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3208      	adds	r2, #8
 8002c32:	69b9      	ldr	r1, [r7, #24]
 8002c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0203 	and.w	r2, r3, #3
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80ae 	beq.w	8002dd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	4b5d      	ldr	r3, [pc, #372]	@ (8002df4 <HAL_GPIO_Init+0x300>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c82:	4a5c      	ldr	r2, [pc, #368]	@ (8002df4 <HAL_GPIO_Init+0x300>)
 8002c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c8a:	4b5a      	ldr	r3, [pc, #360]	@ (8002df4 <HAL_GPIO_Init+0x300>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c96:	4a58      	ldr	r2, [pc, #352]	@ (8002df8 <HAL_GPIO_Init+0x304>)
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	089b      	lsrs	r3, r3, #2
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	220f      	movs	r2, #15
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4f      	ldr	r2, [pc, #316]	@ (8002dfc <HAL_GPIO_Init+0x308>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d025      	beq.n	8002d0e <HAL_GPIO_Init+0x21a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4e      	ldr	r2, [pc, #312]	@ (8002e00 <HAL_GPIO_Init+0x30c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01f      	beq.n	8002d0a <HAL_GPIO_Init+0x216>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4d      	ldr	r2, [pc, #308]	@ (8002e04 <HAL_GPIO_Init+0x310>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d019      	beq.n	8002d06 <HAL_GPIO_Init+0x212>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4c      	ldr	r2, [pc, #304]	@ (8002e08 <HAL_GPIO_Init+0x314>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <HAL_GPIO_Init+0x20e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4b      	ldr	r2, [pc, #300]	@ (8002e0c <HAL_GPIO_Init+0x318>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00d      	beq.n	8002cfe <HAL_GPIO_Init+0x20a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8002e10 <HAL_GPIO_Init+0x31c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d007      	beq.n	8002cfa <HAL_GPIO_Init+0x206>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a49      	ldr	r2, [pc, #292]	@ (8002e14 <HAL_GPIO_Init+0x320>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <HAL_GPIO_Init+0x202>
 8002cf2:	2306      	movs	r3, #6
 8002cf4:	e00c      	b.n	8002d10 <HAL_GPIO_Init+0x21c>
 8002cf6:	2307      	movs	r3, #7
 8002cf8:	e00a      	b.n	8002d10 <HAL_GPIO_Init+0x21c>
 8002cfa:	2305      	movs	r3, #5
 8002cfc:	e008      	b.n	8002d10 <HAL_GPIO_Init+0x21c>
 8002cfe:	2304      	movs	r3, #4
 8002d00:	e006      	b.n	8002d10 <HAL_GPIO_Init+0x21c>
 8002d02:	2303      	movs	r3, #3
 8002d04:	e004      	b.n	8002d10 <HAL_GPIO_Init+0x21c>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e002      	b.n	8002d10 <HAL_GPIO_Init+0x21c>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_GPIO_Init+0x21c>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	f002 0203 	and.w	r2, r2, #3
 8002d16:	0092      	lsls	r2, r2, #2
 8002d18:	4093      	lsls	r3, r2
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d20:	4935      	ldr	r1, [pc, #212]	@ (8002df8 <HAL_GPIO_Init+0x304>)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	089b      	lsrs	r3, r3, #2
 8002d26:	3302      	adds	r3, #2
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d2e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e18 <HAL_GPIO_Init+0x324>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d52:	4a31      	ldr	r2, [pc, #196]	@ (8002e18 <HAL_GPIO_Init+0x324>)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d58:	4b2f      	ldr	r3, [pc, #188]	@ (8002e18 <HAL_GPIO_Init+0x324>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d7c:	4a26      	ldr	r2, [pc, #152]	@ (8002e18 <HAL_GPIO_Init+0x324>)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d82:	4b25      	ldr	r3, [pc, #148]	@ (8002e18 <HAL_GPIO_Init+0x324>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002da6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e18 <HAL_GPIO_Init+0x324>)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dac:	4b1a      	ldr	r3, [pc, #104]	@ (8002e18 <HAL_GPIO_Init+0x324>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd0:	4a11      	ldr	r2, [pc, #68]	@ (8002e18 <HAL_GPIO_Init+0x324>)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	2b0f      	cmp	r3, #15
 8002de0:	f67f ae96 	bls.w	8002b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3724      	adds	r7, #36	@ 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40013800 	.word	0x40013800
 8002dfc:	40020000 	.word	0x40020000
 8002e00:	40020400 	.word	0x40020400
 8002e04:	40020800 	.word	0x40020800
 8002e08:	40020c00 	.word	0x40020c00
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40021400 	.word	0x40021400
 8002e14:	40021800 	.word	0x40021800
 8002e18:	40013c00 	.word	0x40013c00

08002e1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	887b      	ldrh	r3, [r7, #2]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	e001      	b.n	8002e3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	807b      	strh	r3, [r7, #2]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e5c:	787b      	ldrb	r3, [r7, #1]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e68:	e003      	b.n	8002e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e6a:	887b      	ldrh	r3, [r7, #2]
 8002e6c:	041a      	lsls	r2, r3, #16
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	619a      	str	r2, [r3, #24]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b085      	sub	sp, #20
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	460b      	mov	r3, r1
 8002e88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e90:	887a      	ldrh	r2, [r7, #2]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4013      	ands	r3, r2
 8002e96:	041a      	lsls	r2, r3, #16
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	43d9      	mvns	r1, r3
 8002e9c:	887b      	ldrh	r3, [r7, #2]
 8002e9e:	400b      	ands	r3, r1
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	619a      	str	r2, [r3, #24]
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ebe:	4b08      	ldr	r3, [pc, #32]	@ (8002ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d006      	beq.n	8002ed8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eca:	4a05      	ldr	r2, [pc, #20]	@ (8002ee0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f806 	bl	8002ee4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40013c00 	.word	0x40013c00

08002ee4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e12b      	b.n	8003166 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff f860 	bl	8001fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2224      	movs	r2, #36	@ 0x24
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f60:	f001 f922 	bl	80041a8 <HAL_RCC_GetPCLK1Freq>
 8002f64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4a81      	ldr	r2, [pc, #516]	@ (8003170 <HAL_I2C_Init+0x274>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d807      	bhi.n	8002f80 <HAL_I2C_Init+0x84>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4a80      	ldr	r2, [pc, #512]	@ (8003174 <HAL_I2C_Init+0x278>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	bf94      	ite	ls
 8002f78:	2301      	movls	r3, #1
 8002f7a:	2300      	movhi	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e006      	b.n	8002f8e <HAL_I2C_Init+0x92>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a7d      	ldr	r2, [pc, #500]	@ (8003178 <HAL_I2C_Init+0x27c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	bf94      	ite	ls
 8002f88:	2301      	movls	r3, #1
 8002f8a:	2300      	movhi	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0e7      	b.n	8003166 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4a78      	ldr	r2, [pc, #480]	@ (800317c <HAL_I2C_Init+0x280>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	0c9b      	lsrs	r3, r3, #18
 8002fa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4a6a      	ldr	r2, [pc, #424]	@ (8003170 <HAL_I2C_Init+0x274>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d802      	bhi.n	8002fd0 <HAL_I2C_Init+0xd4>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	e009      	b.n	8002fe4 <HAL_I2C_Init+0xe8>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	4a69      	ldr	r2, [pc, #420]	@ (8003180 <HAL_I2C_Init+0x284>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ff6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	495c      	ldr	r1, [pc, #368]	@ (8003170 <HAL_I2C_Init+0x274>)
 8003000:	428b      	cmp	r3, r1
 8003002:	d819      	bhi.n	8003038 <HAL_I2C_Init+0x13c>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1e59      	subs	r1, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003012:	1c59      	adds	r1, r3, #1
 8003014:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003018:	400b      	ands	r3, r1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_I2C_Init+0x138>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1e59      	subs	r1, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fbb1 f3f3 	udiv	r3, r1, r3
 800302c:	3301      	adds	r3, #1
 800302e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003032:	e051      	b.n	80030d8 <HAL_I2C_Init+0x1dc>
 8003034:	2304      	movs	r3, #4
 8003036:	e04f      	b.n	80030d8 <HAL_I2C_Init+0x1dc>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d111      	bne.n	8003064 <HAL_I2C_Init+0x168>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1e58      	subs	r0, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	440b      	add	r3, r1
 800304e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003052:	3301      	adds	r3, #1
 8003054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e012      	b.n	800308a <HAL_I2C_Init+0x18e>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1e58      	subs	r0, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	0099      	lsls	r1, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	fbb0 f3f3 	udiv	r3, r0, r3
 800307a:	3301      	adds	r3, #1
 800307c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_Init+0x196>
 800308e:	2301      	movs	r3, #1
 8003090:	e022      	b.n	80030d8 <HAL_I2C_Init+0x1dc>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10e      	bne.n	80030b8 <HAL_I2C_Init+0x1bc>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1e58      	subs	r0, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6859      	ldr	r1, [r3, #4]
 80030a2:	460b      	mov	r3, r1
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	440b      	add	r3, r1
 80030a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ac:	3301      	adds	r3, #1
 80030ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030b6:	e00f      	b.n	80030d8 <HAL_I2C_Init+0x1dc>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1e58      	subs	r0, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6859      	ldr	r1, [r3, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	0099      	lsls	r1, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ce:	3301      	adds	r3, #1
 80030d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	6809      	ldr	r1, [r1, #0]
 80030dc:	4313      	orrs	r3, r2
 80030de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003106:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6911      	ldr	r1, [r2, #16]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68d2      	ldr	r2, [r2, #12]
 8003112:	4311      	orrs	r1, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	430b      	orrs	r3, r1
 800311a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	000186a0 	.word	0x000186a0
 8003174:	001e847f 	.word	0x001e847f
 8003178:	003d08ff 	.word	0x003d08ff
 800317c:	431bde83 	.word	0x431bde83
 8003180:	10624dd3 	.word	0x10624dd3

08003184 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af02      	add	r7, sp, #8
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	461a      	mov	r2, r3
 8003190:	460b      	mov	r3, r1
 8003192:	817b      	strh	r3, [r7, #10]
 8003194:	4613      	mov	r3, r2
 8003196:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003198:	f7ff fb6a 	bl	8002870 <HAL_GetTick>
 800319c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	f040 80e0 	bne.w	800336c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	2319      	movs	r3, #25
 80031b2:	2201      	movs	r2, #1
 80031b4:	4970      	ldr	r1, [pc, #448]	@ (8003378 <HAL_I2C_Master_Transmit+0x1f4>)
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fc7e 	bl	8003ab8 <I2C_WaitOnFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031c2:	2302      	movs	r3, #2
 80031c4:	e0d3      	b.n	800336e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_I2C_Master_Transmit+0x50>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e0cc      	b.n	800336e <HAL_I2C_Master_Transmit+0x1ea>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d007      	beq.n	80031fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 0201 	orr.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003208:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2221      	movs	r2, #33	@ 0x21
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2210      	movs	r2, #16
 8003216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	893a      	ldrh	r2, [r7, #8]
 800322a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4a50      	ldr	r2, [pc, #320]	@ (800337c <HAL_I2C_Master_Transmit+0x1f8>)
 800323a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800323c:	8979      	ldrh	r1, [r7, #10]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	6a3a      	ldr	r2, [r7, #32]
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 face 	bl	80037e4 <I2C_MasterRequestWrite>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e08d      	b.n	800336e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003268:	e066      	b.n	8003338 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	6a39      	ldr	r1, [r7, #32]
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 fd3c 	bl	8003cec <I2C_WaitOnTXEFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00d      	beq.n	8003296 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	2b04      	cmp	r3, #4
 8003280:	d107      	bne.n	8003292 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003290:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e06b      	b.n	800336e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329a:	781a      	ldrb	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d11b      	bne.n	800330c <HAL_I2C_Master_Transmit+0x188>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d017      	beq.n	800330c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	781a      	ldrb	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	6a39      	ldr	r1, [r7, #32]
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 fd33 	bl	8003d7c <I2C_WaitOnBTFFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00d      	beq.n	8003338 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	2b04      	cmp	r3, #4
 8003322:	d107      	bne.n	8003334 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003332:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e01a      	b.n	800336e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333c:	2b00      	cmp	r3, #0
 800333e:	d194      	bne.n	800326a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800334e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	e000      	b.n	800336e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800336c:	2302      	movs	r3, #2
  }
}
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	00100002 	.word	0x00100002
 800337c:	ffff0000 	.word	0xffff0000

08003380 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08c      	sub	sp, #48	@ 0x30
 8003384:	af02      	add	r7, sp, #8
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	4608      	mov	r0, r1
 800338a:	4611      	mov	r1, r2
 800338c:	461a      	mov	r2, r3
 800338e:	4603      	mov	r3, r0
 8003390:	817b      	strh	r3, [r7, #10]
 8003392:	460b      	mov	r3, r1
 8003394:	813b      	strh	r3, [r7, #8]
 8003396:	4613      	mov	r3, r2
 8003398:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800339a:	f7ff fa69 	bl	8002870 <HAL_GetTick>
 800339e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	f040 8214 	bne.w	80037d6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	2319      	movs	r3, #25
 80033b4:	2201      	movs	r2, #1
 80033b6:	497b      	ldr	r1, [pc, #492]	@ (80035a4 <HAL_I2C_Mem_Read+0x224>)
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 fb7d 	bl	8003ab8 <I2C_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80033c4:	2302      	movs	r3, #2
 80033c6:	e207      	b.n	80037d8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_I2C_Mem_Read+0x56>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e200      	b.n	80037d8 <HAL_I2C_Mem_Read+0x458>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d007      	beq.n	80033fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800340a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2222      	movs	r2, #34	@ 0x22
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2240      	movs	r2, #64	@ 0x40
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003426:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800342c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4a5b      	ldr	r2, [pc, #364]	@ (80035a8 <HAL_I2C_Mem_Read+0x228>)
 800343c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800343e:	88f8      	ldrh	r0, [r7, #6]
 8003440:	893a      	ldrh	r2, [r7, #8]
 8003442:	8979      	ldrh	r1, [r7, #10]
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	4603      	mov	r3, r0
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fa4a 	bl	80038e8 <I2C_RequestMemoryRead>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e1bc      	b.n	80037d8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003462:	2b00      	cmp	r3, #0
 8003464:	d113      	bne.n	800348e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003466:	2300      	movs	r3, #0
 8003468:	623b      	str	r3, [r7, #32]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	623b      	str	r3, [r7, #32]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	623b      	str	r3, [r7, #32]
 800347a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	e190      	b.n	80037b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003492:	2b01      	cmp	r3, #1
 8003494:	d11b      	bne.n	80034ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a6:	2300      	movs	r3, #0
 80034a8:	61fb      	str	r3, [r7, #28]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	61fb      	str	r3, [r7, #28]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	61fb      	str	r3, [r7, #28]
 80034ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	e170      	b.n	80037b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d11b      	bne.n	800350e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	e150      	b.n	80037b0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003524:	e144      	b.n	80037b0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352a:	2b03      	cmp	r3, #3
 800352c:	f200 80f1 	bhi.w	8003712 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003534:	2b01      	cmp	r3, #1
 8003536:	d123      	bne.n	8003580 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800353a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 fc65 	bl	8003e0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e145      	b.n	80037d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800357e:	e117      	b.n	80037b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003584:	2b02      	cmp	r3, #2
 8003586:	d14e      	bne.n	8003626 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800358e:	2200      	movs	r2, #0
 8003590:	4906      	ldr	r1, [pc, #24]	@ (80035ac <HAL_I2C_Mem_Read+0x22c>)
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 fa90 	bl	8003ab8 <I2C_WaitOnFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d008      	beq.n	80035b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e11a      	b.n	80037d8 <HAL_I2C_Mem_Read+0x458>
 80035a2:	bf00      	nop
 80035a4:	00100002 	.word	0x00100002
 80035a8:	ffff0000 	.word	0xffff0000
 80035ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003624:	e0c4      	b.n	80037b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800362c:	2200      	movs	r2, #0
 800362e:	496c      	ldr	r1, [pc, #432]	@ (80037e0 <HAL_I2C_Mem_Read+0x460>)
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 fa41 	bl	8003ab8 <I2C_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0cb      	b.n	80037d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800364e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691a      	ldr	r2, [r3, #16]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003688:	2200      	movs	r2, #0
 800368a:	4955      	ldr	r1, [pc, #340]	@ (80037e0 <HAL_I2C_Mem_Read+0x460>)
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fa13 	bl	8003ab8 <I2C_WaitOnFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e09d      	b.n	80037d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003710:	e04e      	b.n	80037b0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003714:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fb78 	bl	8003e0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e058      	b.n	80037d8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b04      	cmp	r3, #4
 8003764:	d124      	bne.n	80037b0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376a:	2b03      	cmp	r3, #3
 800376c:	d107      	bne.n	800377e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800377c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f47f aeb6 	bne.w	8003526 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	e000      	b.n	80037d8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80037d6:	2302      	movs	r3, #2
  }
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3728      	adds	r7, #40	@ 0x28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	00010004 	.word	0x00010004

080037e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	460b      	mov	r3, r1
 80037f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d006      	beq.n	800380e <I2C_MasterRequestWrite+0x2a>
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d003      	beq.n	800380e <I2C_MasterRequestWrite+0x2a>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800380c:	d108      	bne.n	8003820 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	e00b      	b.n	8003838 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	2b12      	cmp	r3, #18
 8003826:	d107      	bne.n	8003838 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003836:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f937 	bl	8003ab8 <I2C_WaitOnFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00d      	beq.n	800386c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800385e:	d103      	bne.n	8003868 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003866:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e035      	b.n	80038d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003874:	d108      	bne.n	8003888 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003876:	897b      	ldrh	r3, [r7, #10]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003884:	611a      	str	r2, [r3, #16]
 8003886:	e01b      	b.n	80038c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003888:	897b      	ldrh	r3, [r7, #10]
 800388a:	11db      	asrs	r3, r3, #7
 800388c:	b2db      	uxtb	r3, r3
 800388e:	f003 0306 	and.w	r3, r3, #6
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f063 030f 	orn	r3, r3, #15
 8003898:	b2da      	uxtb	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	490e      	ldr	r1, [pc, #56]	@ (80038e0 <I2C_MasterRequestWrite+0xfc>)
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f980 	bl	8003bac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e010      	b.n	80038d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038b6:	897b      	ldrh	r3, [r7, #10]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	4907      	ldr	r1, [pc, #28]	@ (80038e4 <I2C_MasterRequestWrite+0x100>)
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f970 	bl	8003bac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	00010008 	.word	0x00010008
 80038e4:	00010002 	.word	0x00010002

080038e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	4608      	mov	r0, r1
 80038f2:	4611      	mov	r1, r2
 80038f4:	461a      	mov	r2, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	817b      	strh	r3, [r7, #10]
 80038fa:	460b      	mov	r3, r1
 80038fc:	813b      	strh	r3, [r7, #8]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003910:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003920:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	2200      	movs	r2, #0
 800392a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f8c2 	bl	8003ab8 <I2C_WaitOnFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00d      	beq.n	8003956 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003944:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003948:	d103      	bne.n	8003952 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003950:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e0aa      	b.n	8003aac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003956:	897b      	ldrh	r3, [r7, #10]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003964:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	6a3a      	ldr	r2, [r7, #32]
 800396a:	4952      	ldr	r1, [pc, #328]	@ (8003ab4 <I2C_RequestMemoryRead+0x1cc>)
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f91d 	bl	8003bac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e097      	b.n	8003aac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003994:	6a39      	ldr	r1, [r7, #32]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f9a8 	bl	8003cec <I2C_WaitOnTXEFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00d      	beq.n	80039be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d107      	bne.n	80039ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e076      	b.n	8003aac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d105      	bne.n	80039d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039c4:	893b      	ldrh	r3, [r7, #8]
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	611a      	str	r2, [r3, #16]
 80039ce:	e021      	b.n	8003a14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039d0:	893b      	ldrh	r3, [r7, #8]
 80039d2:	0a1b      	lsrs	r3, r3, #8
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e0:	6a39      	ldr	r1, [r7, #32]
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f982 	bl	8003cec <I2C_WaitOnTXEFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00d      	beq.n	8003a0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d107      	bne.n	8003a06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e050      	b.n	8003aac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a0a:	893b      	ldrh	r3, [r7, #8]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a16:	6a39      	ldr	r1, [r7, #32]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f967 	bl	8003cec <I2C_WaitOnTXEFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00d      	beq.n	8003a40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d107      	bne.n	8003a3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e035      	b.n	8003aac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f82b 	bl	8003ab8 <I2C_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00d      	beq.n	8003a84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a76:	d103      	bne.n	8003a80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e013      	b.n	8003aac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a84:	897b      	ldrh	r3, [r7, #10]
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a96:	6a3a      	ldr	r2, [r7, #32]
 8003a98:	4906      	ldr	r1, [pc, #24]	@ (8003ab4 <I2C_RequestMemoryRead+0x1cc>)
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f886 	bl	8003bac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	00010002 	.word	0x00010002

08003ab8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ac8:	e048      	b.n	8003b5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad0:	d044      	beq.n	8003b5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad2:	f7fe fecd 	bl	8002870 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d302      	bcc.n	8003ae8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d139      	bne.n	8003b5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	0c1b      	lsrs	r3, r3, #16
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d10d      	bne.n	8003b0e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	43da      	mvns	r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	4013      	ands	r3, r2
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	bf0c      	ite	eq
 8003b04:	2301      	moveq	r3, #1
 8003b06:	2300      	movne	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	e00c      	b.n	8003b28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	43da      	mvns	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d116      	bne.n	8003b5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b48:	f043 0220 	orr.w	r2, r3, #32
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e023      	b.n	8003ba4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	0c1b      	lsrs	r3, r3, #16
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d10d      	bne.n	8003b82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	43da      	mvns	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	4013      	ands	r3, r2
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	bf0c      	ite	eq
 8003b78:	2301      	moveq	r3, #1
 8003b7a:	2300      	movne	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	461a      	mov	r2, r3
 8003b80:	e00c      	b.n	8003b9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	43da      	mvns	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	79fb      	ldrb	r3, [r7, #7]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d093      	beq.n	8003aca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bba:	e071      	b.n	8003ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bca:	d123      	bne.n	8003c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bda:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003be4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c00:	f043 0204 	orr.w	r2, r3, #4
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e067      	b.n	8003ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1a:	d041      	beq.n	8003ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1c:	f7fe fe28 	bl	8002870 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d302      	bcc.n	8003c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d136      	bne.n	8003ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	0c1b      	lsrs	r3, r3, #16
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d10c      	bne.n	8003c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	43da      	mvns	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	4013      	ands	r3, r2
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	bf14      	ite	ne
 8003c4e:	2301      	movne	r3, #1
 8003c50:	2300      	moveq	r3, #0
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	e00b      	b.n	8003c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	43da      	mvns	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4013      	ands	r3, r2
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf14      	ite	ne
 8003c68:	2301      	movne	r3, #1
 8003c6a:	2300      	moveq	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d016      	beq.n	8003ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	f043 0220 	orr.w	r2, r3, #32
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e021      	b.n	8003ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	0c1b      	lsrs	r3, r3, #16
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d10c      	bne.n	8003cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	43da      	mvns	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf14      	ite	ne
 8003cbc:	2301      	movne	r3, #1
 8003cbe:	2300      	moveq	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	e00b      	b.n	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	43da      	mvns	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	bf14      	ite	ne
 8003cd6:	2301      	movne	r3, #1
 8003cd8:	2300      	moveq	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f47f af6d 	bne.w	8003bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cf8:	e034      	b.n	8003d64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 f8e3 	bl	8003ec6 <I2C_IsAcknowledgeFailed>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e034      	b.n	8003d74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d10:	d028      	beq.n	8003d64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d12:	f7fe fdad 	bl	8002870 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d302      	bcc.n	8003d28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d11d      	bne.n	8003d64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d32:	2b80      	cmp	r3, #128	@ 0x80
 8003d34:	d016      	beq.n	8003d64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d50:	f043 0220 	orr.w	r2, r3, #32
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e007      	b.n	8003d74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d6e:	2b80      	cmp	r3, #128	@ 0x80
 8003d70:	d1c3      	bne.n	8003cfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d88:	e034      	b.n	8003df4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f89b 	bl	8003ec6 <I2C_IsAcknowledgeFailed>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e034      	b.n	8003e04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d028      	beq.n	8003df4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da2:	f7fe fd65 	bl	8002870 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d302      	bcc.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d11d      	bne.n	8003df4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d016      	beq.n	8003df4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de0:	f043 0220 	orr.w	r2, r3, #32
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e007      	b.n	8003e04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d1c3      	bne.n	8003d8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e18:	e049      	b.n	8003eae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d119      	bne.n	8003e5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0210 	mvn.w	r2, #16
 8003e30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e030      	b.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5c:	f7fe fd08 	bl	8002870 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d302      	bcc.n	8003e72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d11d      	bne.n	8003eae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7c:	2b40      	cmp	r3, #64	@ 0x40
 8003e7e:	d016      	beq.n	8003eae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9a:	f043 0220 	orr.w	r2, r3, #32
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e007      	b.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb8:	2b40      	cmp	r3, #64	@ 0x40
 8003eba:	d1ae      	bne.n	8003e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ed8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003edc:	d11b      	bne.n	8003f16 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ee6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	f043 0204 	orr.w	r2, r3, #4
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	603b      	str	r3, [r7, #0]
 8003f32:	4b20      	ldr	r3, [pc, #128]	@ (8003fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	4a1f      	ldr	r2, [pc, #124]	@ (8003fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb8 <HAL_PWREx_EnableOverDrive+0x94>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f50:	f7fe fc8e 	bl	8002870 <HAL_GetTick>
 8003f54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f56:	e009      	b.n	8003f6c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f58:	f7fe fc8a 	bl	8002870 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f66:	d901      	bls.n	8003f6c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e01f      	b.n	8003fac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f6c:	4b13      	ldr	r3, [pc, #76]	@ (8003fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f78:	d1ee      	bne.n	8003f58 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f7a:	4b11      	ldr	r3, [pc, #68]	@ (8003fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f80:	f7fe fc76 	bl	8002870 <HAL_GetTick>
 8003f84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f86:	e009      	b.n	8003f9c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f88:	f7fe fc72 	bl	8002870 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f96:	d901      	bls.n	8003f9c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e007      	b.n	8003fac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f9c:	4b07      	ldr	r3, [pc, #28]	@ (8003fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fa8:	d1ee      	bne.n	8003f88 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	420e0040 	.word	0x420e0040
 8003fbc:	40007000 	.word	0x40007000
 8003fc0:	420e0044 	.word	0x420e0044

08003fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0cc      	b.n	8004172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd8:	4b68      	ldr	r3, [pc, #416]	@ (800417c <HAL_RCC_ClockConfig+0x1b8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d90c      	bls.n	8004000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe6:	4b65      	ldr	r3, [pc, #404]	@ (800417c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fee:	4b63      	ldr	r3, [pc, #396]	@ (800417c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0b8      	b.n	8004172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d020      	beq.n	800404e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004018:	4b59      	ldr	r3, [pc, #356]	@ (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4a58      	ldr	r2, [pc, #352]	@ (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004022:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004030:	4b53      	ldr	r3, [pc, #332]	@ (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	4a52      	ldr	r2, [pc, #328]	@ (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800403a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800403c:	4b50      	ldr	r3, [pc, #320]	@ (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	494d      	ldr	r1, [pc, #308]	@ (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	4313      	orrs	r3, r2
 800404c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d044      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004062:	4b47      	ldr	r3, [pc, #284]	@ (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d119      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e07f      	b.n	8004172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d003      	beq.n	8004082 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800407e:	2b03      	cmp	r3, #3
 8004080:	d107      	bne.n	8004092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004082:	4b3f      	ldr	r3, [pc, #252]	@ (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d109      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e06f      	b.n	8004172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004092:	4b3b      	ldr	r3, [pc, #236]	@ (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e067      	b.n	8004172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040a2:	4b37      	ldr	r3, [pc, #220]	@ (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f023 0203 	bic.w	r2, r3, #3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	4934      	ldr	r1, [pc, #208]	@ (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040b4:	f7fe fbdc 	bl	8002870 <HAL_GetTick>
 80040b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ba:	e00a      	b.n	80040d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040bc:	f7fe fbd8 	bl	8002870 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e04f      	b.n	8004172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 020c 	and.w	r2, r3, #12
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d1eb      	bne.n	80040bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040e4:	4b25      	ldr	r3, [pc, #148]	@ (800417c <HAL_RCC_ClockConfig+0x1b8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d20c      	bcs.n	800410c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f2:	4b22      	ldr	r3, [pc, #136]	@ (800417c <HAL_RCC_ClockConfig+0x1b8>)
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fa:	4b20      	ldr	r3, [pc, #128]	@ (800417c <HAL_RCC_ClockConfig+0x1b8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e032      	b.n	8004172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004118:	4b19      	ldr	r3, [pc, #100]	@ (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	4916      	ldr	r1, [pc, #88]	@ (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004136:	4b12      	ldr	r3, [pc, #72]	@ (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	490e      	ldr	r1, [pc, #56]	@ (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800414a:	f000 f855 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
 800414e:	4602      	mov	r2, r0
 8004150:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	091b      	lsrs	r3, r3, #4
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	490a      	ldr	r1, [pc, #40]	@ (8004184 <HAL_RCC_ClockConfig+0x1c0>)
 800415c:	5ccb      	ldrb	r3, [r1, r3]
 800415e:	fa22 f303 	lsr.w	r3, r2, r3
 8004162:	4a09      	ldr	r2, [pc, #36]	@ (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 8004164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004166:	4b09      	ldr	r3, [pc, #36]	@ (800418c <HAL_RCC_ClockConfig+0x1c8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe fb3c 	bl	80027e8 <HAL_InitTick>

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40023c00 	.word	0x40023c00
 8004180:	40023800 	.word	0x40023800
 8004184:	08009258 	.word	0x08009258
 8004188:	20000008 	.word	0x20000008
 800418c:	2000000c 	.word	0x2000000c

08004190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004194:	4b03      	ldr	r3, [pc, #12]	@ (80041a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004196:	681b      	ldr	r3, [r3, #0]
}
 8004198:	4618      	mov	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000008 	.word	0x20000008

080041a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041ac:	f7ff fff0 	bl	8004190 <HAL_RCC_GetHCLKFreq>
 80041b0:	4602      	mov	r2, r0
 80041b2:	4b05      	ldr	r3, [pc, #20]	@ (80041c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	0a9b      	lsrs	r3, r3, #10
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	4903      	ldr	r1, [pc, #12]	@ (80041cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041be:	5ccb      	ldrb	r3, [r1, r3]
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40023800 	.word	0x40023800
 80041cc:	08009268 	.word	0x08009268

080041d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041d4:	f7ff ffdc 	bl	8004190 <HAL_RCC_GetHCLKFreq>
 80041d8:	4602      	mov	r2, r0
 80041da:	4b05      	ldr	r3, [pc, #20]	@ (80041f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	0b5b      	lsrs	r3, r3, #13
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	4903      	ldr	r1, [pc, #12]	@ (80041f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041e6:	5ccb      	ldrb	r3, [r1, r3]
 80041e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40023800 	.word	0x40023800
 80041f4:	08009268 	.word	0x08009268

080041f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041fc:	b0ae      	sub	sp, #184	@ 0xb8
 80041fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800421e:	4bcb      	ldr	r3, [pc, #812]	@ (800454c <HAL_RCC_GetSysClockFreq+0x354>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 030c 	and.w	r3, r3, #12
 8004226:	2b0c      	cmp	r3, #12
 8004228:	f200 8206 	bhi.w	8004638 <HAL_RCC_GetSysClockFreq+0x440>
 800422c:	a201      	add	r2, pc, #4	@ (adr r2, 8004234 <HAL_RCC_GetSysClockFreq+0x3c>)
 800422e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004232:	bf00      	nop
 8004234:	08004269 	.word	0x08004269
 8004238:	08004639 	.word	0x08004639
 800423c:	08004639 	.word	0x08004639
 8004240:	08004639 	.word	0x08004639
 8004244:	08004271 	.word	0x08004271
 8004248:	08004639 	.word	0x08004639
 800424c:	08004639 	.word	0x08004639
 8004250:	08004639 	.word	0x08004639
 8004254:	08004279 	.word	0x08004279
 8004258:	08004639 	.word	0x08004639
 800425c:	08004639 	.word	0x08004639
 8004260:	08004639 	.word	0x08004639
 8004264:	08004469 	.word	0x08004469
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004268:	4bb9      	ldr	r3, [pc, #740]	@ (8004550 <HAL_RCC_GetSysClockFreq+0x358>)
 800426a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800426e:	e1e7      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004270:	4bb8      	ldr	r3, [pc, #736]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004272:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004276:	e1e3      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004278:	4bb4      	ldr	r3, [pc, #720]	@ (800454c <HAL_RCC_GetSysClockFreq+0x354>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004280:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004284:	4bb1      	ldr	r3, [pc, #708]	@ (800454c <HAL_RCC_GetSysClockFreq+0x354>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d071      	beq.n	8004374 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004290:	4bae      	ldr	r3, [pc, #696]	@ (800454c <HAL_RCC_GetSysClockFreq+0x354>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	099b      	lsrs	r3, r3, #6
 8004296:	2200      	movs	r2, #0
 8004298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800429c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80042a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042ac:	2300      	movs	r3, #0
 80042ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80042b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042b6:	4622      	mov	r2, r4
 80042b8:	462b      	mov	r3, r5
 80042ba:	f04f 0000 	mov.w	r0, #0
 80042be:	f04f 0100 	mov.w	r1, #0
 80042c2:	0159      	lsls	r1, r3, #5
 80042c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042c8:	0150      	lsls	r0, r2, #5
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4621      	mov	r1, r4
 80042d0:	1a51      	subs	r1, r2, r1
 80042d2:	6439      	str	r1, [r7, #64]	@ 0x40
 80042d4:	4629      	mov	r1, r5
 80042d6:	eb63 0301 	sbc.w	r3, r3, r1
 80042da:	647b      	str	r3, [r7, #68]	@ 0x44
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80042e8:	4649      	mov	r1, r9
 80042ea:	018b      	lsls	r3, r1, #6
 80042ec:	4641      	mov	r1, r8
 80042ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042f2:	4641      	mov	r1, r8
 80042f4:	018a      	lsls	r2, r1, #6
 80042f6:	4641      	mov	r1, r8
 80042f8:	1a51      	subs	r1, r2, r1
 80042fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042fc:	4649      	mov	r1, r9
 80042fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004302:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004310:	4649      	mov	r1, r9
 8004312:	00cb      	lsls	r3, r1, #3
 8004314:	4641      	mov	r1, r8
 8004316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800431a:	4641      	mov	r1, r8
 800431c:	00ca      	lsls	r2, r1, #3
 800431e:	4610      	mov	r0, r2
 8004320:	4619      	mov	r1, r3
 8004322:	4603      	mov	r3, r0
 8004324:	4622      	mov	r2, r4
 8004326:	189b      	adds	r3, r3, r2
 8004328:	633b      	str	r3, [r7, #48]	@ 0x30
 800432a:	462b      	mov	r3, r5
 800432c:	460a      	mov	r2, r1
 800432e:	eb42 0303 	adc.w	r3, r2, r3
 8004332:	637b      	str	r3, [r7, #52]	@ 0x34
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004340:	4629      	mov	r1, r5
 8004342:	024b      	lsls	r3, r1, #9
 8004344:	4621      	mov	r1, r4
 8004346:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800434a:	4621      	mov	r1, r4
 800434c:	024a      	lsls	r2, r1, #9
 800434e:	4610      	mov	r0, r2
 8004350:	4619      	mov	r1, r3
 8004352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004356:	2200      	movs	r2, #0
 8004358:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800435c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004360:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004364:	f7fc fc40 	bl	8000be8 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4613      	mov	r3, r2
 800436e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004372:	e067      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004374:	4b75      	ldr	r3, [pc, #468]	@ (800454c <HAL_RCC_GetSysClockFreq+0x354>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	099b      	lsrs	r3, r3, #6
 800437a:	2200      	movs	r2, #0
 800437c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004380:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004384:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800438e:	2300      	movs	r3, #0
 8004390:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004392:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004396:	4622      	mov	r2, r4
 8004398:	462b      	mov	r3, r5
 800439a:	f04f 0000 	mov.w	r0, #0
 800439e:	f04f 0100 	mov.w	r1, #0
 80043a2:	0159      	lsls	r1, r3, #5
 80043a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043a8:	0150      	lsls	r0, r2, #5
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	4621      	mov	r1, r4
 80043b0:	1a51      	subs	r1, r2, r1
 80043b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80043b4:	4629      	mov	r1, r5
 80043b6:	eb63 0301 	sbc.w	r3, r3, r1
 80043ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80043c8:	4649      	mov	r1, r9
 80043ca:	018b      	lsls	r3, r1, #6
 80043cc:	4641      	mov	r1, r8
 80043ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043d2:	4641      	mov	r1, r8
 80043d4:	018a      	lsls	r2, r1, #6
 80043d6:	4641      	mov	r1, r8
 80043d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80043dc:	4649      	mov	r1, r9
 80043de:	eb63 0b01 	sbc.w	fp, r3, r1
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043f6:	4692      	mov	sl, r2
 80043f8:	469b      	mov	fp, r3
 80043fa:	4623      	mov	r3, r4
 80043fc:	eb1a 0303 	adds.w	r3, sl, r3
 8004400:	623b      	str	r3, [r7, #32]
 8004402:	462b      	mov	r3, r5
 8004404:	eb4b 0303 	adc.w	r3, fp, r3
 8004408:	627b      	str	r3, [r7, #36]	@ 0x24
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004416:	4629      	mov	r1, r5
 8004418:	028b      	lsls	r3, r1, #10
 800441a:	4621      	mov	r1, r4
 800441c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004420:	4621      	mov	r1, r4
 8004422:	028a      	lsls	r2, r1, #10
 8004424:	4610      	mov	r0, r2
 8004426:	4619      	mov	r1, r3
 8004428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800442c:	2200      	movs	r2, #0
 800442e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004430:	677a      	str	r2, [r7, #116]	@ 0x74
 8004432:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004436:	f7fc fbd7 	bl	8000be8 <__aeabi_uldivmod>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4613      	mov	r3, r2
 8004440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004444:	4b41      	ldr	r3, [pc, #260]	@ (800454c <HAL_RCC_GetSysClockFreq+0x354>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	0c1b      	lsrs	r3, r3, #16
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	3301      	adds	r3, #1
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800445a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800445e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004462:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004466:	e0eb      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004468:	4b38      	ldr	r3, [pc, #224]	@ (800454c <HAL_RCC_GetSysClockFreq+0x354>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004470:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004474:	4b35      	ldr	r3, [pc, #212]	@ (800454c <HAL_RCC_GetSysClockFreq+0x354>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d06b      	beq.n	8004558 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004480:	4b32      	ldr	r3, [pc, #200]	@ (800454c <HAL_RCC_GetSysClockFreq+0x354>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	099b      	lsrs	r3, r3, #6
 8004486:	2200      	movs	r2, #0
 8004488:	66bb      	str	r3, [r7, #104]	@ 0x68
 800448a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800448c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800448e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004492:	663b      	str	r3, [r7, #96]	@ 0x60
 8004494:	2300      	movs	r3, #0
 8004496:	667b      	str	r3, [r7, #100]	@ 0x64
 8004498:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800449c:	4622      	mov	r2, r4
 800449e:	462b      	mov	r3, r5
 80044a0:	f04f 0000 	mov.w	r0, #0
 80044a4:	f04f 0100 	mov.w	r1, #0
 80044a8:	0159      	lsls	r1, r3, #5
 80044aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044ae:	0150      	lsls	r0, r2, #5
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4621      	mov	r1, r4
 80044b6:	1a51      	subs	r1, r2, r1
 80044b8:	61b9      	str	r1, [r7, #24]
 80044ba:	4629      	mov	r1, r5
 80044bc:	eb63 0301 	sbc.w	r3, r3, r1
 80044c0:	61fb      	str	r3, [r7, #28]
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80044ce:	4659      	mov	r1, fp
 80044d0:	018b      	lsls	r3, r1, #6
 80044d2:	4651      	mov	r1, sl
 80044d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044d8:	4651      	mov	r1, sl
 80044da:	018a      	lsls	r2, r1, #6
 80044dc:	4651      	mov	r1, sl
 80044de:	ebb2 0801 	subs.w	r8, r2, r1
 80044e2:	4659      	mov	r1, fp
 80044e4:	eb63 0901 	sbc.w	r9, r3, r1
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044fc:	4690      	mov	r8, r2
 80044fe:	4699      	mov	r9, r3
 8004500:	4623      	mov	r3, r4
 8004502:	eb18 0303 	adds.w	r3, r8, r3
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	462b      	mov	r3, r5
 800450a:	eb49 0303 	adc.w	r3, r9, r3
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800451c:	4629      	mov	r1, r5
 800451e:	024b      	lsls	r3, r1, #9
 8004520:	4621      	mov	r1, r4
 8004522:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004526:	4621      	mov	r1, r4
 8004528:	024a      	lsls	r2, r1, #9
 800452a:	4610      	mov	r0, r2
 800452c:	4619      	mov	r1, r3
 800452e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004532:	2200      	movs	r2, #0
 8004534:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004536:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004538:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800453c:	f7fc fb54 	bl	8000be8 <__aeabi_uldivmod>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4613      	mov	r3, r2
 8004546:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800454a:	e065      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x420>
 800454c:	40023800 	.word	0x40023800
 8004550:	00f42400 	.word	0x00f42400
 8004554:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004558:	4b3d      	ldr	r3, [pc, #244]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x458>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	099b      	lsrs	r3, r3, #6
 800455e:	2200      	movs	r2, #0
 8004560:	4618      	mov	r0, r3
 8004562:	4611      	mov	r1, r2
 8004564:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004568:	653b      	str	r3, [r7, #80]	@ 0x50
 800456a:	2300      	movs	r3, #0
 800456c:	657b      	str	r3, [r7, #84]	@ 0x54
 800456e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004572:	4642      	mov	r2, r8
 8004574:	464b      	mov	r3, r9
 8004576:	f04f 0000 	mov.w	r0, #0
 800457a:	f04f 0100 	mov.w	r1, #0
 800457e:	0159      	lsls	r1, r3, #5
 8004580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004584:	0150      	lsls	r0, r2, #5
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4641      	mov	r1, r8
 800458c:	1a51      	subs	r1, r2, r1
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	4649      	mov	r1, r9
 8004592:	eb63 0301 	sbc.w	r3, r3, r1
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80045a4:	4659      	mov	r1, fp
 80045a6:	018b      	lsls	r3, r1, #6
 80045a8:	4651      	mov	r1, sl
 80045aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045ae:	4651      	mov	r1, sl
 80045b0:	018a      	lsls	r2, r1, #6
 80045b2:	4651      	mov	r1, sl
 80045b4:	1a54      	subs	r4, r2, r1
 80045b6:	4659      	mov	r1, fp
 80045b8:	eb63 0501 	sbc.w	r5, r3, r1
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	00eb      	lsls	r3, r5, #3
 80045c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045ca:	00e2      	lsls	r2, r4, #3
 80045cc:	4614      	mov	r4, r2
 80045ce:	461d      	mov	r5, r3
 80045d0:	4643      	mov	r3, r8
 80045d2:	18e3      	adds	r3, r4, r3
 80045d4:	603b      	str	r3, [r7, #0]
 80045d6:	464b      	mov	r3, r9
 80045d8:	eb45 0303 	adc.w	r3, r5, r3
 80045dc:	607b      	str	r3, [r7, #4]
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045ea:	4629      	mov	r1, r5
 80045ec:	028b      	lsls	r3, r1, #10
 80045ee:	4621      	mov	r1, r4
 80045f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045f4:	4621      	mov	r1, r4
 80045f6:	028a      	lsls	r2, r1, #10
 80045f8:	4610      	mov	r0, r2
 80045fa:	4619      	mov	r1, r3
 80045fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004600:	2200      	movs	r2, #0
 8004602:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004604:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004606:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800460a:	f7fc faed 	bl	8000be8 <__aeabi_uldivmod>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	4613      	mov	r3, r2
 8004614:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004618:	4b0d      	ldr	r3, [pc, #52]	@ (8004650 <HAL_RCC_GetSysClockFreq+0x458>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	0f1b      	lsrs	r3, r3, #28
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004626:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800462a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800462e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004632:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004636:	e003      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004638:	4b06      	ldr	r3, [pc, #24]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x45c>)
 800463a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800463e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004640:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004644:	4618      	mov	r0, r3
 8004646:	37b8      	adds	r7, #184	@ 0xb8
 8004648:	46bd      	mov	sp, r7
 800464a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800
 8004654:	00f42400 	.word	0x00f42400

08004658 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e28d      	b.n	8004b86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 8083 	beq.w	800477e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004678:	4b94      	ldr	r3, [pc, #592]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 030c 	and.w	r3, r3, #12
 8004680:	2b04      	cmp	r3, #4
 8004682:	d019      	beq.n	80046b8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004684:	4b91      	ldr	r3, [pc, #580]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 030c 	and.w	r3, r3, #12
        || \
 800468c:	2b08      	cmp	r3, #8
 800468e:	d106      	bne.n	800469e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004690:	4b8e      	ldr	r3, [pc, #568]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004698:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800469c:	d00c      	beq.n	80046b8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800469e:	4b8b      	ldr	r3, [pc, #556]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	d112      	bne.n	80046d0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046aa:	4b88      	ldr	r3, [pc, #544]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046b6:	d10b      	bne.n	80046d0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b8:	4b84      	ldr	r3, [pc, #528]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d05b      	beq.n	800477c <HAL_RCC_OscConfig+0x124>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d157      	bne.n	800477c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e25a      	b.n	8004b86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d8:	d106      	bne.n	80046e8 <HAL_RCC_OscConfig+0x90>
 80046da:	4b7c      	ldr	r3, [pc, #496]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a7b      	ldr	r2, [pc, #492]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 80046e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	e01d      	b.n	8004724 <HAL_RCC_OscConfig+0xcc>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046f0:	d10c      	bne.n	800470c <HAL_RCC_OscConfig+0xb4>
 80046f2:	4b76      	ldr	r3, [pc, #472]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a75      	ldr	r2, [pc, #468]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 80046f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	4b73      	ldr	r3, [pc, #460]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a72      	ldr	r2, [pc, #456]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 8004704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	e00b      	b.n	8004724 <HAL_RCC_OscConfig+0xcc>
 800470c:	4b6f      	ldr	r3, [pc, #444]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a6e      	ldr	r2, [pc, #440]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 8004712:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	4b6c      	ldr	r3, [pc, #432]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a6b      	ldr	r2, [pc, #428]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 800471e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d013      	beq.n	8004754 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fe f8a0 	bl	8002870 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004734:	f7fe f89c 	bl	8002870 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b64      	cmp	r3, #100	@ 0x64
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e21f      	b.n	8004b86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004746:	4b61      	ldr	r3, [pc, #388]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0f0      	beq.n	8004734 <HAL_RCC_OscConfig+0xdc>
 8004752:	e014      	b.n	800477e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004754:	f7fe f88c 	bl	8002870 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800475c:	f7fe f888 	bl	8002870 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b64      	cmp	r3, #100	@ 0x64
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e20b      	b.n	8004b86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800476e:	4b57      	ldr	r3, [pc, #348]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1f0      	bne.n	800475c <HAL_RCC_OscConfig+0x104>
 800477a:	e000      	b.n	800477e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800477c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d06f      	beq.n	800486a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800478a:	4b50      	ldr	r3, [pc, #320]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 030c 	and.w	r3, r3, #12
 8004792:	2b00      	cmp	r3, #0
 8004794:	d017      	beq.n	80047c6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004796:	4b4d      	ldr	r3, [pc, #308]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 030c 	and.w	r3, r3, #12
        || \
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d105      	bne.n	80047ae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80047a2:	4b4a      	ldr	r3, [pc, #296]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00b      	beq.n	80047c6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ae:	4b47      	ldr	r3, [pc, #284]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80047b6:	2b0c      	cmp	r3, #12
 80047b8:	d11c      	bne.n	80047f4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ba:	4b44      	ldr	r3, [pc, #272]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d116      	bne.n	80047f4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047c6:	4b41      	ldr	r3, [pc, #260]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d005      	beq.n	80047de <HAL_RCC_OscConfig+0x186>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d001      	beq.n	80047de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e1d3      	b.n	8004b86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047de:	4b3b      	ldr	r3, [pc, #236]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	4937      	ldr	r1, [pc, #220]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047f2:	e03a      	b.n	800486a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d020      	beq.n	800483e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047fc:	4b34      	ldr	r3, [pc, #208]	@ (80048d0 <HAL_RCC_OscConfig+0x278>)
 80047fe:	2201      	movs	r2, #1
 8004800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004802:	f7fe f835 	bl	8002870 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800480a:	f7fe f831 	bl	8002870 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e1b4      	b.n	8004b86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481c:	4b2b      	ldr	r3, [pc, #172]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004828:	4b28      	ldr	r3, [pc, #160]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	4925      	ldr	r1, [pc, #148]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 8004838:	4313      	orrs	r3, r2
 800483a:	600b      	str	r3, [r1, #0]
 800483c:	e015      	b.n	800486a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800483e:	4b24      	ldr	r3, [pc, #144]	@ (80048d0 <HAL_RCC_OscConfig+0x278>)
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004844:	f7fe f814 	bl	8002870 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800484c:	f7fe f810 	bl	8002870 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e193      	b.n	8004b86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800485e:	4b1b      	ldr	r3, [pc, #108]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f0      	bne.n	800484c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d036      	beq.n	80048e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d016      	beq.n	80048ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800487e:	4b15      	ldr	r3, [pc, #84]	@ (80048d4 <HAL_RCC_OscConfig+0x27c>)
 8004880:	2201      	movs	r2, #1
 8004882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004884:	f7fd fff4 	bl	8002870 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800488c:	f7fd fff0 	bl	8002870 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e173      	b.n	8004b86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800489e:	4b0b      	ldr	r3, [pc, #44]	@ (80048cc <HAL_RCC_OscConfig+0x274>)
 80048a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0f0      	beq.n	800488c <HAL_RCC_OscConfig+0x234>
 80048aa:	e01b      	b.n	80048e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ac:	4b09      	ldr	r3, [pc, #36]	@ (80048d4 <HAL_RCC_OscConfig+0x27c>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b2:	f7fd ffdd 	bl	8002870 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b8:	e00e      	b.n	80048d8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ba:	f7fd ffd9 	bl	8002870 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d907      	bls.n	80048d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e15c      	b.n	8004b86 <HAL_RCC_OscConfig+0x52e>
 80048cc:	40023800 	.word	0x40023800
 80048d0:	42470000 	.word	0x42470000
 80048d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d8:	4b8a      	ldr	r3, [pc, #552]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 80048da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1ea      	bne.n	80048ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8097 	beq.w	8004a20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f2:	2300      	movs	r3, #0
 80048f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048f6:	4b83      	ldr	r3, [pc, #524]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10f      	bne.n	8004922 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	4b7f      	ldr	r3, [pc, #508]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 800490c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004910:	6413      	str	r3, [r2, #64]	@ 0x40
 8004912:	4b7c      	ldr	r3, [pc, #496]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800491e:	2301      	movs	r3, #1
 8004920:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004922:	4b79      	ldr	r3, [pc, #484]	@ (8004b08 <HAL_RCC_OscConfig+0x4b0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800492a:	2b00      	cmp	r3, #0
 800492c:	d118      	bne.n	8004960 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800492e:	4b76      	ldr	r3, [pc, #472]	@ (8004b08 <HAL_RCC_OscConfig+0x4b0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a75      	ldr	r2, [pc, #468]	@ (8004b08 <HAL_RCC_OscConfig+0x4b0>)
 8004934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800493a:	f7fd ff99 	bl	8002870 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004942:	f7fd ff95 	bl	8002870 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e118      	b.n	8004b86 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004954:	4b6c      	ldr	r3, [pc, #432]	@ (8004b08 <HAL_RCC_OscConfig+0x4b0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0f0      	beq.n	8004942 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d106      	bne.n	8004976 <HAL_RCC_OscConfig+0x31e>
 8004968:	4b66      	ldr	r3, [pc, #408]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496c:	4a65      	ldr	r2, [pc, #404]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	6713      	str	r3, [r2, #112]	@ 0x70
 8004974:	e01c      	b.n	80049b0 <HAL_RCC_OscConfig+0x358>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b05      	cmp	r3, #5
 800497c:	d10c      	bne.n	8004998 <HAL_RCC_OscConfig+0x340>
 800497e:	4b61      	ldr	r3, [pc, #388]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004982:	4a60      	ldr	r2, [pc, #384]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 8004984:	f043 0304 	orr.w	r3, r3, #4
 8004988:	6713      	str	r3, [r2, #112]	@ 0x70
 800498a:	4b5e      	ldr	r3, [pc, #376]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498e:	4a5d      	ldr	r2, [pc, #372]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	6713      	str	r3, [r2, #112]	@ 0x70
 8004996:	e00b      	b.n	80049b0 <HAL_RCC_OscConfig+0x358>
 8004998:	4b5a      	ldr	r3, [pc, #360]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 800499a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499c:	4a59      	ldr	r2, [pc, #356]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049a4:	4b57      	ldr	r3, [pc, #348]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 80049a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a8:	4a56      	ldr	r2, [pc, #344]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 80049aa:	f023 0304 	bic.w	r3, r3, #4
 80049ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d015      	beq.n	80049e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7fd ff5a 	bl	8002870 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049be:	e00a      	b.n	80049d6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c0:	f7fd ff56 	bl	8002870 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e0d7      	b.n	8004b86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0ee      	beq.n	80049c0 <HAL_RCC_OscConfig+0x368>
 80049e2:	e014      	b.n	8004a0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e4:	f7fd ff44 	bl	8002870 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ea:	e00a      	b.n	8004a02 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ec:	f7fd ff40 	bl	8002870 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e0c1      	b.n	8004b86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a02:	4b40      	ldr	r3, [pc, #256]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1ee      	bne.n	80049ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a0e:	7dfb      	ldrb	r3, [r7, #23]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d105      	bne.n	8004a20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a14:	4b3b      	ldr	r3, [pc, #236]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 8004a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a18:	4a3a      	ldr	r2, [pc, #232]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 8004a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 80ad 	beq.w	8004b84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a2a:	4b36      	ldr	r3, [pc, #216]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d060      	beq.n	8004af8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d145      	bne.n	8004aca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3e:	4b33      	ldr	r3, [pc, #204]	@ (8004b0c <HAL_RCC_OscConfig+0x4b4>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fd ff14 	bl	8002870 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fd ff10 	bl	8002870 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e093      	b.n	8004b86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5e:	4b29      	ldr	r3, [pc, #164]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69da      	ldr	r2, [r3, #28]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	019b      	lsls	r3, r3, #6
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	3b01      	subs	r3, #1
 8004a84:	041b      	lsls	r3, r3, #16
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8c:	061b      	lsls	r3, r3, #24
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a94:	071b      	lsls	r3, r3, #28
 8004a96:	491b      	ldr	r1, [pc, #108]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b0c <HAL_RCC_OscConfig+0x4b4>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa2:	f7fd fee5 	bl	8002870 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aaa:	f7fd fee1 	bl	8002870 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e064      	b.n	8004b86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004abc:	4b11      	ldr	r3, [pc, #68]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0f0      	beq.n	8004aaa <HAL_RCC_OscConfig+0x452>
 8004ac8:	e05c      	b.n	8004b84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aca:	4b10      	ldr	r3, [pc, #64]	@ (8004b0c <HAL_RCC_OscConfig+0x4b4>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fd fece 	bl	8002870 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad8:	f7fd feca 	bl	8002870 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e04d      	b.n	8004b86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aea:	4b06      	ldr	r3, [pc, #24]	@ (8004b04 <HAL_RCC_OscConfig+0x4ac>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x480>
 8004af6:	e045      	b.n	8004b84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d107      	bne.n	8004b10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e040      	b.n	8004b86 <HAL_RCC_OscConfig+0x52e>
 8004b04:	40023800 	.word	0x40023800
 8004b08:	40007000 	.word	0x40007000
 8004b0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b10:	4b1f      	ldr	r3, [pc, #124]	@ (8004b90 <HAL_RCC_OscConfig+0x538>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d030      	beq.n	8004b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d129      	bne.n	8004b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d122      	bne.n	8004b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b40:	4013      	ands	r3, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d119      	bne.n	8004b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b56:	085b      	lsrs	r3, r3, #1
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d10f      	bne.n	8004b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d107      	bne.n	8004b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40023800 	.word	0x40023800

08004b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e041      	b.n	8004c2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fd fa5c 	bl	8002078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3304      	adds	r3, #4
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	f000 fc96 	bl	8005504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e041      	b.n	8004cc8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d106      	bne.n	8004c5e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f839 	bl	8004cd0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2202      	movs	r2, #2
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4610      	mov	r0, r2
 8004c72:	f000 fc47 	bl	8005504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d109      	bne.n	8004d0c <HAL_TIM_OC_Start_IT+0x28>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	bf14      	ite	ne
 8004d04:	2301      	movne	r3, #1
 8004d06:	2300      	moveq	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	e022      	b.n	8004d52 <HAL_TIM_OC_Start_IT+0x6e>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d109      	bne.n	8004d26 <HAL_TIM_OC_Start_IT+0x42>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	bf14      	ite	ne
 8004d1e:	2301      	movne	r3, #1
 8004d20:	2300      	moveq	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	e015      	b.n	8004d52 <HAL_TIM_OC_Start_IT+0x6e>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d109      	bne.n	8004d40 <HAL_TIM_OC_Start_IT+0x5c>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	bf14      	ite	ne
 8004d38:	2301      	movne	r3, #1
 8004d3a:	2300      	moveq	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	e008      	b.n	8004d52 <HAL_TIM_OC_Start_IT+0x6e>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	bf14      	ite	ne
 8004d4c:	2301      	movne	r3, #1
 8004d4e:	2300      	moveq	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e0c7      	b.n	8004eea <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <HAL_TIM_OC_Start_IT+0x86>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d68:	e013      	b.n	8004d92 <HAL_TIM_OC_Start_IT+0xae>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d104      	bne.n	8004d7a <HAL_TIM_OC_Start_IT+0x96>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d78:	e00b      	b.n	8004d92 <HAL_TIM_OC_Start_IT+0xae>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d104      	bne.n	8004d8a <HAL_TIM_OC_Start_IT+0xa6>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d88:	e003      	b.n	8004d92 <HAL_TIM_OC_Start_IT+0xae>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b0c      	cmp	r3, #12
 8004d96:	d841      	bhi.n	8004e1c <HAL_TIM_OC_Start_IT+0x138>
 8004d98:	a201      	add	r2, pc, #4	@ (adr r2, 8004da0 <HAL_TIM_OC_Start_IT+0xbc>)
 8004d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9e:	bf00      	nop
 8004da0:	08004dd5 	.word	0x08004dd5
 8004da4:	08004e1d 	.word	0x08004e1d
 8004da8:	08004e1d 	.word	0x08004e1d
 8004dac:	08004e1d 	.word	0x08004e1d
 8004db0:	08004de7 	.word	0x08004de7
 8004db4:	08004e1d 	.word	0x08004e1d
 8004db8:	08004e1d 	.word	0x08004e1d
 8004dbc:	08004e1d 	.word	0x08004e1d
 8004dc0:	08004df9 	.word	0x08004df9
 8004dc4:	08004e1d 	.word	0x08004e1d
 8004dc8:	08004e1d 	.word	0x08004e1d
 8004dcc:	08004e1d 	.word	0x08004e1d
 8004dd0:	08004e0b 	.word	0x08004e0b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0202 	orr.w	r2, r2, #2
 8004de2:	60da      	str	r2, [r3, #12]
      break;
 8004de4:	e01d      	b.n	8004e22 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f042 0204 	orr.w	r2, r2, #4
 8004df4:	60da      	str	r2, [r3, #12]
      break;
 8004df6:	e014      	b.n	8004e22 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0208 	orr.w	r2, r2, #8
 8004e06:	60da      	str	r2, [r3, #12]
      break;
 8004e08:	e00b      	b.n	8004e22 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0210 	orr.w	r2, r2, #16
 8004e18:	60da      	str	r2, [r3, #12]
      break;
 8004e1a:	e002      	b.n	8004e22 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e20:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d15f      	bne.n	8004ee8 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	6839      	ldr	r1, [r7, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fe5d 	bl	8005af0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ef4 <HAL_TIM_OC_Start_IT+0x210>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d004      	beq.n	8004e4a <HAL_TIM_OC_Start_IT+0x166>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a2c      	ldr	r2, [pc, #176]	@ (8004ef8 <HAL_TIM_OC_Start_IT+0x214>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d101      	bne.n	8004e4e <HAL_TIM_OC_Start_IT+0x16a>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <HAL_TIM_OC_Start_IT+0x16c>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d007      	beq.n	8004e64 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e62:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a22      	ldr	r2, [pc, #136]	@ (8004ef4 <HAL_TIM_OC_Start_IT+0x210>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d022      	beq.n	8004eb4 <HAL_TIM_OC_Start_IT+0x1d0>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e76:	d01d      	beq.n	8004eb4 <HAL_TIM_OC_Start_IT+0x1d0>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8004efc <HAL_TIM_OC_Start_IT+0x218>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d018      	beq.n	8004eb4 <HAL_TIM_OC_Start_IT+0x1d0>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1e      	ldr	r2, [pc, #120]	@ (8004f00 <HAL_TIM_OC_Start_IT+0x21c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d013      	beq.n	8004eb4 <HAL_TIM_OC_Start_IT+0x1d0>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1c      	ldr	r2, [pc, #112]	@ (8004f04 <HAL_TIM_OC_Start_IT+0x220>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <HAL_TIM_OC_Start_IT+0x1d0>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a17      	ldr	r2, [pc, #92]	@ (8004ef8 <HAL_TIM_OC_Start_IT+0x214>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_TIM_OC_Start_IT+0x1d0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a18      	ldr	r2, [pc, #96]	@ (8004f08 <HAL_TIM_OC_Start_IT+0x224>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_TIM_OC_Start_IT+0x1d0>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a17      	ldr	r2, [pc, #92]	@ (8004f0c <HAL_TIM_OC_Start_IT+0x228>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d111      	bne.n	8004ed8 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b06      	cmp	r3, #6
 8004ec4:	d010      	beq.n	8004ee8 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0201 	orr.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed6:	e007      	b.n	8004ee8 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40010400 	.word	0x40010400
 8004efc:	40000400 	.word	0x40000400
 8004f00:	40000800 	.word	0x40000800
 8004f04:	40000c00 	.word	0x40000c00
 8004f08:	40014000 	.word	0x40014000
 8004f0c:	40001800 	.word	0x40001800

08004f10 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b0c      	cmp	r3, #12
 8004f22:	d841      	bhi.n	8004fa8 <HAL_TIM_OC_Stop_IT+0x98>
 8004f24:	a201      	add	r2, pc, #4	@ (adr r2, 8004f2c <HAL_TIM_OC_Stop_IT+0x1c>)
 8004f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2a:	bf00      	nop
 8004f2c:	08004f61 	.word	0x08004f61
 8004f30:	08004fa9 	.word	0x08004fa9
 8004f34:	08004fa9 	.word	0x08004fa9
 8004f38:	08004fa9 	.word	0x08004fa9
 8004f3c:	08004f73 	.word	0x08004f73
 8004f40:	08004fa9 	.word	0x08004fa9
 8004f44:	08004fa9 	.word	0x08004fa9
 8004f48:	08004fa9 	.word	0x08004fa9
 8004f4c:	08004f85 	.word	0x08004f85
 8004f50:	08004fa9 	.word	0x08004fa9
 8004f54:	08004fa9 	.word	0x08004fa9
 8004f58:	08004fa9 	.word	0x08004fa9
 8004f5c:	08004f97 	.word	0x08004f97
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0202 	bic.w	r2, r2, #2
 8004f6e:	60da      	str	r2, [r3, #12]
      break;
 8004f70:	e01d      	b.n	8004fae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0204 	bic.w	r2, r2, #4
 8004f80:	60da      	str	r2, [r3, #12]
      break;
 8004f82:	e014      	b.n	8004fae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0208 	bic.w	r2, r2, #8
 8004f92:	60da      	str	r2, [r3, #12]
      break;
 8004f94:	e00b      	b.n	8004fae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0210 	bic.w	r2, r2, #16
 8004fa4:	60da      	str	r2, [r3, #12]
      break;
 8004fa6:	e002      	b.n	8004fae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
      break;
 8004fac:	bf00      	nop
  }

  if (status == HAL_OK)
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d161      	bne.n	8005078 <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	6839      	ldr	r1, [r7, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fd97 	bl	8005af0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a2f      	ldr	r2, [pc, #188]	@ (8005084 <HAL_TIM_OC_Stop_IT+0x174>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d004      	beq.n	8004fd6 <HAL_TIM_OC_Stop_IT+0xc6>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8005088 <HAL_TIM_OC_Stop_IT+0x178>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d101      	bne.n	8004fda <HAL_TIM_OC_Stop_IT+0xca>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <HAL_TIM_OC_Stop_IT+0xcc>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d017      	beq.n	8005010 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6a1a      	ldr	r2, [r3, #32]
 8004fe6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10f      	bne.n	8005010 <HAL_TIM_OC_Stop_IT+0x100>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6a1a      	ldr	r2, [r3, #32]
 8004ff6:	f240 4344 	movw	r3, #1092	@ 0x444
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d107      	bne.n	8005010 <HAL_TIM_OC_Stop_IT+0x100>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800500e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6a1a      	ldr	r2, [r3, #32]
 8005016:	f241 1311 	movw	r3, #4369	@ 0x1111
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10f      	bne.n	8005040 <HAL_TIM_OC_Stop_IT+0x130>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6a1a      	ldr	r2, [r3, #32]
 8005026:	f240 4344 	movw	r3, #1092	@ 0x444
 800502a:	4013      	ands	r3, r2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d107      	bne.n	8005040 <HAL_TIM_OC_Stop_IT+0x130>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0201 	bic.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d104      	bne.n	8005050 <HAL_TIM_OC_Stop_IT+0x140>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800504e:	e013      	b.n	8005078 <HAL_TIM_OC_Stop_IT+0x168>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	2b04      	cmp	r3, #4
 8005054:	d104      	bne.n	8005060 <HAL_TIM_OC_Stop_IT+0x150>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800505e:	e00b      	b.n	8005078 <HAL_TIM_OC_Stop_IT+0x168>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b08      	cmp	r3, #8
 8005064:	d104      	bne.n	8005070 <HAL_TIM_OC_Stop_IT+0x160>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800506e:	e003      	b.n	8005078 <HAL_TIM_OC_Stop_IT+0x168>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8005078:	7bfb      	ldrb	r3, [r7, #15]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40010000 	.word	0x40010000
 8005088:	40010400 	.word	0x40010400

0800508c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d020      	beq.n	80050f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01b      	beq.n	80050f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0202 	mvn.w	r2, #2
 80050c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f9f5 	bl	80054c6 <HAL_TIM_IC_CaptureCallback>
 80050dc:	e005      	b.n	80050ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fb ff49 	bl	8000f76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f9f8 	bl	80054da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d020      	beq.n	800513c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01b      	beq.n	800513c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f06f 0204 	mvn.w	r2, #4
 800510c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f9cf 	bl	80054c6 <HAL_TIM_IC_CaptureCallback>
 8005128:	e005      	b.n	8005136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fb ff23 	bl	8000f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f9d2 	bl	80054da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d020      	beq.n	8005188 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01b      	beq.n	8005188 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0208 	mvn.w	r2, #8
 8005158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2204      	movs	r2, #4
 800515e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f9a9 	bl	80054c6 <HAL_TIM_IC_CaptureCallback>
 8005174:	e005      	b.n	8005182 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fb fefd 	bl	8000f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f9ac 	bl	80054da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	2b00      	cmp	r3, #0
 8005190:	d020      	beq.n	80051d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	2b00      	cmp	r3, #0
 800519a:	d01b      	beq.n	80051d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0210 	mvn.w	r2, #16
 80051a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2208      	movs	r2, #8
 80051aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f983 	bl	80054c6 <HAL_TIM_IC_CaptureCallback>
 80051c0:	e005      	b.n	80051ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fb fed7 	bl	8000f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f986 	bl	80054da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00c      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0201 	mvn.w	r2, #1
 80051f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f95d 	bl	80054b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00c      	beq.n	800521c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005208:	2b00      	cmp	r3, #0
 800520a:	d007      	beq.n	800521c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fd16 	bl	8005c48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00c      	beq.n	8005240 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f957 	bl	80054ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0220 	mvn.w	r2, #32
 800525c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fce8 	bl	8005c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005286:	2302      	movs	r3, #2
 8005288:	e048      	b.n	800531c <HAL_TIM_OC_ConfigChannel+0xb0>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b0c      	cmp	r3, #12
 8005296:	d839      	bhi.n	800530c <HAL_TIM_OC_ConfigChannel+0xa0>
 8005298:	a201      	add	r2, pc, #4	@ (adr r2, 80052a0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800529a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529e:	bf00      	nop
 80052a0:	080052d5 	.word	0x080052d5
 80052a4:	0800530d 	.word	0x0800530d
 80052a8:	0800530d 	.word	0x0800530d
 80052ac:	0800530d 	.word	0x0800530d
 80052b0:	080052e3 	.word	0x080052e3
 80052b4:	0800530d 	.word	0x0800530d
 80052b8:	0800530d 	.word	0x0800530d
 80052bc:	0800530d 	.word	0x0800530d
 80052c0:	080052f1 	.word	0x080052f1
 80052c4:	0800530d 	.word	0x0800530d
 80052c8:	0800530d 	.word	0x0800530d
 80052cc:	0800530d 	.word	0x0800530d
 80052d0:	080052ff 	.word	0x080052ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 f9be 	bl	800565c <TIM_OC1_SetConfig>
      break;
 80052e0:	e017      	b.n	8005312 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68b9      	ldr	r1, [r7, #8]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 fa27 	bl	800573c <TIM_OC2_SetConfig>
      break;
 80052ee:	e010      	b.n	8005312 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fa96 	bl	8005828 <TIM_OC3_SetConfig>
      break;
 80052fc:	e009      	b.n	8005312 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fb03 	bl	8005910 <TIM_OC4_SetConfig>
      break;
 800530a:	e002      	b.n	8005312 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	75fb      	strb	r3, [r7, #23]
      break;
 8005310:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800531a:	7dfb      	ldrb	r3, [r7, #23]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_TIM_ConfigClockSource+0x1c>
 800533c:	2302      	movs	r3, #2
 800533e:	e0b4      	b.n	80054aa <HAL_TIM_ConfigClockSource+0x186>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800535e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005378:	d03e      	beq.n	80053f8 <HAL_TIM_ConfigClockSource+0xd4>
 800537a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800537e:	f200 8087 	bhi.w	8005490 <HAL_TIM_ConfigClockSource+0x16c>
 8005382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005386:	f000 8086 	beq.w	8005496 <HAL_TIM_ConfigClockSource+0x172>
 800538a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800538e:	d87f      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x16c>
 8005390:	2b70      	cmp	r3, #112	@ 0x70
 8005392:	d01a      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0xa6>
 8005394:	2b70      	cmp	r3, #112	@ 0x70
 8005396:	d87b      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x16c>
 8005398:	2b60      	cmp	r3, #96	@ 0x60
 800539a:	d050      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x11a>
 800539c:	2b60      	cmp	r3, #96	@ 0x60
 800539e:	d877      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x16c>
 80053a0:	2b50      	cmp	r3, #80	@ 0x50
 80053a2:	d03c      	beq.n	800541e <HAL_TIM_ConfigClockSource+0xfa>
 80053a4:	2b50      	cmp	r3, #80	@ 0x50
 80053a6:	d873      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x16c>
 80053a8:	2b40      	cmp	r3, #64	@ 0x40
 80053aa:	d058      	beq.n	800545e <HAL_TIM_ConfigClockSource+0x13a>
 80053ac:	2b40      	cmp	r3, #64	@ 0x40
 80053ae:	d86f      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x16c>
 80053b0:	2b30      	cmp	r3, #48	@ 0x30
 80053b2:	d064      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x15a>
 80053b4:	2b30      	cmp	r3, #48	@ 0x30
 80053b6:	d86b      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x16c>
 80053b8:	2b20      	cmp	r3, #32
 80053ba:	d060      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x15a>
 80053bc:	2b20      	cmp	r3, #32
 80053be:	d867      	bhi.n	8005490 <HAL_TIM_ConfigClockSource+0x16c>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d05c      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x15a>
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	d05a      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x15a>
 80053c8:	e062      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053da:	f000 fb69 	bl	8005ab0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	609a      	str	r2, [r3, #8]
      break;
 80053f6:	e04f      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005408:	f000 fb52 	bl	8005ab0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800541a:	609a      	str	r2, [r3, #8]
      break;
 800541c:	e03c      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800542a:	461a      	mov	r2, r3
 800542c:	f000 fac6 	bl	80059bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2150      	movs	r1, #80	@ 0x50
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fb1f 	bl	8005a7a <TIM_ITRx_SetConfig>
      break;
 800543c:	e02c      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800544a:	461a      	mov	r2, r3
 800544c:	f000 fae5 	bl	8005a1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2160      	movs	r1, #96	@ 0x60
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fb0f 	bl	8005a7a <TIM_ITRx_SetConfig>
      break;
 800545c:	e01c      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800546a:	461a      	mov	r2, r3
 800546c:	f000 faa6 	bl	80059bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2140      	movs	r1, #64	@ 0x40
 8005476:	4618      	mov	r0, r3
 8005478:	f000 faff 	bl	8005a7a <TIM_ITRx_SetConfig>
      break;
 800547c:	e00c      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4619      	mov	r1, r3
 8005488:	4610      	mov	r0, r2
 800548a:	f000 faf6 	bl	8005a7a <TIM_ITRx_SetConfig>
      break;
 800548e:	e003      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	73fb      	strb	r3, [r7, #15]
      break;
 8005494:	e000      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
	...

08005504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a46      	ldr	r2, [pc, #280]	@ (8005630 <TIM_Base_SetConfig+0x12c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d013      	beq.n	8005544 <TIM_Base_SetConfig+0x40>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005522:	d00f      	beq.n	8005544 <TIM_Base_SetConfig+0x40>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a43      	ldr	r2, [pc, #268]	@ (8005634 <TIM_Base_SetConfig+0x130>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00b      	beq.n	8005544 <TIM_Base_SetConfig+0x40>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a42      	ldr	r2, [pc, #264]	@ (8005638 <TIM_Base_SetConfig+0x134>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d007      	beq.n	8005544 <TIM_Base_SetConfig+0x40>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a41      	ldr	r2, [pc, #260]	@ (800563c <TIM_Base_SetConfig+0x138>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d003      	beq.n	8005544 <TIM_Base_SetConfig+0x40>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a40      	ldr	r2, [pc, #256]	@ (8005640 <TIM_Base_SetConfig+0x13c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d108      	bne.n	8005556 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800554a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a35      	ldr	r2, [pc, #212]	@ (8005630 <TIM_Base_SetConfig+0x12c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d02b      	beq.n	80055b6 <TIM_Base_SetConfig+0xb2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005564:	d027      	beq.n	80055b6 <TIM_Base_SetConfig+0xb2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a32      	ldr	r2, [pc, #200]	@ (8005634 <TIM_Base_SetConfig+0x130>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d023      	beq.n	80055b6 <TIM_Base_SetConfig+0xb2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a31      	ldr	r2, [pc, #196]	@ (8005638 <TIM_Base_SetConfig+0x134>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d01f      	beq.n	80055b6 <TIM_Base_SetConfig+0xb2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a30      	ldr	r2, [pc, #192]	@ (800563c <TIM_Base_SetConfig+0x138>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d01b      	beq.n	80055b6 <TIM_Base_SetConfig+0xb2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a2f      	ldr	r2, [pc, #188]	@ (8005640 <TIM_Base_SetConfig+0x13c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d017      	beq.n	80055b6 <TIM_Base_SetConfig+0xb2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a2e      	ldr	r2, [pc, #184]	@ (8005644 <TIM_Base_SetConfig+0x140>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d013      	beq.n	80055b6 <TIM_Base_SetConfig+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a2d      	ldr	r2, [pc, #180]	@ (8005648 <TIM_Base_SetConfig+0x144>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00f      	beq.n	80055b6 <TIM_Base_SetConfig+0xb2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a2c      	ldr	r2, [pc, #176]	@ (800564c <TIM_Base_SetConfig+0x148>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00b      	beq.n	80055b6 <TIM_Base_SetConfig+0xb2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005650 <TIM_Base_SetConfig+0x14c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d007      	beq.n	80055b6 <TIM_Base_SetConfig+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a2a      	ldr	r2, [pc, #168]	@ (8005654 <TIM_Base_SetConfig+0x150>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d003      	beq.n	80055b6 <TIM_Base_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a29      	ldr	r2, [pc, #164]	@ (8005658 <TIM_Base_SetConfig+0x154>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d108      	bne.n	80055c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a10      	ldr	r2, [pc, #64]	@ (8005630 <TIM_Base_SetConfig+0x12c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d003      	beq.n	80055fc <TIM_Base_SetConfig+0xf8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a12      	ldr	r2, [pc, #72]	@ (8005640 <TIM_Base_SetConfig+0x13c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d103      	bne.n	8005604 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b01      	cmp	r3, #1
 8005614:	d105      	bne.n	8005622 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f023 0201 	bic.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	611a      	str	r2, [r3, #16]
  }
}
 8005622:	bf00      	nop
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40010000 	.word	0x40010000
 8005634:	40000400 	.word	0x40000400
 8005638:	40000800 	.word	0x40000800
 800563c:	40000c00 	.word	0x40000c00
 8005640:	40010400 	.word	0x40010400
 8005644:	40014000 	.word	0x40014000
 8005648:	40014400 	.word	0x40014400
 800564c:	40014800 	.word	0x40014800
 8005650:	40001800 	.word	0x40001800
 8005654:	40001c00 	.word	0x40001c00
 8005658:	40002000 	.word	0x40002000

0800565c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	f023 0201 	bic.w	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800568a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0303 	bic.w	r3, r3, #3
 8005692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f023 0302 	bic.w	r3, r3, #2
 80056a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a20      	ldr	r2, [pc, #128]	@ (8005734 <TIM_OC1_SetConfig+0xd8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_OC1_SetConfig+0x64>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005738 <TIM_OC1_SetConfig+0xdc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d10c      	bne.n	80056da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f023 0308 	bic.w	r3, r3, #8
 80056c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f023 0304 	bic.w	r3, r3, #4
 80056d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a15      	ldr	r2, [pc, #84]	@ (8005734 <TIM_OC1_SetConfig+0xd8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d003      	beq.n	80056ea <TIM_OC1_SetConfig+0x8e>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a14      	ldr	r2, [pc, #80]	@ (8005738 <TIM_OC1_SetConfig+0xdc>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d111      	bne.n	800570e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	621a      	str	r2, [r3, #32]
}
 8005728:	bf00      	nop
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	40010000 	.word	0x40010000
 8005738:	40010400 	.word	0x40010400

0800573c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	f023 0210 	bic.w	r2, r3, #16
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800576a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	021b      	lsls	r3, r3, #8
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f023 0320 	bic.w	r3, r3, #32
 8005786:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a22      	ldr	r2, [pc, #136]	@ (8005820 <TIM_OC2_SetConfig+0xe4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_OC2_SetConfig+0x68>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a21      	ldr	r2, [pc, #132]	@ (8005824 <TIM_OC2_SetConfig+0xe8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d10d      	bne.n	80057c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a17      	ldr	r2, [pc, #92]	@ (8005820 <TIM_OC2_SetConfig+0xe4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d003      	beq.n	80057d0 <TIM_OC2_SetConfig+0x94>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a16      	ldr	r2, [pc, #88]	@ (8005824 <TIM_OC2_SetConfig+0xe8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d113      	bne.n	80057f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	621a      	str	r2, [r3, #32]
}
 8005812:	bf00      	nop
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40010000 	.word	0x40010000
 8005824:	40010400 	.word	0x40010400

08005828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0303 	bic.w	r3, r3, #3
 800585e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	021b      	lsls	r3, r3, #8
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a21      	ldr	r2, [pc, #132]	@ (8005908 <TIM_OC3_SetConfig+0xe0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d003      	beq.n	800588e <TIM_OC3_SetConfig+0x66>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a20      	ldr	r2, [pc, #128]	@ (800590c <TIM_OC3_SetConfig+0xe4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d10d      	bne.n	80058aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	021b      	lsls	r3, r3, #8
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	4313      	orrs	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a16      	ldr	r2, [pc, #88]	@ (8005908 <TIM_OC3_SetConfig+0xe0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d003      	beq.n	80058ba <TIM_OC3_SetConfig+0x92>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a15      	ldr	r2, [pc, #84]	@ (800590c <TIM_OC3_SetConfig+0xe4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d113      	bne.n	80058e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	011b      	lsls	r3, r3, #4
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	621a      	str	r2, [r3, #32]
}
 80058fc:	bf00      	nop
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	40010000 	.word	0x40010000
 800590c:	40010400 	.word	0x40010400

08005910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800593e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800595a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	031b      	lsls	r3, r3, #12
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a12      	ldr	r2, [pc, #72]	@ (80059b4 <TIM_OC4_SetConfig+0xa4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_OC4_SetConfig+0x68>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a11      	ldr	r2, [pc, #68]	@ (80059b8 <TIM_OC4_SetConfig+0xa8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d109      	bne.n	800598c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800597e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	019b      	lsls	r3, r3, #6
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	621a      	str	r2, [r3, #32]
}
 80059a6:	bf00      	nop
 80059a8:	371c      	adds	r7, #28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40010000 	.word	0x40010000
 80059b8:	40010400 	.word	0x40010400

080059bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f023 0201 	bic.w	r2, r3, #1
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f023 030a 	bic.w	r3, r3, #10
 80059f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	621a      	str	r2, [r3, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b087      	sub	sp, #28
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	60f8      	str	r0, [r7, #12]
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	f023 0210 	bic.w	r2, r3, #16
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	031b      	lsls	r3, r3, #12
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	621a      	str	r2, [r3, #32]
}
 8005a6e:	bf00      	nop
 8005a70:	371c      	adds	r7, #28
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b085      	sub	sp, #20
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f043 0307 	orr.w	r3, r3, #7
 8005a9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	609a      	str	r2, [r3, #8]
}
 8005aa4:	bf00      	nop
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	021a      	lsls	r2, r3, #8
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	609a      	str	r2, [r3, #8]
}
 8005ae4:	bf00      	nop
 8005ae6:	371c      	adds	r7, #28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f003 031f 	and.w	r3, r3, #31
 8005b02:	2201      	movs	r2, #1
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a1a      	ldr	r2, [r3, #32]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	43db      	mvns	r3, r3
 8005b12:	401a      	ands	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a1a      	ldr	r2, [r3, #32]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f003 031f 	and.w	r3, r3, #31
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	fa01 f303 	lsl.w	r3, r1, r3
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	621a      	str	r2, [r3, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
	...

08005b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e05a      	b.n	8005c0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a21      	ldr	r2, [pc, #132]	@ (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d022      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ba0:	d01d      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a1d      	ldr	r2, [pc, #116]	@ (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d018      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a1a      	ldr	r2, [pc, #104]	@ (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00e      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a18      	ldr	r2, [pc, #96]	@ (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d009      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a17      	ldr	r2, [pc, #92]	@ (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d004      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a15      	ldr	r2, [pc, #84]	@ (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40010000 	.word	0x40010000
 8005c1c:	40000400 	.word	0x40000400
 8005c20:	40000800 	.word	0x40000800
 8005c24:	40000c00 	.word	0x40000c00
 8005c28:	40010400 	.word	0x40010400
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	40001800 	.word	0x40001800

08005c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e042      	b.n	8005cf4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fc fa1e 	bl	80020c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2224      	movs	r2, #36	@ 0x24
 8005c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f973 	bl	8005f8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695a      	ldr	r2, [r3, #20]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08a      	sub	sp, #40	@ 0x28
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d175      	bne.n	8005e08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <HAL_UART_Transmit+0x2c>
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e06e      	b.n	8005e0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2221      	movs	r2, #33	@ 0x21
 8005d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d3a:	f7fc fd99 	bl	8002870 <HAL_GetTick>
 8005d3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	88fa      	ldrh	r2, [r7, #6]
 8005d44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	88fa      	ldrh	r2, [r7, #6]
 8005d4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d54:	d108      	bne.n	8005d68 <HAL_UART_Transmit+0x6c>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d104      	bne.n	8005d68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	e003      	b.n	8005d70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d70:	e02e      	b.n	8005dd0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2180      	movs	r1, #128	@ 0x80
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f848 	bl	8005e12 <UART_WaitOnFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d005      	beq.n	8005d94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e03a      	b.n	8005e0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10b      	bne.n	8005db2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005da8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	3302      	adds	r3, #2
 8005dae:	61bb      	str	r3, [r7, #24]
 8005db0:	e007      	b.n	8005dc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	781a      	ldrb	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1cb      	bne.n	8005d72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2200      	movs	r2, #0
 8005de2:	2140      	movs	r1, #64	@ 0x40
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f814 	bl	8005e12 <UART_WaitOnFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e006      	b.n	8005e0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	e000      	b.n	8005e0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005e08:	2302      	movs	r3, #2
  }
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3720      	adds	r7, #32
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b086      	sub	sp, #24
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	60b9      	str	r1, [r7, #8]
 8005e1c:	603b      	str	r3, [r7, #0]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e22:	e03b      	b.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2a:	d037      	beq.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2c:	f7fc fd20 	bl	8002870 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	6a3a      	ldr	r2, [r7, #32]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d302      	bcc.n	8005e42 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e03a      	b.n	8005ebc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d023      	beq.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2b80      	cmp	r3, #128	@ 0x80
 8005e58:	d020      	beq.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b40      	cmp	r3, #64	@ 0x40
 8005e5e:	d01d      	beq.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d116      	bne.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 f81d 	bl	8005ec4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2208      	movs	r2, #8
 8005e8e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e00f      	b.n	8005ebc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	bf0c      	ite	eq
 8005eac:	2301      	moveq	r3, #1
 8005eae:	2300      	movne	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d0b4      	beq.n	8005e24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b095      	sub	sp, #84	@ 0x54
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	330c      	adds	r3, #12
 8005ed2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ed6:	e853 3f00 	ldrex	r3, [r3]
 8005eda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ede:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	330c      	adds	r3, #12
 8005eea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005eec:	643a      	str	r2, [r7, #64]	@ 0x40
 8005eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ef2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ef4:	e841 2300 	strex	r3, r2, [r1]
 8005ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1e5      	bne.n	8005ecc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3314      	adds	r3, #20
 8005f06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f023 0301 	bic.w	r3, r3, #1
 8005f16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3314      	adds	r3, #20
 8005f1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e5      	bne.n	8005f00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d119      	bne.n	8005f70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f023 0310 	bic.w	r3, r3, #16
 8005f52:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	330c      	adds	r3, #12
 8005f5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f5c:	61ba      	str	r2, [r7, #24]
 8005f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	6979      	ldr	r1, [r7, #20]
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	613b      	str	r3, [r7, #16]
   return(result);
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e5      	bne.n	8005f3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005f7e:	bf00      	nop
 8005f80:	3754      	adds	r7, #84	@ 0x54
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
	...

08005f8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f90:	b0c0      	sub	sp, #256	@ 0x100
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa8:	68d9      	ldr	r1, [r3, #12]
 8005faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	ea40 0301 	orr.w	r3, r0, r1
 8005fb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005fe4:	f021 010c 	bic.w	r1, r1, #12
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ff2:	430b      	orrs	r3, r1
 8005ff4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006006:	6999      	ldr	r1, [r3, #24]
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	ea40 0301 	orr.w	r3, r0, r1
 8006012:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	4b8f      	ldr	r3, [pc, #572]	@ (8006258 <UART_SetConfig+0x2cc>)
 800601c:	429a      	cmp	r2, r3
 800601e:	d005      	beq.n	800602c <UART_SetConfig+0xa0>
 8006020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	4b8d      	ldr	r3, [pc, #564]	@ (800625c <UART_SetConfig+0x2d0>)
 8006028:	429a      	cmp	r2, r3
 800602a:	d104      	bne.n	8006036 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800602c:	f7fe f8d0 	bl	80041d0 <HAL_RCC_GetPCLK2Freq>
 8006030:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006034:	e003      	b.n	800603e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006036:	f7fe f8b7 	bl	80041a8 <HAL_RCC_GetPCLK1Freq>
 800603a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800603e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006048:	f040 810c 	bne.w	8006264 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800604c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006050:	2200      	movs	r2, #0
 8006052:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006056:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800605a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800605e:	4622      	mov	r2, r4
 8006060:	462b      	mov	r3, r5
 8006062:	1891      	adds	r1, r2, r2
 8006064:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006066:	415b      	adcs	r3, r3
 8006068:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800606a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800606e:	4621      	mov	r1, r4
 8006070:	eb12 0801 	adds.w	r8, r2, r1
 8006074:	4629      	mov	r1, r5
 8006076:	eb43 0901 	adc.w	r9, r3, r1
 800607a:	f04f 0200 	mov.w	r2, #0
 800607e:	f04f 0300 	mov.w	r3, #0
 8006082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800608a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800608e:	4690      	mov	r8, r2
 8006090:	4699      	mov	r9, r3
 8006092:	4623      	mov	r3, r4
 8006094:	eb18 0303 	adds.w	r3, r8, r3
 8006098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800609c:	462b      	mov	r3, r5
 800609e:	eb49 0303 	adc.w	r3, r9, r3
 80060a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80060b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060ba:	460b      	mov	r3, r1
 80060bc:	18db      	adds	r3, r3, r3
 80060be:	653b      	str	r3, [r7, #80]	@ 0x50
 80060c0:	4613      	mov	r3, r2
 80060c2:	eb42 0303 	adc.w	r3, r2, r3
 80060c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80060c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80060cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80060d0:	f7fa fd8a 	bl	8000be8 <__aeabi_uldivmod>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4b61      	ldr	r3, [pc, #388]	@ (8006260 <UART_SetConfig+0x2d4>)
 80060da:	fba3 2302 	umull	r2, r3, r3, r2
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	011c      	lsls	r4, r3, #4
 80060e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060e6:	2200      	movs	r2, #0
 80060e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80060f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80060f4:	4642      	mov	r2, r8
 80060f6:	464b      	mov	r3, r9
 80060f8:	1891      	adds	r1, r2, r2
 80060fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80060fc:	415b      	adcs	r3, r3
 80060fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006100:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006104:	4641      	mov	r1, r8
 8006106:	eb12 0a01 	adds.w	sl, r2, r1
 800610a:	4649      	mov	r1, r9
 800610c:	eb43 0b01 	adc.w	fp, r3, r1
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	f04f 0300 	mov.w	r3, #0
 8006118:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800611c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006120:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006124:	4692      	mov	sl, r2
 8006126:	469b      	mov	fp, r3
 8006128:	4643      	mov	r3, r8
 800612a:	eb1a 0303 	adds.w	r3, sl, r3
 800612e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006132:	464b      	mov	r3, r9
 8006134:	eb4b 0303 	adc.w	r3, fp, r3
 8006138:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006148:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800614c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006150:	460b      	mov	r3, r1
 8006152:	18db      	adds	r3, r3, r3
 8006154:	643b      	str	r3, [r7, #64]	@ 0x40
 8006156:	4613      	mov	r3, r2
 8006158:	eb42 0303 	adc.w	r3, r2, r3
 800615c:	647b      	str	r3, [r7, #68]	@ 0x44
 800615e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006162:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006166:	f7fa fd3f 	bl	8000be8 <__aeabi_uldivmod>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	4611      	mov	r1, r2
 8006170:	4b3b      	ldr	r3, [pc, #236]	@ (8006260 <UART_SetConfig+0x2d4>)
 8006172:	fba3 2301 	umull	r2, r3, r3, r1
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	2264      	movs	r2, #100	@ 0x64
 800617a:	fb02 f303 	mul.w	r3, r2, r3
 800617e:	1acb      	subs	r3, r1, r3
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006186:	4b36      	ldr	r3, [pc, #216]	@ (8006260 <UART_SetConfig+0x2d4>)
 8006188:	fba3 2302 	umull	r2, r3, r3, r2
 800618c:	095b      	lsrs	r3, r3, #5
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006194:	441c      	add	r4, r3
 8006196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800619a:	2200      	movs	r2, #0
 800619c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80061a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80061a8:	4642      	mov	r2, r8
 80061aa:	464b      	mov	r3, r9
 80061ac:	1891      	adds	r1, r2, r2
 80061ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80061b0:	415b      	adcs	r3, r3
 80061b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80061b8:	4641      	mov	r1, r8
 80061ba:	1851      	adds	r1, r2, r1
 80061bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80061be:	4649      	mov	r1, r9
 80061c0:	414b      	adcs	r3, r1
 80061c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80061d0:	4659      	mov	r1, fp
 80061d2:	00cb      	lsls	r3, r1, #3
 80061d4:	4651      	mov	r1, sl
 80061d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061da:	4651      	mov	r1, sl
 80061dc:	00ca      	lsls	r2, r1, #3
 80061de:	4610      	mov	r0, r2
 80061e0:	4619      	mov	r1, r3
 80061e2:	4603      	mov	r3, r0
 80061e4:	4642      	mov	r2, r8
 80061e6:	189b      	adds	r3, r3, r2
 80061e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061ec:	464b      	mov	r3, r9
 80061ee:	460a      	mov	r2, r1
 80061f0:	eb42 0303 	adc.w	r3, r2, r3
 80061f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006204:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006208:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800620c:	460b      	mov	r3, r1
 800620e:	18db      	adds	r3, r3, r3
 8006210:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006212:	4613      	mov	r3, r2
 8006214:	eb42 0303 	adc.w	r3, r2, r3
 8006218:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800621a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800621e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006222:	f7fa fce1 	bl	8000be8 <__aeabi_uldivmod>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4b0d      	ldr	r3, [pc, #52]	@ (8006260 <UART_SetConfig+0x2d4>)
 800622c:	fba3 1302 	umull	r1, r3, r3, r2
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	2164      	movs	r1, #100	@ 0x64
 8006234:	fb01 f303 	mul.w	r3, r1, r3
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	3332      	adds	r3, #50	@ 0x32
 800623e:	4a08      	ldr	r2, [pc, #32]	@ (8006260 <UART_SetConfig+0x2d4>)
 8006240:	fba2 2303 	umull	r2, r3, r2, r3
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	f003 0207 	and.w	r2, r3, #7
 800624a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4422      	add	r2, r4
 8006252:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006254:	e106      	b.n	8006464 <UART_SetConfig+0x4d8>
 8006256:	bf00      	nop
 8006258:	40011000 	.word	0x40011000
 800625c:	40011400 	.word	0x40011400
 8006260:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006268:	2200      	movs	r2, #0
 800626a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800626e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006272:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006276:	4642      	mov	r2, r8
 8006278:	464b      	mov	r3, r9
 800627a:	1891      	adds	r1, r2, r2
 800627c:	6239      	str	r1, [r7, #32]
 800627e:	415b      	adcs	r3, r3
 8006280:	627b      	str	r3, [r7, #36]	@ 0x24
 8006282:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006286:	4641      	mov	r1, r8
 8006288:	1854      	adds	r4, r2, r1
 800628a:	4649      	mov	r1, r9
 800628c:	eb43 0501 	adc.w	r5, r3, r1
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	00eb      	lsls	r3, r5, #3
 800629a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800629e:	00e2      	lsls	r2, r4, #3
 80062a0:	4614      	mov	r4, r2
 80062a2:	461d      	mov	r5, r3
 80062a4:	4643      	mov	r3, r8
 80062a6:	18e3      	adds	r3, r4, r3
 80062a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80062ac:	464b      	mov	r3, r9
 80062ae:	eb45 0303 	adc.w	r3, r5, r3
 80062b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062c6:	f04f 0200 	mov.w	r2, #0
 80062ca:	f04f 0300 	mov.w	r3, #0
 80062ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80062d2:	4629      	mov	r1, r5
 80062d4:	008b      	lsls	r3, r1, #2
 80062d6:	4621      	mov	r1, r4
 80062d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062dc:	4621      	mov	r1, r4
 80062de:	008a      	lsls	r2, r1, #2
 80062e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80062e4:	f7fa fc80 	bl	8000be8 <__aeabi_uldivmod>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4b60      	ldr	r3, [pc, #384]	@ (8006470 <UART_SetConfig+0x4e4>)
 80062ee:	fba3 2302 	umull	r2, r3, r3, r2
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	011c      	lsls	r4, r3, #4
 80062f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006300:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006304:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006308:	4642      	mov	r2, r8
 800630a:	464b      	mov	r3, r9
 800630c:	1891      	adds	r1, r2, r2
 800630e:	61b9      	str	r1, [r7, #24]
 8006310:	415b      	adcs	r3, r3
 8006312:	61fb      	str	r3, [r7, #28]
 8006314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006318:	4641      	mov	r1, r8
 800631a:	1851      	adds	r1, r2, r1
 800631c:	6139      	str	r1, [r7, #16]
 800631e:	4649      	mov	r1, r9
 8006320:	414b      	adcs	r3, r1
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006330:	4659      	mov	r1, fp
 8006332:	00cb      	lsls	r3, r1, #3
 8006334:	4651      	mov	r1, sl
 8006336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800633a:	4651      	mov	r1, sl
 800633c:	00ca      	lsls	r2, r1, #3
 800633e:	4610      	mov	r0, r2
 8006340:	4619      	mov	r1, r3
 8006342:	4603      	mov	r3, r0
 8006344:	4642      	mov	r2, r8
 8006346:	189b      	adds	r3, r3, r2
 8006348:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800634c:	464b      	mov	r3, r9
 800634e:	460a      	mov	r2, r1
 8006350:	eb42 0303 	adc.w	r3, r2, r3
 8006354:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006362:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006370:	4649      	mov	r1, r9
 8006372:	008b      	lsls	r3, r1, #2
 8006374:	4641      	mov	r1, r8
 8006376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800637a:	4641      	mov	r1, r8
 800637c:	008a      	lsls	r2, r1, #2
 800637e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006382:	f7fa fc31 	bl	8000be8 <__aeabi_uldivmod>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4611      	mov	r1, r2
 800638c:	4b38      	ldr	r3, [pc, #224]	@ (8006470 <UART_SetConfig+0x4e4>)
 800638e:	fba3 2301 	umull	r2, r3, r3, r1
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	2264      	movs	r2, #100	@ 0x64
 8006396:	fb02 f303 	mul.w	r3, r2, r3
 800639a:	1acb      	subs	r3, r1, r3
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	3332      	adds	r3, #50	@ 0x32
 80063a0:	4a33      	ldr	r2, [pc, #204]	@ (8006470 <UART_SetConfig+0x4e4>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	095b      	lsrs	r3, r3, #5
 80063a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063ac:	441c      	add	r4, r3
 80063ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063b2:	2200      	movs	r2, #0
 80063b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80063b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80063b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80063bc:	4642      	mov	r2, r8
 80063be:	464b      	mov	r3, r9
 80063c0:	1891      	adds	r1, r2, r2
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	415b      	adcs	r3, r3
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063cc:	4641      	mov	r1, r8
 80063ce:	1851      	adds	r1, r2, r1
 80063d0:	6039      	str	r1, [r7, #0]
 80063d2:	4649      	mov	r1, r9
 80063d4:	414b      	adcs	r3, r1
 80063d6:	607b      	str	r3, [r7, #4]
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	f04f 0300 	mov.w	r3, #0
 80063e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063e4:	4659      	mov	r1, fp
 80063e6:	00cb      	lsls	r3, r1, #3
 80063e8:	4651      	mov	r1, sl
 80063ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ee:	4651      	mov	r1, sl
 80063f0:	00ca      	lsls	r2, r1, #3
 80063f2:	4610      	mov	r0, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	4603      	mov	r3, r0
 80063f8:	4642      	mov	r2, r8
 80063fa:	189b      	adds	r3, r3, r2
 80063fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063fe:	464b      	mov	r3, r9
 8006400:	460a      	mov	r2, r1
 8006402:	eb42 0303 	adc.w	r3, r2, r3
 8006406:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	663b      	str	r3, [r7, #96]	@ 0x60
 8006412:	667a      	str	r2, [r7, #100]	@ 0x64
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	f04f 0300 	mov.w	r3, #0
 800641c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006420:	4649      	mov	r1, r9
 8006422:	008b      	lsls	r3, r1, #2
 8006424:	4641      	mov	r1, r8
 8006426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800642a:	4641      	mov	r1, r8
 800642c:	008a      	lsls	r2, r1, #2
 800642e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006432:	f7fa fbd9 	bl	8000be8 <__aeabi_uldivmod>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4b0d      	ldr	r3, [pc, #52]	@ (8006470 <UART_SetConfig+0x4e4>)
 800643c:	fba3 1302 	umull	r1, r3, r3, r2
 8006440:	095b      	lsrs	r3, r3, #5
 8006442:	2164      	movs	r1, #100	@ 0x64
 8006444:	fb01 f303 	mul.w	r3, r1, r3
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	3332      	adds	r3, #50	@ 0x32
 800644e:	4a08      	ldr	r2, [pc, #32]	@ (8006470 <UART_SetConfig+0x4e4>)
 8006450:	fba2 2303 	umull	r2, r3, r2, r3
 8006454:	095b      	lsrs	r3, r3, #5
 8006456:	f003 020f 	and.w	r2, r3, #15
 800645a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4422      	add	r2, r4
 8006462:	609a      	str	r2, [r3, #8]
}
 8006464:	bf00      	nop
 8006466:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800646a:	46bd      	mov	sp, r7
 800646c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006470:	51eb851f 	.word	0x51eb851f

08006474 <_ZdlPvj>:
 8006474:	f000 b800 	b.w	8006478 <_ZdlPv>

08006478 <_ZdlPv>:
 8006478:	f000 b808 	b.w	800648c <free>

0800647c <malloc>:
 800647c:	4b02      	ldr	r3, [pc, #8]	@ (8006488 <malloc+0xc>)
 800647e:	4601      	mov	r1, r0
 8006480:	6818      	ldr	r0, [r3, #0]
 8006482:	f000 b82d 	b.w	80064e0 <_malloc_r>
 8006486:	bf00      	nop
 8006488:	20000020 	.word	0x20000020

0800648c <free>:
 800648c:	4b02      	ldr	r3, [pc, #8]	@ (8006498 <free+0xc>)
 800648e:	4601      	mov	r1, r0
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	f001 bd21 	b.w	8007ed8 <_free_r>
 8006496:	bf00      	nop
 8006498:	20000020 	.word	0x20000020

0800649c <sbrk_aligned>:
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	4e0f      	ldr	r6, [pc, #60]	@ (80064dc <sbrk_aligned+0x40>)
 80064a0:	460c      	mov	r4, r1
 80064a2:	6831      	ldr	r1, [r6, #0]
 80064a4:	4605      	mov	r5, r0
 80064a6:	b911      	cbnz	r1, 80064ae <sbrk_aligned+0x12>
 80064a8:	f000 fe78 	bl	800719c <_sbrk_r>
 80064ac:	6030      	str	r0, [r6, #0]
 80064ae:	4621      	mov	r1, r4
 80064b0:	4628      	mov	r0, r5
 80064b2:	f000 fe73 	bl	800719c <_sbrk_r>
 80064b6:	1c43      	adds	r3, r0, #1
 80064b8:	d103      	bne.n	80064c2 <sbrk_aligned+0x26>
 80064ba:	f04f 34ff 	mov.w	r4, #4294967295
 80064be:	4620      	mov	r0, r4
 80064c0:	bd70      	pop	{r4, r5, r6, pc}
 80064c2:	1cc4      	adds	r4, r0, #3
 80064c4:	f024 0403 	bic.w	r4, r4, #3
 80064c8:	42a0      	cmp	r0, r4
 80064ca:	d0f8      	beq.n	80064be <sbrk_aligned+0x22>
 80064cc:	1a21      	subs	r1, r4, r0
 80064ce:	4628      	mov	r0, r5
 80064d0:	f000 fe64 	bl	800719c <_sbrk_r>
 80064d4:	3001      	adds	r0, #1
 80064d6:	d1f2      	bne.n	80064be <sbrk_aligned+0x22>
 80064d8:	e7ef      	b.n	80064ba <sbrk_aligned+0x1e>
 80064da:	bf00      	nop
 80064dc:	20000458 	.word	0x20000458

080064e0 <_malloc_r>:
 80064e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064e4:	1ccd      	adds	r5, r1, #3
 80064e6:	f025 0503 	bic.w	r5, r5, #3
 80064ea:	3508      	adds	r5, #8
 80064ec:	2d0c      	cmp	r5, #12
 80064ee:	bf38      	it	cc
 80064f0:	250c      	movcc	r5, #12
 80064f2:	2d00      	cmp	r5, #0
 80064f4:	4606      	mov	r6, r0
 80064f6:	db01      	blt.n	80064fc <_malloc_r+0x1c>
 80064f8:	42a9      	cmp	r1, r5
 80064fa:	d904      	bls.n	8006506 <_malloc_r+0x26>
 80064fc:	230c      	movs	r3, #12
 80064fe:	6033      	str	r3, [r6, #0]
 8006500:	2000      	movs	r0, #0
 8006502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006506:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065dc <_malloc_r+0xfc>
 800650a:	f000 f869 	bl	80065e0 <__malloc_lock>
 800650e:	f8d8 3000 	ldr.w	r3, [r8]
 8006512:	461c      	mov	r4, r3
 8006514:	bb44      	cbnz	r4, 8006568 <_malloc_r+0x88>
 8006516:	4629      	mov	r1, r5
 8006518:	4630      	mov	r0, r6
 800651a:	f7ff ffbf 	bl	800649c <sbrk_aligned>
 800651e:	1c43      	adds	r3, r0, #1
 8006520:	4604      	mov	r4, r0
 8006522:	d158      	bne.n	80065d6 <_malloc_r+0xf6>
 8006524:	f8d8 4000 	ldr.w	r4, [r8]
 8006528:	4627      	mov	r7, r4
 800652a:	2f00      	cmp	r7, #0
 800652c:	d143      	bne.n	80065b6 <_malloc_r+0xd6>
 800652e:	2c00      	cmp	r4, #0
 8006530:	d04b      	beq.n	80065ca <_malloc_r+0xea>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	4639      	mov	r1, r7
 8006536:	4630      	mov	r0, r6
 8006538:	eb04 0903 	add.w	r9, r4, r3
 800653c:	f000 fe2e 	bl	800719c <_sbrk_r>
 8006540:	4581      	cmp	r9, r0
 8006542:	d142      	bne.n	80065ca <_malloc_r+0xea>
 8006544:	6821      	ldr	r1, [r4, #0]
 8006546:	1a6d      	subs	r5, r5, r1
 8006548:	4629      	mov	r1, r5
 800654a:	4630      	mov	r0, r6
 800654c:	f7ff ffa6 	bl	800649c <sbrk_aligned>
 8006550:	3001      	adds	r0, #1
 8006552:	d03a      	beq.n	80065ca <_malloc_r+0xea>
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	442b      	add	r3, r5
 8006558:	6023      	str	r3, [r4, #0]
 800655a:	f8d8 3000 	ldr.w	r3, [r8]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	bb62      	cbnz	r2, 80065bc <_malloc_r+0xdc>
 8006562:	f8c8 7000 	str.w	r7, [r8]
 8006566:	e00f      	b.n	8006588 <_malloc_r+0xa8>
 8006568:	6822      	ldr	r2, [r4, #0]
 800656a:	1b52      	subs	r2, r2, r5
 800656c:	d420      	bmi.n	80065b0 <_malloc_r+0xd0>
 800656e:	2a0b      	cmp	r2, #11
 8006570:	d917      	bls.n	80065a2 <_malloc_r+0xc2>
 8006572:	1961      	adds	r1, r4, r5
 8006574:	42a3      	cmp	r3, r4
 8006576:	6025      	str	r5, [r4, #0]
 8006578:	bf18      	it	ne
 800657a:	6059      	strne	r1, [r3, #4]
 800657c:	6863      	ldr	r3, [r4, #4]
 800657e:	bf08      	it	eq
 8006580:	f8c8 1000 	streq.w	r1, [r8]
 8006584:	5162      	str	r2, [r4, r5]
 8006586:	604b      	str	r3, [r1, #4]
 8006588:	4630      	mov	r0, r6
 800658a:	f000 f82f 	bl	80065ec <__malloc_unlock>
 800658e:	f104 000b 	add.w	r0, r4, #11
 8006592:	1d23      	adds	r3, r4, #4
 8006594:	f020 0007 	bic.w	r0, r0, #7
 8006598:	1ac2      	subs	r2, r0, r3
 800659a:	bf1c      	itt	ne
 800659c:	1a1b      	subne	r3, r3, r0
 800659e:	50a3      	strne	r3, [r4, r2]
 80065a0:	e7af      	b.n	8006502 <_malloc_r+0x22>
 80065a2:	6862      	ldr	r2, [r4, #4]
 80065a4:	42a3      	cmp	r3, r4
 80065a6:	bf0c      	ite	eq
 80065a8:	f8c8 2000 	streq.w	r2, [r8]
 80065ac:	605a      	strne	r2, [r3, #4]
 80065ae:	e7eb      	b.n	8006588 <_malloc_r+0xa8>
 80065b0:	4623      	mov	r3, r4
 80065b2:	6864      	ldr	r4, [r4, #4]
 80065b4:	e7ae      	b.n	8006514 <_malloc_r+0x34>
 80065b6:	463c      	mov	r4, r7
 80065b8:	687f      	ldr	r7, [r7, #4]
 80065ba:	e7b6      	b.n	800652a <_malloc_r+0x4a>
 80065bc:	461a      	mov	r2, r3
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	42a3      	cmp	r3, r4
 80065c2:	d1fb      	bne.n	80065bc <_malloc_r+0xdc>
 80065c4:	2300      	movs	r3, #0
 80065c6:	6053      	str	r3, [r2, #4]
 80065c8:	e7de      	b.n	8006588 <_malloc_r+0xa8>
 80065ca:	230c      	movs	r3, #12
 80065cc:	6033      	str	r3, [r6, #0]
 80065ce:	4630      	mov	r0, r6
 80065d0:	f000 f80c 	bl	80065ec <__malloc_unlock>
 80065d4:	e794      	b.n	8006500 <_malloc_r+0x20>
 80065d6:	6005      	str	r5, [r0, #0]
 80065d8:	e7d6      	b.n	8006588 <_malloc_r+0xa8>
 80065da:	bf00      	nop
 80065dc:	2000045c 	.word	0x2000045c

080065e0 <__malloc_lock>:
 80065e0:	4801      	ldr	r0, [pc, #4]	@ (80065e8 <__malloc_lock+0x8>)
 80065e2:	f000 be28 	b.w	8007236 <__retarget_lock_acquire_recursive>
 80065e6:	bf00      	nop
 80065e8:	200005a0 	.word	0x200005a0

080065ec <__malloc_unlock>:
 80065ec:	4801      	ldr	r0, [pc, #4]	@ (80065f4 <__malloc_unlock+0x8>)
 80065ee:	f000 be23 	b.w	8007238 <__retarget_lock_release_recursive>
 80065f2:	bf00      	nop
 80065f4:	200005a0 	.word	0x200005a0

080065f8 <__cvt>:
 80065f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065fc:	ec57 6b10 	vmov	r6, r7, d0
 8006600:	2f00      	cmp	r7, #0
 8006602:	460c      	mov	r4, r1
 8006604:	4619      	mov	r1, r3
 8006606:	463b      	mov	r3, r7
 8006608:	bfbb      	ittet	lt
 800660a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800660e:	461f      	movlt	r7, r3
 8006610:	2300      	movge	r3, #0
 8006612:	232d      	movlt	r3, #45	@ 0x2d
 8006614:	700b      	strb	r3, [r1, #0]
 8006616:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006618:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800661c:	4691      	mov	r9, r2
 800661e:	f023 0820 	bic.w	r8, r3, #32
 8006622:	bfbc      	itt	lt
 8006624:	4632      	movlt	r2, r6
 8006626:	4616      	movlt	r6, r2
 8006628:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800662c:	d005      	beq.n	800663a <__cvt+0x42>
 800662e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006632:	d100      	bne.n	8006636 <__cvt+0x3e>
 8006634:	3401      	adds	r4, #1
 8006636:	2102      	movs	r1, #2
 8006638:	e000      	b.n	800663c <__cvt+0x44>
 800663a:	2103      	movs	r1, #3
 800663c:	ab03      	add	r3, sp, #12
 800663e:	9301      	str	r3, [sp, #4]
 8006640:	ab02      	add	r3, sp, #8
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	ec47 6b10 	vmov	d0, r6, r7
 8006648:	4653      	mov	r3, sl
 800664a:	4622      	mov	r2, r4
 800664c:	f000 fe80 	bl	8007350 <_dtoa_r>
 8006650:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006654:	4605      	mov	r5, r0
 8006656:	d119      	bne.n	800668c <__cvt+0x94>
 8006658:	f019 0f01 	tst.w	r9, #1
 800665c:	d00e      	beq.n	800667c <__cvt+0x84>
 800665e:	eb00 0904 	add.w	r9, r0, r4
 8006662:	2200      	movs	r2, #0
 8006664:	2300      	movs	r3, #0
 8006666:	4630      	mov	r0, r6
 8006668:	4639      	mov	r1, r7
 800666a:	f7fa fa4d 	bl	8000b08 <__aeabi_dcmpeq>
 800666e:	b108      	cbz	r0, 8006674 <__cvt+0x7c>
 8006670:	f8cd 900c 	str.w	r9, [sp, #12]
 8006674:	2230      	movs	r2, #48	@ 0x30
 8006676:	9b03      	ldr	r3, [sp, #12]
 8006678:	454b      	cmp	r3, r9
 800667a:	d31e      	bcc.n	80066ba <__cvt+0xc2>
 800667c:	9b03      	ldr	r3, [sp, #12]
 800667e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006680:	1b5b      	subs	r3, r3, r5
 8006682:	4628      	mov	r0, r5
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	b004      	add	sp, #16
 8006688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800668c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006690:	eb00 0904 	add.w	r9, r0, r4
 8006694:	d1e5      	bne.n	8006662 <__cvt+0x6a>
 8006696:	7803      	ldrb	r3, [r0, #0]
 8006698:	2b30      	cmp	r3, #48	@ 0x30
 800669a:	d10a      	bne.n	80066b2 <__cvt+0xba>
 800669c:	2200      	movs	r2, #0
 800669e:	2300      	movs	r3, #0
 80066a0:	4630      	mov	r0, r6
 80066a2:	4639      	mov	r1, r7
 80066a4:	f7fa fa30 	bl	8000b08 <__aeabi_dcmpeq>
 80066a8:	b918      	cbnz	r0, 80066b2 <__cvt+0xba>
 80066aa:	f1c4 0401 	rsb	r4, r4, #1
 80066ae:	f8ca 4000 	str.w	r4, [sl]
 80066b2:	f8da 3000 	ldr.w	r3, [sl]
 80066b6:	4499      	add	r9, r3
 80066b8:	e7d3      	b.n	8006662 <__cvt+0x6a>
 80066ba:	1c59      	adds	r1, r3, #1
 80066bc:	9103      	str	r1, [sp, #12]
 80066be:	701a      	strb	r2, [r3, #0]
 80066c0:	e7d9      	b.n	8006676 <__cvt+0x7e>

080066c2 <__exponent>:
 80066c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066c4:	2900      	cmp	r1, #0
 80066c6:	bfba      	itte	lt
 80066c8:	4249      	neglt	r1, r1
 80066ca:	232d      	movlt	r3, #45	@ 0x2d
 80066cc:	232b      	movge	r3, #43	@ 0x2b
 80066ce:	2909      	cmp	r1, #9
 80066d0:	7002      	strb	r2, [r0, #0]
 80066d2:	7043      	strb	r3, [r0, #1]
 80066d4:	dd29      	ble.n	800672a <__exponent+0x68>
 80066d6:	f10d 0307 	add.w	r3, sp, #7
 80066da:	461d      	mov	r5, r3
 80066dc:	270a      	movs	r7, #10
 80066de:	461a      	mov	r2, r3
 80066e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80066e4:	fb07 1416 	mls	r4, r7, r6, r1
 80066e8:	3430      	adds	r4, #48	@ 0x30
 80066ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80066ee:	460c      	mov	r4, r1
 80066f0:	2c63      	cmp	r4, #99	@ 0x63
 80066f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80066f6:	4631      	mov	r1, r6
 80066f8:	dcf1      	bgt.n	80066de <__exponent+0x1c>
 80066fa:	3130      	adds	r1, #48	@ 0x30
 80066fc:	1e94      	subs	r4, r2, #2
 80066fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006702:	1c41      	adds	r1, r0, #1
 8006704:	4623      	mov	r3, r4
 8006706:	42ab      	cmp	r3, r5
 8006708:	d30a      	bcc.n	8006720 <__exponent+0x5e>
 800670a:	f10d 0309 	add.w	r3, sp, #9
 800670e:	1a9b      	subs	r3, r3, r2
 8006710:	42ac      	cmp	r4, r5
 8006712:	bf88      	it	hi
 8006714:	2300      	movhi	r3, #0
 8006716:	3302      	adds	r3, #2
 8006718:	4403      	add	r3, r0
 800671a:	1a18      	subs	r0, r3, r0
 800671c:	b003      	add	sp, #12
 800671e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006720:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006724:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006728:	e7ed      	b.n	8006706 <__exponent+0x44>
 800672a:	2330      	movs	r3, #48	@ 0x30
 800672c:	3130      	adds	r1, #48	@ 0x30
 800672e:	7083      	strb	r3, [r0, #2]
 8006730:	70c1      	strb	r1, [r0, #3]
 8006732:	1d03      	adds	r3, r0, #4
 8006734:	e7f1      	b.n	800671a <__exponent+0x58>
	...

08006738 <_printf_float>:
 8006738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673c:	b08d      	sub	sp, #52	@ 0x34
 800673e:	460c      	mov	r4, r1
 8006740:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006744:	4616      	mov	r6, r2
 8006746:	461f      	mov	r7, r3
 8006748:	4605      	mov	r5, r0
 800674a:	f000 fcef 	bl	800712c <_localeconv_r>
 800674e:	6803      	ldr	r3, [r0, #0]
 8006750:	9304      	str	r3, [sp, #16]
 8006752:	4618      	mov	r0, r3
 8006754:	f7f9 fdac 	bl	80002b0 <strlen>
 8006758:	2300      	movs	r3, #0
 800675a:	930a      	str	r3, [sp, #40]	@ 0x28
 800675c:	f8d8 3000 	ldr.w	r3, [r8]
 8006760:	9005      	str	r0, [sp, #20]
 8006762:	3307      	adds	r3, #7
 8006764:	f023 0307 	bic.w	r3, r3, #7
 8006768:	f103 0208 	add.w	r2, r3, #8
 800676c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006770:	f8d4 b000 	ldr.w	fp, [r4]
 8006774:	f8c8 2000 	str.w	r2, [r8]
 8006778:	e9d3 8900 	ldrd	r8, r9, [r3]
 800677c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006780:	9307      	str	r3, [sp, #28]
 8006782:	f8cd 8018 	str.w	r8, [sp, #24]
 8006786:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800678a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800678e:	4b9c      	ldr	r3, [pc, #624]	@ (8006a00 <_printf_float+0x2c8>)
 8006790:	f04f 32ff 	mov.w	r2, #4294967295
 8006794:	f7fa f9ea 	bl	8000b6c <__aeabi_dcmpun>
 8006798:	bb70      	cbnz	r0, 80067f8 <_printf_float+0xc0>
 800679a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800679e:	4b98      	ldr	r3, [pc, #608]	@ (8006a00 <_printf_float+0x2c8>)
 80067a0:	f04f 32ff 	mov.w	r2, #4294967295
 80067a4:	f7fa f9c4 	bl	8000b30 <__aeabi_dcmple>
 80067a8:	bb30      	cbnz	r0, 80067f8 <_printf_float+0xc0>
 80067aa:	2200      	movs	r2, #0
 80067ac:	2300      	movs	r3, #0
 80067ae:	4640      	mov	r0, r8
 80067b0:	4649      	mov	r1, r9
 80067b2:	f7fa f9b3 	bl	8000b1c <__aeabi_dcmplt>
 80067b6:	b110      	cbz	r0, 80067be <_printf_float+0x86>
 80067b8:	232d      	movs	r3, #45	@ 0x2d
 80067ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067be:	4a91      	ldr	r2, [pc, #580]	@ (8006a04 <_printf_float+0x2cc>)
 80067c0:	4b91      	ldr	r3, [pc, #580]	@ (8006a08 <_printf_float+0x2d0>)
 80067c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80067c6:	bf94      	ite	ls
 80067c8:	4690      	movls	r8, r2
 80067ca:	4698      	movhi	r8, r3
 80067cc:	2303      	movs	r3, #3
 80067ce:	6123      	str	r3, [r4, #16]
 80067d0:	f02b 0304 	bic.w	r3, fp, #4
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	f04f 0900 	mov.w	r9, #0
 80067da:	9700      	str	r7, [sp, #0]
 80067dc:	4633      	mov	r3, r6
 80067de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80067e0:	4621      	mov	r1, r4
 80067e2:	4628      	mov	r0, r5
 80067e4:	f000 f9d2 	bl	8006b8c <_printf_common>
 80067e8:	3001      	adds	r0, #1
 80067ea:	f040 808d 	bne.w	8006908 <_printf_float+0x1d0>
 80067ee:	f04f 30ff 	mov.w	r0, #4294967295
 80067f2:	b00d      	add	sp, #52	@ 0x34
 80067f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f8:	4642      	mov	r2, r8
 80067fa:	464b      	mov	r3, r9
 80067fc:	4640      	mov	r0, r8
 80067fe:	4649      	mov	r1, r9
 8006800:	f7fa f9b4 	bl	8000b6c <__aeabi_dcmpun>
 8006804:	b140      	cbz	r0, 8006818 <_printf_float+0xe0>
 8006806:	464b      	mov	r3, r9
 8006808:	2b00      	cmp	r3, #0
 800680a:	bfbc      	itt	lt
 800680c:	232d      	movlt	r3, #45	@ 0x2d
 800680e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006812:	4a7e      	ldr	r2, [pc, #504]	@ (8006a0c <_printf_float+0x2d4>)
 8006814:	4b7e      	ldr	r3, [pc, #504]	@ (8006a10 <_printf_float+0x2d8>)
 8006816:	e7d4      	b.n	80067c2 <_printf_float+0x8a>
 8006818:	6863      	ldr	r3, [r4, #4]
 800681a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800681e:	9206      	str	r2, [sp, #24]
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	d13b      	bne.n	800689c <_printf_float+0x164>
 8006824:	2306      	movs	r3, #6
 8006826:	6063      	str	r3, [r4, #4]
 8006828:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800682c:	2300      	movs	r3, #0
 800682e:	6022      	str	r2, [r4, #0]
 8006830:	9303      	str	r3, [sp, #12]
 8006832:	ab0a      	add	r3, sp, #40	@ 0x28
 8006834:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006838:	ab09      	add	r3, sp, #36	@ 0x24
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	6861      	ldr	r1, [r4, #4]
 800683e:	ec49 8b10 	vmov	d0, r8, r9
 8006842:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006846:	4628      	mov	r0, r5
 8006848:	f7ff fed6 	bl	80065f8 <__cvt>
 800684c:	9b06      	ldr	r3, [sp, #24]
 800684e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006850:	2b47      	cmp	r3, #71	@ 0x47
 8006852:	4680      	mov	r8, r0
 8006854:	d129      	bne.n	80068aa <_printf_float+0x172>
 8006856:	1cc8      	adds	r0, r1, #3
 8006858:	db02      	blt.n	8006860 <_printf_float+0x128>
 800685a:	6863      	ldr	r3, [r4, #4]
 800685c:	4299      	cmp	r1, r3
 800685e:	dd41      	ble.n	80068e4 <_printf_float+0x1ac>
 8006860:	f1aa 0a02 	sub.w	sl, sl, #2
 8006864:	fa5f fa8a 	uxtb.w	sl, sl
 8006868:	3901      	subs	r1, #1
 800686a:	4652      	mov	r2, sl
 800686c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006870:	9109      	str	r1, [sp, #36]	@ 0x24
 8006872:	f7ff ff26 	bl	80066c2 <__exponent>
 8006876:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006878:	1813      	adds	r3, r2, r0
 800687a:	2a01      	cmp	r2, #1
 800687c:	4681      	mov	r9, r0
 800687e:	6123      	str	r3, [r4, #16]
 8006880:	dc02      	bgt.n	8006888 <_printf_float+0x150>
 8006882:	6822      	ldr	r2, [r4, #0]
 8006884:	07d2      	lsls	r2, r2, #31
 8006886:	d501      	bpl.n	800688c <_printf_float+0x154>
 8006888:	3301      	adds	r3, #1
 800688a:	6123      	str	r3, [r4, #16]
 800688c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006890:	2b00      	cmp	r3, #0
 8006892:	d0a2      	beq.n	80067da <_printf_float+0xa2>
 8006894:	232d      	movs	r3, #45	@ 0x2d
 8006896:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800689a:	e79e      	b.n	80067da <_printf_float+0xa2>
 800689c:	9a06      	ldr	r2, [sp, #24]
 800689e:	2a47      	cmp	r2, #71	@ 0x47
 80068a0:	d1c2      	bne.n	8006828 <_printf_float+0xf0>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1c0      	bne.n	8006828 <_printf_float+0xf0>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e7bd      	b.n	8006826 <_printf_float+0xee>
 80068aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068ae:	d9db      	bls.n	8006868 <_printf_float+0x130>
 80068b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80068b4:	d118      	bne.n	80068e8 <_printf_float+0x1b0>
 80068b6:	2900      	cmp	r1, #0
 80068b8:	6863      	ldr	r3, [r4, #4]
 80068ba:	dd0b      	ble.n	80068d4 <_printf_float+0x19c>
 80068bc:	6121      	str	r1, [r4, #16]
 80068be:	b913      	cbnz	r3, 80068c6 <_printf_float+0x18e>
 80068c0:	6822      	ldr	r2, [r4, #0]
 80068c2:	07d0      	lsls	r0, r2, #31
 80068c4:	d502      	bpl.n	80068cc <_printf_float+0x194>
 80068c6:	3301      	adds	r3, #1
 80068c8:	440b      	add	r3, r1
 80068ca:	6123      	str	r3, [r4, #16]
 80068cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80068ce:	f04f 0900 	mov.w	r9, #0
 80068d2:	e7db      	b.n	800688c <_printf_float+0x154>
 80068d4:	b913      	cbnz	r3, 80068dc <_printf_float+0x1a4>
 80068d6:	6822      	ldr	r2, [r4, #0]
 80068d8:	07d2      	lsls	r2, r2, #31
 80068da:	d501      	bpl.n	80068e0 <_printf_float+0x1a8>
 80068dc:	3302      	adds	r3, #2
 80068de:	e7f4      	b.n	80068ca <_printf_float+0x192>
 80068e0:	2301      	movs	r3, #1
 80068e2:	e7f2      	b.n	80068ca <_printf_float+0x192>
 80068e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80068e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068ea:	4299      	cmp	r1, r3
 80068ec:	db05      	blt.n	80068fa <_printf_float+0x1c2>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	6121      	str	r1, [r4, #16]
 80068f2:	07d8      	lsls	r0, r3, #31
 80068f4:	d5ea      	bpl.n	80068cc <_printf_float+0x194>
 80068f6:	1c4b      	adds	r3, r1, #1
 80068f8:	e7e7      	b.n	80068ca <_printf_float+0x192>
 80068fa:	2900      	cmp	r1, #0
 80068fc:	bfd4      	ite	le
 80068fe:	f1c1 0202 	rsble	r2, r1, #2
 8006902:	2201      	movgt	r2, #1
 8006904:	4413      	add	r3, r2
 8006906:	e7e0      	b.n	80068ca <_printf_float+0x192>
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	055a      	lsls	r2, r3, #21
 800690c:	d407      	bmi.n	800691e <_printf_float+0x1e6>
 800690e:	6923      	ldr	r3, [r4, #16]
 8006910:	4642      	mov	r2, r8
 8006912:	4631      	mov	r1, r6
 8006914:	4628      	mov	r0, r5
 8006916:	47b8      	blx	r7
 8006918:	3001      	adds	r0, #1
 800691a:	d12b      	bne.n	8006974 <_printf_float+0x23c>
 800691c:	e767      	b.n	80067ee <_printf_float+0xb6>
 800691e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006922:	f240 80dd 	bls.w	8006ae0 <_printf_float+0x3a8>
 8006926:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800692a:	2200      	movs	r2, #0
 800692c:	2300      	movs	r3, #0
 800692e:	f7fa f8eb 	bl	8000b08 <__aeabi_dcmpeq>
 8006932:	2800      	cmp	r0, #0
 8006934:	d033      	beq.n	800699e <_printf_float+0x266>
 8006936:	4a37      	ldr	r2, [pc, #220]	@ (8006a14 <_printf_float+0x2dc>)
 8006938:	2301      	movs	r3, #1
 800693a:	4631      	mov	r1, r6
 800693c:	4628      	mov	r0, r5
 800693e:	47b8      	blx	r7
 8006940:	3001      	adds	r0, #1
 8006942:	f43f af54 	beq.w	80067ee <_printf_float+0xb6>
 8006946:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800694a:	4543      	cmp	r3, r8
 800694c:	db02      	blt.n	8006954 <_printf_float+0x21c>
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	07d8      	lsls	r0, r3, #31
 8006952:	d50f      	bpl.n	8006974 <_printf_float+0x23c>
 8006954:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006958:	4631      	mov	r1, r6
 800695a:	4628      	mov	r0, r5
 800695c:	47b8      	blx	r7
 800695e:	3001      	adds	r0, #1
 8006960:	f43f af45 	beq.w	80067ee <_printf_float+0xb6>
 8006964:	f04f 0900 	mov.w	r9, #0
 8006968:	f108 38ff 	add.w	r8, r8, #4294967295
 800696c:	f104 0a1a 	add.w	sl, r4, #26
 8006970:	45c8      	cmp	r8, r9
 8006972:	dc09      	bgt.n	8006988 <_printf_float+0x250>
 8006974:	6823      	ldr	r3, [r4, #0]
 8006976:	079b      	lsls	r3, r3, #30
 8006978:	f100 8103 	bmi.w	8006b82 <_printf_float+0x44a>
 800697c:	68e0      	ldr	r0, [r4, #12]
 800697e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006980:	4298      	cmp	r0, r3
 8006982:	bfb8      	it	lt
 8006984:	4618      	movlt	r0, r3
 8006986:	e734      	b.n	80067f2 <_printf_float+0xba>
 8006988:	2301      	movs	r3, #1
 800698a:	4652      	mov	r2, sl
 800698c:	4631      	mov	r1, r6
 800698e:	4628      	mov	r0, r5
 8006990:	47b8      	blx	r7
 8006992:	3001      	adds	r0, #1
 8006994:	f43f af2b 	beq.w	80067ee <_printf_float+0xb6>
 8006998:	f109 0901 	add.w	r9, r9, #1
 800699c:	e7e8      	b.n	8006970 <_printf_float+0x238>
 800699e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	dc39      	bgt.n	8006a18 <_printf_float+0x2e0>
 80069a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a14 <_printf_float+0x2dc>)
 80069a6:	2301      	movs	r3, #1
 80069a8:	4631      	mov	r1, r6
 80069aa:	4628      	mov	r0, r5
 80069ac:	47b8      	blx	r7
 80069ae:	3001      	adds	r0, #1
 80069b0:	f43f af1d 	beq.w	80067ee <_printf_float+0xb6>
 80069b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80069b8:	ea59 0303 	orrs.w	r3, r9, r3
 80069bc:	d102      	bne.n	80069c4 <_printf_float+0x28c>
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	07d9      	lsls	r1, r3, #31
 80069c2:	d5d7      	bpl.n	8006974 <_printf_float+0x23c>
 80069c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069c8:	4631      	mov	r1, r6
 80069ca:	4628      	mov	r0, r5
 80069cc:	47b8      	blx	r7
 80069ce:	3001      	adds	r0, #1
 80069d0:	f43f af0d 	beq.w	80067ee <_printf_float+0xb6>
 80069d4:	f04f 0a00 	mov.w	sl, #0
 80069d8:	f104 0b1a 	add.w	fp, r4, #26
 80069dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069de:	425b      	negs	r3, r3
 80069e0:	4553      	cmp	r3, sl
 80069e2:	dc01      	bgt.n	80069e8 <_printf_float+0x2b0>
 80069e4:	464b      	mov	r3, r9
 80069e6:	e793      	b.n	8006910 <_printf_float+0x1d8>
 80069e8:	2301      	movs	r3, #1
 80069ea:	465a      	mov	r2, fp
 80069ec:	4631      	mov	r1, r6
 80069ee:	4628      	mov	r0, r5
 80069f0:	47b8      	blx	r7
 80069f2:	3001      	adds	r0, #1
 80069f4:	f43f aefb 	beq.w	80067ee <_printf_float+0xb6>
 80069f8:	f10a 0a01 	add.w	sl, sl, #1
 80069fc:	e7ee      	b.n	80069dc <_printf_float+0x2a4>
 80069fe:	bf00      	nop
 8006a00:	7fefffff 	.word	0x7fefffff
 8006a04:	08009270 	.word	0x08009270
 8006a08:	08009274 	.word	0x08009274
 8006a0c:	08009278 	.word	0x08009278
 8006a10:	0800927c 	.word	0x0800927c
 8006a14:	08009280 	.word	0x08009280
 8006a18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a1e:	4553      	cmp	r3, sl
 8006a20:	bfa8      	it	ge
 8006a22:	4653      	movge	r3, sl
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	4699      	mov	r9, r3
 8006a28:	dc36      	bgt.n	8006a98 <_printf_float+0x360>
 8006a2a:	f04f 0b00 	mov.w	fp, #0
 8006a2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a32:	f104 021a 	add.w	r2, r4, #26
 8006a36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a38:	9306      	str	r3, [sp, #24]
 8006a3a:	eba3 0309 	sub.w	r3, r3, r9
 8006a3e:	455b      	cmp	r3, fp
 8006a40:	dc31      	bgt.n	8006aa6 <_printf_float+0x36e>
 8006a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a44:	459a      	cmp	sl, r3
 8006a46:	dc3a      	bgt.n	8006abe <_printf_float+0x386>
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	07da      	lsls	r2, r3, #31
 8006a4c:	d437      	bmi.n	8006abe <_printf_float+0x386>
 8006a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a50:	ebaa 0903 	sub.w	r9, sl, r3
 8006a54:	9b06      	ldr	r3, [sp, #24]
 8006a56:	ebaa 0303 	sub.w	r3, sl, r3
 8006a5a:	4599      	cmp	r9, r3
 8006a5c:	bfa8      	it	ge
 8006a5e:	4699      	movge	r9, r3
 8006a60:	f1b9 0f00 	cmp.w	r9, #0
 8006a64:	dc33      	bgt.n	8006ace <_printf_float+0x396>
 8006a66:	f04f 0800 	mov.w	r8, #0
 8006a6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a6e:	f104 0b1a 	add.w	fp, r4, #26
 8006a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a74:	ebaa 0303 	sub.w	r3, sl, r3
 8006a78:	eba3 0309 	sub.w	r3, r3, r9
 8006a7c:	4543      	cmp	r3, r8
 8006a7e:	f77f af79 	ble.w	8006974 <_printf_float+0x23c>
 8006a82:	2301      	movs	r3, #1
 8006a84:	465a      	mov	r2, fp
 8006a86:	4631      	mov	r1, r6
 8006a88:	4628      	mov	r0, r5
 8006a8a:	47b8      	blx	r7
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	f43f aeae 	beq.w	80067ee <_printf_float+0xb6>
 8006a92:	f108 0801 	add.w	r8, r8, #1
 8006a96:	e7ec      	b.n	8006a72 <_printf_float+0x33a>
 8006a98:	4642      	mov	r2, r8
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	47b8      	blx	r7
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d1c2      	bne.n	8006a2a <_printf_float+0x2f2>
 8006aa4:	e6a3      	b.n	80067ee <_printf_float+0xb6>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	4631      	mov	r1, r6
 8006aaa:	4628      	mov	r0, r5
 8006aac:	9206      	str	r2, [sp, #24]
 8006aae:	47b8      	blx	r7
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	f43f ae9c 	beq.w	80067ee <_printf_float+0xb6>
 8006ab6:	9a06      	ldr	r2, [sp, #24]
 8006ab8:	f10b 0b01 	add.w	fp, fp, #1
 8006abc:	e7bb      	b.n	8006a36 <_printf_float+0x2fe>
 8006abe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d1c0      	bne.n	8006a4e <_printf_float+0x316>
 8006acc:	e68f      	b.n	80067ee <_printf_float+0xb6>
 8006ace:	9a06      	ldr	r2, [sp, #24]
 8006ad0:	464b      	mov	r3, r9
 8006ad2:	4442      	add	r2, r8
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	47b8      	blx	r7
 8006ada:	3001      	adds	r0, #1
 8006adc:	d1c3      	bne.n	8006a66 <_printf_float+0x32e>
 8006ade:	e686      	b.n	80067ee <_printf_float+0xb6>
 8006ae0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ae4:	f1ba 0f01 	cmp.w	sl, #1
 8006ae8:	dc01      	bgt.n	8006aee <_printf_float+0x3b6>
 8006aea:	07db      	lsls	r3, r3, #31
 8006aec:	d536      	bpl.n	8006b5c <_printf_float+0x424>
 8006aee:	2301      	movs	r3, #1
 8006af0:	4642      	mov	r2, r8
 8006af2:	4631      	mov	r1, r6
 8006af4:	4628      	mov	r0, r5
 8006af6:	47b8      	blx	r7
 8006af8:	3001      	adds	r0, #1
 8006afa:	f43f ae78 	beq.w	80067ee <_printf_float+0xb6>
 8006afe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b02:	4631      	mov	r1, r6
 8006b04:	4628      	mov	r0, r5
 8006b06:	47b8      	blx	r7
 8006b08:	3001      	adds	r0, #1
 8006b0a:	f43f ae70 	beq.w	80067ee <_printf_float+0xb6>
 8006b0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b12:	2200      	movs	r2, #0
 8006b14:	2300      	movs	r3, #0
 8006b16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b1a:	f7f9 fff5 	bl	8000b08 <__aeabi_dcmpeq>
 8006b1e:	b9c0      	cbnz	r0, 8006b52 <_printf_float+0x41a>
 8006b20:	4653      	mov	r3, sl
 8006b22:	f108 0201 	add.w	r2, r8, #1
 8006b26:	4631      	mov	r1, r6
 8006b28:	4628      	mov	r0, r5
 8006b2a:	47b8      	blx	r7
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	d10c      	bne.n	8006b4a <_printf_float+0x412>
 8006b30:	e65d      	b.n	80067ee <_printf_float+0xb6>
 8006b32:	2301      	movs	r3, #1
 8006b34:	465a      	mov	r2, fp
 8006b36:	4631      	mov	r1, r6
 8006b38:	4628      	mov	r0, r5
 8006b3a:	47b8      	blx	r7
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	f43f ae56 	beq.w	80067ee <_printf_float+0xb6>
 8006b42:	f108 0801 	add.w	r8, r8, #1
 8006b46:	45d0      	cmp	r8, sl
 8006b48:	dbf3      	blt.n	8006b32 <_printf_float+0x3fa>
 8006b4a:	464b      	mov	r3, r9
 8006b4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006b50:	e6df      	b.n	8006912 <_printf_float+0x1da>
 8006b52:	f04f 0800 	mov.w	r8, #0
 8006b56:	f104 0b1a 	add.w	fp, r4, #26
 8006b5a:	e7f4      	b.n	8006b46 <_printf_float+0x40e>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	4642      	mov	r2, r8
 8006b60:	e7e1      	b.n	8006b26 <_printf_float+0x3ee>
 8006b62:	2301      	movs	r3, #1
 8006b64:	464a      	mov	r2, r9
 8006b66:	4631      	mov	r1, r6
 8006b68:	4628      	mov	r0, r5
 8006b6a:	47b8      	blx	r7
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	f43f ae3e 	beq.w	80067ee <_printf_float+0xb6>
 8006b72:	f108 0801 	add.w	r8, r8, #1
 8006b76:	68e3      	ldr	r3, [r4, #12]
 8006b78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b7a:	1a5b      	subs	r3, r3, r1
 8006b7c:	4543      	cmp	r3, r8
 8006b7e:	dcf0      	bgt.n	8006b62 <_printf_float+0x42a>
 8006b80:	e6fc      	b.n	800697c <_printf_float+0x244>
 8006b82:	f04f 0800 	mov.w	r8, #0
 8006b86:	f104 0919 	add.w	r9, r4, #25
 8006b8a:	e7f4      	b.n	8006b76 <_printf_float+0x43e>

08006b8c <_printf_common>:
 8006b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b90:	4616      	mov	r6, r2
 8006b92:	4698      	mov	r8, r3
 8006b94:	688a      	ldr	r2, [r1, #8]
 8006b96:	690b      	ldr	r3, [r1, #16]
 8006b98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	bfb8      	it	lt
 8006ba0:	4613      	movlt	r3, r2
 8006ba2:	6033      	str	r3, [r6, #0]
 8006ba4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ba8:	4607      	mov	r7, r0
 8006baa:	460c      	mov	r4, r1
 8006bac:	b10a      	cbz	r2, 8006bb2 <_printf_common+0x26>
 8006bae:	3301      	adds	r3, #1
 8006bb0:	6033      	str	r3, [r6, #0]
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	0699      	lsls	r1, r3, #26
 8006bb6:	bf42      	ittt	mi
 8006bb8:	6833      	ldrmi	r3, [r6, #0]
 8006bba:	3302      	addmi	r3, #2
 8006bbc:	6033      	strmi	r3, [r6, #0]
 8006bbe:	6825      	ldr	r5, [r4, #0]
 8006bc0:	f015 0506 	ands.w	r5, r5, #6
 8006bc4:	d106      	bne.n	8006bd4 <_printf_common+0x48>
 8006bc6:	f104 0a19 	add.w	sl, r4, #25
 8006bca:	68e3      	ldr	r3, [r4, #12]
 8006bcc:	6832      	ldr	r2, [r6, #0]
 8006bce:	1a9b      	subs	r3, r3, r2
 8006bd0:	42ab      	cmp	r3, r5
 8006bd2:	dc26      	bgt.n	8006c22 <_printf_common+0x96>
 8006bd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006bd8:	6822      	ldr	r2, [r4, #0]
 8006bda:	3b00      	subs	r3, #0
 8006bdc:	bf18      	it	ne
 8006bde:	2301      	movne	r3, #1
 8006be0:	0692      	lsls	r2, r2, #26
 8006be2:	d42b      	bmi.n	8006c3c <_printf_common+0xb0>
 8006be4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006be8:	4641      	mov	r1, r8
 8006bea:	4638      	mov	r0, r7
 8006bec:	47c8      	blx	r9
 8006bee:	3001      	adds	r0, #1
 8006bf0:	d01e      	beq.n	8006c30 <_printf_common+0xa4>
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	6922      	ldr	r2, [r4, #16]
 8006bf6:	f003 0306 	and.w	r3, r3, #6
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	bf02      	ittt	eq
 8006bfe:	68e5      	ldreq	r5, [r4, #12]
 8006c00:	6833      	ldreq	r3, [r6, #0]
 8006c02:	1aed      	subeq	r5, r5, r3
 8006c04:	68a3      	ldr	r3, [r4, #8]
 8006c06:	bf0c      	ite	eq
 8006c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c0c:	2500      	movne	r5, #0
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	bfc4      	itt	gt
 8006c12:	1a9b      	subgt	r3, r3, r2
 8006c14:	18ed      	addgt	r5, r5, r3
 8006c16:	2600      	movs	r6, #0
 8006c18:	341a      	adds	r4, #26
 8006c1a:	42b5      	cmp	r5, r6
 8006c1c:	d11a      	bne.n	8006c54 <_printf_common+0xc8>
 8006c1e:	2000      	movs	r0, #0
 8006c20:	e008      	b.n	8006c34 <_printf_common+0xa8>
 8006c22:	2301      	movs	r3, #1
 8006c24:	4652      	mov	r2, sl
 8006c26:	4641      	mov	r1, r8
 8006c28:	4638      	mov	r0, r7
 8006c2a:	47c8      	blx	r9
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	d103      	bne.n	8006c38 <_printf_common+0xac>
 8006c30:	f04f 30ff 	mov.w	r0, #4294967295
 8006c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c38:	3501      	adds	r5, #1
 8006c3a:	e7c6      	b.n	8006bca <_printf_common+0x3e>
 8006c3c:	18e1      	adds	r1, r4, r3
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	2030      	movs	r0, #48	@ 0x30
 8006c42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c46:	4422      	add	r2, r4
 8006c48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c50:	3302      	adds	r3, #2
 8006c52:	e7c7      	b.n	8006be4 <_printf_common+0x58>
 8006c54:	2301      	movs	r3, #1
 8006c56:	4622      	mov	r2, r4
 8006c58:	4641      	mov	r1, r8
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	47c8      	blx	r9
 8006c5e:	3001      	adds	r0, #1
 8006c60:	d0e6      	beq.n	8006c30 <_printf_common+0xa4>
 8006c62:	3601      	adds	r6, #1
 8006c64:	e7d9      	b.n	8006c1a <_printf_common+0x8e>
	...

08006c68 <_printf_i>:
 8006c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c6c:	7e0f      	ldrb	r7, [r1, #24]
 8006c6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c70:	2f78      	cmp	r7, #120	@ 0x78
 8006c72:	4691      	mov	r9, r2
 8006c74:	4680      	mov	r8, r0
 8006c76:	460c      	mov	r4, r1
 8006c78:	469a      	mov	sl, r3
 8006c7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c7e:	d807      	bhi.n	8006c90 <_printf_i+0x28>
 8006c80:	2f62      	cmp	r7, #98	@ 0x62
 8006c82:	d80a      	bhi.n	8006c9a <_printf_i+0x32>
 8006c84:	2f00      	cmp	r7, #0
 8006c86:	f000 80d2 	beq.w	8006e2e <_printf_i+0x1c6>
 8006c8a:	2f58      	cmp	r7, #88	@ 0x58
 8006c8c:	f000 80b9 	beq.w	8006e02 <_printf_i+0x19a>
 8006c90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c98:	e03a      	b.n	8006d10 <_printf_i+0xa8>
 8006c9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c9e:	2b15      	cmp	r3, #21
 8006ca0:	d8f6      	bhi.n	8006c90 <_printf_i+0x28>
 8006ca2:	a101      	add	r1, pc, #4	@ (adr r1, 8006ca8 <_printf_i+0x40>)
 8006ca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ca8:	08006d01 	.word	0x08006d01
 8006cac:	08006d15 	.word	0x08006d15
 8006cb0:	08006c91 	.word	0x08006c91
 8006cb4:	08006c91 	.word	0x08006c91
 8006cb8:	08006c91 	.word	0x08006c91
 8006cbc:	08006c91 	.word	0x08006c91
 8006cc0:	08006d15 	.word	0x08006d15
 8006cc4:	08006c91 	.word	0x08006c91
 8006cc8:	08006c91 	.word	0x08006c91
 8006ccc:	08006c91 	.word	0x08006c91
 8006cd0:	08006c91 	.word	0x08006c91
 8006cd4:	08006e15 	.word	0x08006e15
 8006cd8:	08006d3f 	.word	0x08006d3f
 8006cdc:	08006dcf 	.word	0x08006dcf
 8006ce0:	08006c91 	.word	0x08006c91
 8006ce4:	08006c91 	.word	0x08006c91
 8006ce8:	08006e37 	.word	0x08006e37
 8006cec:	08006c91 	.word	0x08006c91
 8006cf0:	08006d3f 	.word	0x08006d3f
 8006cf4:	08006c91 	.word	0x08006c91
 8006cf8:	08006c91 	.word	0x08006c91
 8006cfc:	08006dd7 	.word	0x08006dd7
 8006d00:	6833      	ldr	r3, [r6, #0]
 8006d02:	1d1a      	adds	r2, r3, #4
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6032      	str	r2, [r6, #0]
 8006d08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d10:	2301      	movs	r3, #1
 8006d12:	e09d      	b.n	8006e50 <_printf_i+0x1e8>
 8006d14:	6833      	ldr	r3, [r6, #0]
 8006d16:	6820      	ldr	r0, [r4, #0]
 8006d18:	1d19      	adds	r1, r3, #4
 8006d1a:	6031      	str	r1, [r6, #0]
 8006d1c:	0606      	lsls	r6, r0, #24
 8006d1e:	d501      	bpl.n	8006d24 <_printf_i+0xbc>
 8006d20:	681d      	ldr	r5, [r3, #0]
 8006d22:	e003      	b.n	8006d2c <_printf_i+0xc4>
 8006d24:	0645      	lsls	r5, r0, #25
 8006d26:	d5fb      	bpl.n	8006d20 <_printf_i+0xb8>
 8006d28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d2c:	2d00      	cmp	r5, #0
 8006d2e:	da03      	bge.n	8006d38 <_printf_i+0xd0>
 8006d30:	232d      	movs	r3, #45	@ 0x2d
 8006d32:	426d      	negs	r5, r5
 8006d34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d38:	4859      	ldr	r0, [pc, #356]	@ (8006ea0 <_printf_i+0x238>)
 8006d3a:	230a      	movs	r3, #10
 8006d3c:	e011      	b.n	8006d62 <_printf_i+0xfa>
 8006d3e:	6821      	ldr	r1, [r4, #0]
 8006d40:	6833      	ldr	r3, [r6, #0]
 8006d42:	0608      	lsls	r0, r1, #24
 8006d44:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d48:	d402      	bmi.n	8006d50 <_printf_i+0xe8>
 8006d4a:	0649      	lsls	r1, r1, #25
 8006d4c:	bf48      	it	mi
 8006d4e:	b2ad      	uxthmi	r5, r5
 8006d50:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d52:	4853      	ldr	r0, [pc, #332]	@ (8006ea0 <_printf_i+0x238>)
 8006d54:	6033      	str	r3, [r6, #0]
 8006d56:	bf14      	ite	ne
 8006d58:	230a      	movne	r3, #10
 8006d5a:	2308      	moveq	r3, #8
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d62:	6866      	ldr	r6, [r4, #4]
 8006d64:	60a6      	str	r6, [r4, #8]
 8006d66:	2e00      	cmp	r6, #0
 8006d68:	bfa2      	ittt	ge
 8006d6a:	6821      	ldrge	r1, [r4, #0]
 8006d6c:	f021 0104 	bicge.w	r1, r1, #4
 8006d70:	6021      	strge	r1, [r4, #0]
 8006d72:	b90d      	cbnz	r5, 8006d78 <_printf_i+0x110>
 8006d74:	2e00      	cmp	r6, #0
 8006d76:	d04b      	beq.n	8006e10 <_printf_i+0x1a8>
 8006d78:	4616      	mov	r6, r2
 8006d7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d7e:	fb03 5711 	mls	r7, r3, r1, r5
 8006d82:	5dc7      	ldrb	r7, [r0, r7]
 8006d84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d88:	462f      	mov	r7, r5
 8006d8a:	42bb      	cmp	r3, r7
 8006d8c:	460d      	mov	r5, r1
 8006d8e:	d9f4      	bls.n	8006d7a <_printf_i+0x112>
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d10b      	bne.n	8006dac <_printf_i+0x144>
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	07df      	lsls	r7, r3, #31
 8006d98:	d508      	bpl.n	8006dac <_printf_i+0x144>
 8006d9a:	6923      	ldr	r3, [r4, #16]
 8006d9c:	6861      	ldr	r1, [r4, #4]
 8006d9e:	4299      	cmp	r1, r3
 8006da0:	bfde      	ittt	le
 8006da2:	2330      	movle	r3, #48	@ 0x30
 8006da4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006da8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006dac:	1b92      	subs	r2, r2, r6
 8006dae:	6122      	str	r2, [r4, #16]
 8006db0:	f8cd a000 	str.w	sl, [sp]
 8006db4:	464b      	mov	r3, r9
 8006db6:	aa03      	add	r2, sp, #12
 8006db8:	4621      	mov	r1, r4
 8006dba:	4640      	mov	r0, r8
 8006dbc:	f7ff fee6 	bl	8006b8c <_printf_common>
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d14a      	bne.n	8006e5a <_printf_i+0x1f2>
 8006dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc8:	b004      	add	sp, #16
 8006dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	f043 0320 	orr.w	r3, r3, #32
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	4833      	ldr	r0, [pc, #204]	@ (8006ea4 <_printf_i+0x23c>)
 8006dd8:	2778      	movs	r7, #120	@ 0x78
 8006dda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	6831      	ldr	r1, [r6, #0]
 8006de2:	061f      	lsls	r7, r3, #24
 8006de4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006de8:	d402      	bmi.n	8006df0 <_printf_i+0x188>
 8006dea:	065f      	lsls	r7, r3, #25
 8006dec:	bf48      	it	mi
 8006dee:	b2ad      	uxthmi	r5, r5
 8006df0:	6031      	str	r1, [r6, #0]
 8006df2:	07d9      	lsls	r1, r3, #31
 8006df4:	bf44      	itt	mi
 8006df6:	f043 0320 	orrmi.w	r3, r3, #32
 8006dfa:	6023      	strmi	r3, [r4, #0]
 8006dfc:	b11d      	cbz	r5, 8006e06 <_printf_i+0x19e>
 8006dfe:	2310      	movs	r3, #16
 8006e00:	e7ac      	b.n	8006d5c <_printf_i+0xf4>
 8006e02:	4827      	ldr	r0, [pc, #156]	@ (8006ea0 <_printf_i+0x238>)
 8006e04:	e7e9      	b.n	8006dda <_printf_i+0x172>
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	f023 0320 	bic.w	r3, r3, #32
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	e7f6      	b.n	8006dfe <_printf_i+0x196>
 8006e10:	4616      	mov	r6, r2
 8006e12:	e7bd      	b.n	8006d90 <_printf_i+0x128>
 8006e14:	6833      	ldr	r3, [r6, #0]
 8006e16:	6825      	ldr	r5, [r4, #0]
 8006e18:	6961      	ldr	r1, [r4, #20]
 8006e1a:	1d18      	adds	r0, r3, #4
 8006e1c:	6030      	str	r0, [r6, #0]
 8006e1e:	062e      	lsls	r6, r5, #24
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	d501      	bpl.n	8006e28 <_printf_i+0x1c0>
 8006e24:	6019      	str	r1, [r3, #0]
 8006e26:	e002      	b.n	8006e2e <_printf_i+0x1c6>
 8006e28:	0668      	lsls	r0, r5, #25
 8006e2a:	d5fb      	bpl.n	8006e24 <_printf_i+0x1bc>
 8006e2c:	8019      	strh	r1, [r3, #0]
 8006e2e:	2300      	movs	r3, #0
 8006e30:	6123      	str	r3, [r4, #16]
 8006e32:	4616      	mov	r6, r2
 8006e34:	e7bc      	b.n	8006db0 <_printf_i+0x148>
 8006e36:	6833      	ldr	r3, [r6, #0]
 8006e38:	1d1a      	adds	r2, r3, #4
 8006e3a:	6032      	str	r2, [r6, #0]
 8006e3c:	681e      	ldr	r6, [r3, #0]
 8006e3e:	6862      	ldr	r2, [r4, #4]
 8006e40:	2100      	movs	r1, #0
 8006e42:	4630      	mov	r0, r6
 8006e44:	f7f9 f9e4 	bl	8000210 <memchr>
 8006e48:	b108      	cbz	r0, 8006e4e <_printf_i+0x1e6>
 8006e4a:	1b80      	subs	r0, r0, r6
 8006e4c:	6060      	str	r0, [r4, #4]
 8006e4e:	6863      	ldr	r3, [r4, #4]
 8006e50:	6123      	str	r3, [r4, #16]
 8006e52:	2300      	movs	r3, #0
 8006e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e58:	e7aa      	b.n	8006db0 <_printf_i+0x148>
 8006e5a:	6923      	ldr	r3, [r4, #16]
 8006e5c:	4632      	mov	r2, r6
 8006e5e:	4649      	mov	r1, r9
 8006e60:	4640      	mov	r0, r8
 8006e62:	47d0      	blx	sl
 8006e64:	3001      	adds	r0, #1
 8006e66:	d0ad      	beq.n	8006dc4 <_printf_i+0x15c>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	079b      	lsls	r3, r3, #30
 8006e6c:	d413      	bmi.n	8006e96 <_printf_i+0x22e>
 8006e6e:	68e0      	ldr	r0, [r4, #12]
 8006e70:	9b03      	ldr	r3, [sp, #12]
 8006e72:	4298      	cmp	r0, r3
 8006e74:	bfb8      	it	lt
 8006e76:	4618      	movlt	r0, r3
 8006e78:	e7a6      	b.n	8006dc8 <_printf_i+0x160>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	4632      	mov	r2, r6
 8006e7e:	4649      	mov	r1, r9
 8006e80:	4640      	mov	r0, r8
 8006e82:	47d0      	blx	sl
 8006e84:	3001      	adds	r0, #1
 8006e86:	d09d      	beq.n	8006dc4 <_printf_i+0x15c>
 8006e88:	3501      	adds	r5, #1
 8006e8a:	68e3      	ldr	r3, [r4, #12]
 8006e8c:	9903      	ldr	r1, [sp, #12]
 8006e8e:	1a5b      	subs	r3, r3, r1
 8006e90:	42ab      	cmp	r3, r5
 8006e92:	dcf2      	bgt.n	8006e7a <_printf_i+0x212>
 8006e94:	e7eb      	b.n	8006e6e <_printf_i+0x206>
 8006e96:	2500      	movs	r5, #0
 8006e98:	f104 0619 	add.w	r6, r4, #25
 8006e9c:	e7f5      	b.n	8006e8a <_printf_i+0x222>
 8006e9e:	bf00      	nop
 8006ea0:	08009282 	.word	0x08009282
 8006ea4:	08009293 	.word	0x08009293

08006ea8 <std>:
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	b510      	push	{r4, lr}
 8006eac:	4604      	mov	r4, r0
 8006eae:	e9c0 3300 	strd	r3, r3, [r0]
 8006eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eb6:	6083      	str	r3, [r0, #8]
 8006eb8:	8181      	strh	r1, [r0, #12]
 8006eba:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ebc:	81c2      	strh	r2, [r0, #14]
 8006ebe:	6183      	str	r3, [r0, #24]
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	2208      	movs	r2, #8
 8006ec4:	305c      	adds	r0, #92	@ 0x5c
 8006ec6:	f000 f928 	bl	800711a <memset>
 8006eca:	4b0d      	ldr	r3, [pc, #52]	@ (8006f00 <std+0x58>)
 8006ecc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ece:	4b0d      	ldr	r3, [pc, #52]	@ (8006f04 <std+0x5c>)
 8006ed0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8006f08 <std+0x60>)
 8006ed4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8006f0c <std+0x64>)
 8006ed8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006eda:	4b0d      	ldr	r3, [pc, #52]	@ (8006f10 <std+0x68>)
 8006edc:	6224      	str	r4, [r4, #32]
 8006ede:	429c      	cmp	r4, r3
 8006ee0:	d006      	beq.n	8006ef0 <std+0x48>
 8006ee2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ee6:	4294      	cmp	r4, r2
 8006ee8:	d002      	beq.n	8006ef0 <std+0x48>
 8006eea:	33d0      	adds	r3, #208	@ 0xd0
 8006eec:	429c      	cmp	r4, r3
 8006eee:	d105      	bne.n	8006efc <std+0x54>
 8006ef0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef8:	f000 b99c 	b.w	8007234 <__retarget_lock_init_recursive>
 8006efc:	bd10      	pop	{r4, pc}
 8006efe:	bf00      	nop
 8006f00:	08007095 	.word	0x08007095
 8006f04:	080070b7 	.word	0x080070b7
 8006f08:	080070ef 	.word	0x080070ef
 8006f0c:	08007113 	.word	0x08007113
 8006f10:	20000460 	.word	0x20000460

08006f14 <stdio_exit_handler>:
 8006f14:	4a02      	ldr	r2, [pc, #8]	@ (8006f20 <stdio_exit_handler+0xc>)
 8006f16:	4903      	ldr	r1, [pc, #12]	@ (8006f24 <stdio_exit_handler+0x10>)
 8006f18:	4803      	ldr	r0, [pc, #12]	@ (8006f28 <stdio_exit_handler+0x14>)
 8006f1a:	f000 b869 	b.w	8006ff0 <_fwalk_sglue>
 8006f1e:	bf00      	nop
 8006f20:	20000014 	.word	0x20000014
 8006f24:	08008a29 	.word	0x08008a29
 8006f28:	20000024 	.word	0x20000024

08006f2c <cleanup_stdio>:
 8006f2c:	6841      	ldr	r1, [r0, #4]
 8006f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f60 <cleanup_stdio+0x34>)
 8006f30:	4299      	cmp	r1, r3
 8006f32:	b510      	push	{r4, lr}
 8006f34:	4604      	mov	r4, r0
 8006f36:	d001      	beq.n	8006f3c <cleanup_stdio+0x10>
 8006f38:	f001 fd76 	bl	8008a28 <_fflush_r>
 8006f3c:	68a1      	ldr	r1, [r4, #8]
 8006f3e:	4b09      	ldr	r3, [pc, #36]	@ (8006f64 <cleanup_stdio+0x38>)
 8006f40:	4299      	cmp	r1, r3
 8006f42:	d002      	beq.n	8006f4a <cleanup_stdio+0x1e>
 8006f44:	4620      	mov	r0, r4
 8006f46:	f001 fd6f 	bl	8008a28 <_fflush_r>
 8006f4a:	68e1      	ldr	r1, [r4, #12]
 8006f4c:	4b06      	ldr	r3, [pc, #24]	@ (8006f68 <cleanup_stdio+0x3c>)
 8006f4e:	4299      	cmp	r1, r3
 8006f50:	d004      	beq.n	8006f5c <cleanup_stdio+0x30>
 8006f52:	4620      	mov	r0, r4
 8006f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f58:	f001 bd66 	b.w	8008a28 <_fflush_r>
 8006f5c:	bd10      	pop	{r4, pc}
 8006f5e:	bf00      	nop
 8006f60:	20000460 	.word	0x20000460
 8006f64:	200004c8 	.word	0x200004c8
 8006f68:	20000530 	.word	0x20000530

08006f6c <global_stdio_init.part.0>:
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f9c <global_stdio_init.part.0+0x30>)
 8006f70:	4c0b      	ldr	r4, [pc, #44]	@ (8006fa0 <global_stdio_init.part.0+0x34>)
 8006f72:	4a0c      	ldr	r2, [pc, #48]	@ (8006fa4 <global_stdio_init.part.0+0x38>)
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	4620      	mov	r0, r4
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2104      	movs	r1, #4
 8006f7c:	f7ff ff94 	bl	8006ea8 <std>
 8006f80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f84:	2201      	movs	r2, #1
 8006f86:	2109      	movs	r1, #9
 8006f88:	f7ff ff8e 	bl	8006ea8 <std>
 8006f8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f90:	2202      	movs	r2, #2
 8006f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f96:	2112      	movs	r1, #18
 8006f98:	f7ff bf86 	b.w	8006ea8 <std>
 8006f9c:	20000598 	.word	0x20000598
 8006fa0:	20000460 	.word	0x20000460
 8006fa4:	08006f15 	.word	0x08006f15

08006fa8 <__sfp_lock_acquire>:
 8006fa8:	4801      	ldr	r0, [pc, #4]	@ (8006fb0 <__sfp_lock_acquire+0x8>)
 8006faa:	f000 b944 	b.w	8007236 <__retarget_lock_acquire_recursive>
 8006fae:	bf00      	nop
 8006fb0:	200005a1 	.word	0x200005a1

08006fb4 <__sfp_lock_release>:
 8006fb4:	4801      	ldr	r0, [pc, #4]	@ (8006fbc <__sfp_lock_release+0x8>)
 8006fb6:	f000 b93f 	b.w	8007238 <__retarget_lock_release_recursive>
 8006fba:	bf00      	nop
 8006fbc:	200005a1 	.word	0x200005a1

08006fc0 <__sinit>:
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	f7ff fff0 	bl	8006fa8 <__sfp_lock_acquire>
 8006fc8:	6a23      	ldr	r3, [r4, #32]
 8006fca:	b11b      	cbz	r3, 8006fd4 <__sinit+0x14>
 8006fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fd0:	f7ff bff0 	b.w	8006fb4 <__sfp_lock_release>
 8006fd4:	4b04      	ldr	r3, [pc, #16]	@ (8006fe8 <__sinit+0x28>)
 8006fd6:	6223      	str	r3, [r4, #32]
 8006fd8:	4b04      	ldr	r3, [pc, #16]	@ (8006fec <__sinit+0x2c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1f5      	bne.n	8006fcc <__sinit+0xc>
 8006fe0:	f7ff ffc4 	bl	8006f6c <global_stdio_init.part.0>
 8006fe4:	e7f2      	b.n	8006fcc <__sinit+0xc>
 8006fe6:	bf00      	nop
 8006fe8:	08006f2d 	.word	0x08006f2d
 8006fec:	20000598 	.word	0x20000598

08006ff0 <_fwalk_sglue>:
 8006ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff4:	4607      	mov	r7, r0
 8006ff6:	4688      	mov	r8, r1
 8006ff8:	4614      	mov	r4, r2
 8006ffa:	2600      	movs	r6, #0
 8006ffc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007000:	f1b9 0901 	subs.w	r9, r9, #1
 8007004:	d505      	bpl.n	8007012 <_fwalk_sglue+0x22>
 8007006:	6824      	ldr	r4, [r4, #0]
 8007008:	2c00      	cmp	r4, #0
 800700a:	d1f7      	bne.n	8006ffc <_fwalk_sglue+0xc>
 800700c:	4630      	mov	r0, r6
 800700e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007012:	89ab      	ldrh	r3, [r5, #12]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d907      	bls.n	8007028 <_fwalk_sglue+0x38>
 8007018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800701c:	3301      	adds	r3, #1
 800701e:	d003      	beq.n	8007028 <_fwalk_sglue+0x38>
 8007020:	4629      	mov	r1, r5
 8007022:	4638      	mov	r0, r7
 8007024:	47c0      	blx	r8
 8007026:	4306      	orrs	r6, r0
 8007028:	3568      	adds	r5, #104	@ 0x68
 800702a:	e7e9      	b.n	8007000 <_fwalk_sglue+0x10>

0800702c <sniprintf>:
 800702c:	b40c      	push	{r2, r3}
 800702e:	b530      	push	{r4, r5, lr}
 8007030:	4b17      	ldr	r3, [pc, #92]	@ (8007090 <sniprintf+0x64>)
 8007032:	1e0c      	subs	r4, r1, #0
 8007034:	681d      	ldr	r5, [r3, #0]
 8007036:	b09d      	sub	sp, #116	@ 0x74
 8007038:	da08      	bge.n	800704c <sniprintf+0x20>
 800703a:	238b      	movs	r3, #139	@ 0x8b
 800703c:	602b      	str	r3, [r5, #0]
 800703e:	f04f 30ff 	mov.w	r0, #4294967295
 8007042:	b01d      	add	sp, #116	@ 0x74
 8007044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007048:	b002      	add	sp, #8
 800704a:	4770      	bx	lr
 800704c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007050:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007054:	bf14      	ite	ne
 8007056:	f104 33ff 	addne.w	r3, r4, #4294967295
 800705a:	4623      	moveq	r3, r4
 800705c:	9304      	str	r3, [sp, #16]
 800705e:	9307      	str	r3, [sp, #28]
 8007060:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007064:	9002      	str	r0, [sp, #8]
 8007066:	9006      	str	r0, [sp, #24]
 8007068:	f8ad 3016 	strh.w	r3, [sp, #22]
 800706c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800706e:	ab21      	add	r3, sp, #132	@ 0x84
 8007070:	a902      	add	r1, sp, #8
 8007072:	4628      	mov	r0, r5
 8007074:	9301      	str	r3, [sp, #4]
 8007076:	f001 fb57 	bl	8008728 <_svfiprintf_r>
 800707a:	1c43      	adds	r3, r0, #1
 800707c:	bfbc      	itt	lt
 800707e:	238b      	movlt	r3, #139	@ 0x8b
 8007080:	602b      	strlt	r3, [r5, #0]
 8007082:	2c00      	cmp	r4, #0
 8007084:	d0dd      	beq.n	8007042 <sniprintf+0x16>
 8007086:	9b02      	ldr	r3, [sp, #8]
 8007088:	2200      	movs	r2, #0
 800708a:	701a      	strb	r2, [r3, #0]
 800708c:	e7d9      	b.n	8007042 <sniprintf+0x16>
 800708e:	bf00      	nop
 8007090:	20000020 	.word	0x20000020

08007094 <__sread>:
 8007094:	b510      	push	{r4, lr}
 8007096:	460c      	mov	r4, r1
 8007098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709c:	f000 f86c 	bl	8007178 <_read_r>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	bfab      	itete	ge
 80070a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80070a6:	89a3      	ldrhlt	r3, [r4, #12]
 80070a8:	181b      	addge	r3, r3, r0
 80070aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80070ae:	bfac      	ite	ge
 80070b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80070b2:	81a3      	strhlt	r3, [r4, #12]
 80070b4:	bd10      	pop	{r4, pc}

080070b6 <__swrite>:
 80070b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ba:	461f      	mov	r7, r3
 80070bc:	898b      	ldrh	r3, [r1, #12]
 80070be:	05db      	lsls	r3, r3, #23
 80070c0:	4605      	mov	r5, r0
 80070c2:	460c      	mov	r4, r1
 80070c4:	4616      	mov	r6, r2
 80070c6:	d505      	bpl.n	80070d4 <__swrite+0x1e>
 80070c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070cc:	2302      	movs	r3, #2
 80070ce:	2200      	movs	r2, #0
 80070d0:	f000 f840 	bl	8007154 <_lseek_r>
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070de:	81a3      	strh	r3, [r4, #12]
 80070e0:	4632      	mov	r2, r6
 80070e2:	463b      	mov	r3, r7
 80070e4:	4628      	mov	r0, r5
 80070e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070ea:	f000 b867 	b.w	80071bc <_write_r>

080070ee <__sseek>:
 80070ee:	b510      	push	{r4, lr}
 80070f0:	460c      	mov	r4, r1
 80070f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f6:	f000 f82d 	bl	8007154 <_lseek_r>
 80070fa:	1c43      	adds	r3, r0, #1
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	bf15      	itete	ne
 8007100:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007102:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007106:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800710a:	81a3      	strheq	r3, [r4, #12]
 800710c:	bf18      	it	ne
 800710e:	81a3      	strhne	r3, [r4, #12]
 8007110:	bd10      	pop	{r4, pc}

08007112 <__sclose>:
 8007112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007116:	f000 b80d 	b.w	8007134 <_close_r>

0800711a <memset>:
 800711a:	4402      	add	r2, r0
 800711c:	4603      	mov	r3, r0
 800711e:	4293      	cmp	r3, r2
 8007120:	d100      	bne.n	8007124 <memset+0xa>
 8007122:	4770      	bx	lr
 8007124:	f803 1b01 	strb.w	r1, [r3], #1
 8007128:	e7f9      	b.n	800711e <memset+0x4>
	...

0800712c <_localeconv_r>:
 800712c:	4800      	ldr	r0, [pc, #0]	@ (8007130 <_localeconv_r+0x4>)
 800712e:	4770      	bx	lr
 8007130:	20000160 	.word	0x20000160

08007134 <_close_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	4d06      	ldr	r5, [pc, #24]	@ (8007150 <_close_r+0x1c>)
 8007138:	2300      	movs	r3, #0
 800713a:	4604      	mov	r4, r0
 800713c:	4608      	mov	r0, r1
 800713e:	602b      	str	r3, [r5, #0]
 8007140:	f7fb f8a4 	bl	800228c <_close>
 8007144:	1c43      	adds	r3, r0, #1
 8007146:	d102      	bne.n	800714e <_close_r+0x1a>
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	b103      	cbz	r3, 800714e <_close_r+0x1a>
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	bd38      	pop	{r3, r4, r5, pc}
 8007150:	2000059c 	.word	0x2000059c

08007154 <_lseek_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	4d07      	ldr	r5, [pc, #28]	@ (8007174 <_lseek_r+0x20>)
 8007158:	4604      	mov	r4, r0
 800715a:	4608      	mov	r0, r1
 800715c:	4611      	mov	r1, r2
 800715e:	2200      	movs	r2, #0
 8007160:	602a      	str	r2, [r5, #0]
 8007162:	461a      	mov	r2, r3
 8007164:	f7fb f8b9 	bl	80022da <_lseek>
 8007168:	1c43      	adds	r3, r0, #1
 800716a:	d102      	bne.n	8007172 <_lseek_r+0x1e>
 800716c:	682b      	ldr	r3, [r5, #0]
 800716e:	b103      	cbz	r3, 8007172 <_lseek_r+0x1e>
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	bd38      	pop	{r3, r4, r5, pc}
 8007174:	2000059c 	.word	0x2000059c

08007178 <_read_r>:
 8007178:	b538      	push	{r3, r4, r5, lr}
 800717a:	4d07      	ldr	r5, [pc, #28]	@ (8007198 <_read_r+0x20>)
 800717c:	4604      	mov	r4, r0
 800717e:	4608      	mov	r0, r1
 8007180:	4611      	mov	r1, r2
 8007182:	2200      	movs	r2, #0
 8007184:	602a      	str	r2, [r5, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	f7fb f847 	bl	800221a <_read>
 800718c:	1c43      	adds	r3, r0, #1
 800718e:	d102      	bne.n	8007196 <_read_r+0x1e>
 8007190:	682b      	ldr	r3, [r5, #0]
 8007192:	b103      	cbz	r3, 8007196 <_read_r+0x1e>
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	bd38      	pop	{r3, r4, r5, pc}
 8007198:	2000059c 	.word	0x2000059c

0800719c <_sbrk_r>:
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	4d06      	ldr	r5, [pc, #24]	@ (80071b8 <_sbrk_r+0x1c>)
 80071a0:	2300      	movs	r3, #0
 80071a2:	4604      	mov	r4, r0
 80071a4:	4608      	mov	r0, r1
 80071a6:	602b      	str	r3, [r5, #0]
 80071a8:	f7fb f8a4 	bl	80022f4 <_sbrk>
 80071ac:	1c43      	adds	r3, r0, #1
 80071ae:	d102      	bne.n	80071b6 <_sbrk_r+0x1a>
 80071b0:	682b      	ldr	r3, [r5, #0]
 80071b2:	b103      	cbz	r3, 80071b6 <_sbrk_r+0x1a>
 80071b4:	6023      	str	r3, [r4, #0]
 80071b6:	bd38      	pop	{r3, r4, r5, pc}
 80071b8:	2000059c 	.word	0x2000059c

080071bc <_write_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	4d07      	ldr	r5, [pc, #28]	@ (80071dc <_write_r+0x20>)
 80071c0:	4604      	mov	r4, r0
 80071c2:	4608      	mov	r0, r1
 80071c4:	4611      	mov	r1, r2
 80071c6:	2200      	movs	r2, #0
 80071c8:	602a      	str	r2, [r5, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	f7fb f842 	bl	8002254 <_write>
 80071d0:	1c43      	adds	r3, r0, #1
 80071d2:	d102      	bne.n	80071da <_write_r+0x1e>
 80071d4:	682b      	ldr	r3, [r5, #0]
 80071d6:	b103      	cbz	r3, 80071da <_write_r+0x1e>
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	bd38      	pop	{r3, r4, r5, pc}
 80071dc:	2000059c 	.word	0x2000059c

080071e0 <__errno>:
 80071e0:	4b01      	ldr	r3, [pc, #4]	@ (80071e8 <__errno+0x8>)
 80071e2:	6818      	ldr	r0, [r3, #0]
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	20000020 	.word	0x20000020

080071ec <__libc_init_array>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	4d0d      	ldr	r5, [pc, #52]	@ (8007224 <__libc_init_array+0x38>)
 80071f0:	4c0d      	ldr	r4, [pc, #52]	@ (8007228 <__libc_init_array+0x3c>)
 80071f2:	1b64      	subs	r4, r4, r5
 80071f4:	10a4      	asrs	r4, r4, #2
 80071f6:	2600      	movs	r6, #0
 80071f8:	42a6      	cmp	r6, r4
 80071fa:	d109      	bne.n	8007210 <__libc_init_array+0x24>
 80071fc:	4d0b      	ldr	r5, [pc, #44]	@ (800722c <__libc_init_array+0x40>)
 80071fe:	4c0c      	ldr	r4, [pc, #48]	@ (8007230 <__libc_init_array+0x44>)
 8007200:	f001 ffa0 	bl	8009144 <_init>
 8007204:	1b64      	subs	r4, r4, r5
 8007206:	10a4      	asrs	r4, r4, #2
 8007208:	2600      	movs	r6, #0
 800720a:	42a6      	cmp	r6, r4
 800720c:	d105      	bne.n	800721a <__libc_init_array+0x2e>
 800720e:	bd70      	pop	{r4, r5, r6, pc}
 8007210:	f855 3b04 	ldr.w	r3, [r5], #4
 8007214:	4798      	blx	r3
 8007216:	3601      	adds	r6, #1
 8007218:	e7ee      	b.n	80071f8 <__libc_init_array+0xc>
 800721a:	f855 3b04 	ldr.w	r3, [r5], #4
 800721e:	4798      	blx	r3
 8007220:	3601      	adds	r6, #1
 8007222:	e7f2      	b.n	800720a <__libc_init_array+0x1e>
 8007224:	080095e8 	.word	0x080095e8
 8007228:	080095e8 	.word	0x080095e8
 800722c:	080095e8 	.word	0x080095e8
 8007230:	080095f0 	.word	0x080095f0

08007234 <__retarget_lock_init_recursive>:
 8007234:	4770      	bx	lr

08007236 <__retarget_lock_acquire_recursive>:
 8007236:	4770      	bx	lr

08007238 <__retarget_lock_release_recursive>:
 8007238:	4770      	bx	lr

0800723a <quorem>:
 800723a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723e:	6903      	ldr	r3, [r0, #16]
 8007240:	690c      	ldr	r4, [r1, #16]
 8007242:	42a3      	cmp	r3, r4
 8007244:	4607      	mov	r7, r0
 8007246:	db7e      	blt.n	8007346 <quorem+0x10c>
 8007248:	3c01      	subs	r4, #1
 800724a:	f101 0814 	add.w	r8, r1, #20
 800724e:	00a3      	lsls	r3, r4, #2
 8007250:	f100 0514 	add.w	r5, r0, #20
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800725a:	9301      	str	r3, [sp, #4]
 800725c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007260:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007264:	3301      	adds	r3, #1
 8007266:	429a      	cmp	r2, r3
 8007268:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800726c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007270:	d32e      	bcc.n	80072d0 <quorem+0x96>
 8007272:	f04f 0a00 	mov.w	sl, #0
 8007276:	46c4      	mov	ip, r8
 8007278:	46ae      	mov	lr, r5
 800727a:	46d3      	mov	fp, sl
 800727c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007280:	b298      	uxth	r0, r3
 8007282:	fb06 a000 	mla	r0, r6, r0, sl
 8007286:	0c02      	lsrs	r2, r0, #16
 8007288:	0c1b      	lsrs	r3, r3, #16
 800728a:	fb06 2303 	mla	r3, r6, r3, r2
 800728e:	f8de 2000 	ldr.w	r2, [lr]
 8007292:	b280      	uxth	r0, r0
 8007294:	b292      	uxth	r2, r2
 8007296:	1a12      	subs	r2, r2, r0
 8007298:	445a      	add	r2, fp
 800729a:	f8de 0000 	ldr.w	r0, [lr]
 800729e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80072a8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80072ac:	b292      	uxth	r2, r2
 80072ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80072b2:	45e1      	cmp	r9, ip
 80072b4:	f84e 2b04 	str.w	r2, [lr], #4
 80072b8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80072bc:	d2de      	bcs.n	800727c <quorem+0x42>
 80072be:	9b00      	ldr	r3, [sp, #0]
 80072c0:	58eb      	ldr	r3, [r5, r3]
 80072c2:	b92b      	cbnz	r3, 80072d0 <quorem+0x96>
 80072c4:	9b01      	ldr	r3, [sp, #4]
 80072c6:	3b04      	subs	r3, #4
 80072c8:	429d      	cmp	r5, r3
 80072ca:	461a      	mov	r2, r3
 80072cc:	d32f      	bcc.n	800732e <quorem+0xf4>
 80072ce:	613c      	str	r4, [r7, #16]
 80072d0:	4638      	mov	r0, r7
 80072d2:	f001 f8c5 	bl	8008460 <__mcmp>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	db25      	blt.n	8007326 <quorem+0xec>
 80072da:	4629      	mov	r1, r5
 80072dc:	2000      	movs	r0, #0
 80072de:	f858 2b04 	ldr.w	r2, [r8], #4
 80072e2:	f8d1 c000 	ldr.w	ip, [r1]
 80072e6:	fa1f fe82 	uxth.w	lr, r2
 80072ea:	fa1f f38c 	uxth.w	r3, ip
 80072ee:	eba3 030e 	sub.w	r3, r3, lr
 80072f2:	4403      	add	r3, r0
 80072f4:	0c12      	lsrs	r2, r2, #16
 80072f6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80072fa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80072fe:	b29b      	uxth	r3, r3
 8007300:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007304:	45c1      	cmp	r9, r8
 8007306:	f841 3b04 	str.w	r3, [r1], #4
 800730a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800730e:	d2e6      	bcs.n	80072de <quorem+0xa4>
 8007310:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007314:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007318:	b922      	cbnz	r2, 8007324 <quorem+0xea>
 800731a:	3b04      	subs	r3, #4
 800731c:	429d      	cmp	r5, r3
 800731e:	461a      	mov	r2, r3
 8007320:	d30b      	bcc.n	800733a <quorem+0x100>
 8007322:	613c      	str	r4, [r7, #16]
 8007324:	3601      	adds	r6, #1
 8007326:	4630      	mov	r0, r6
 8007328:	b003      	add	sp, #12
 800732a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800732e:	6812      	ldr	r2, [r2, #0]
 8007330:	3b04      	subs	r3, #4
 8007332:	2a00      	cmp	r2, #0
 8007334:	d1cb      	bne.n	80072ce <quorem+0x94>
 8007336:	3c01      	subs	r4, #1
 8007338:	e7c6      	b.n	80072c8 <quorem+0x8e>
 800733a:	6812      	ldr	r2, [r2, #0]
 800733c:	3b04      	subs	r3, #4
 800733e:	2a00      	cmp	r2, #0
 8007340:	d1ef      	bne.n	8007322 <quorem+0xe8>
 8007342:	3c01      	subs	r4, #1
 8007344:	e7ea      	b.n	800731c <quorem+0xe2>
 8007346:	2000      	movs	r0, #0
 8007348:	e7ee      	b.n	8007328 <quorem+0xee>
 800734a:	0000      	movs	r0, r0
 800734c:	0000      	movs	r0, r0
	...

08007350 <_dtoa_r>:
 8007350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	69c7      	ldr	r7, [r0, #28]
 8007356:	b099      	sub	sp, #100	@ 0x64
 8007358:	ed8d 0b02 	vstr	d0, [sp, #8]
 800735c:	ec55 4b10 	vmov	r4, r5, d0
 8007360:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007362:	9109      	str	r1, [sp, #36]	@ 0x24
 8007364:	4683      	mov	fp, r0
 8007366:	920e      	str	r2, [sp, #56]	@ 0x38
 8007368:	9313      	str	r3, [sp, #76]	@ 0x4c
 800736a:	b97f      	cbnz	r7, 800738c <_dtoa_r+0x3c>
 800736c:	2010      	movs	r0, #16
 800736e:	f7ff f885 	bl	800647c <malloc>
 8007372:	4602      	mov	r2, r0
 8007374:	f8cb 001c 	str.w	r0, [fp, #28]
 8007378:	b920      	cbnz	r0, 8007384 <_dtoa_r+0x34>
 800737a:	4ba7      	ldr	r3, [pc, #668]	@ (8007618 <_dtoa_r+0x2c8>)
 800737c:	21ef      	movs	r1, #239	@ 0xef
 800737e:	48a7      	ldr	r0, [pc, #668]	@ (800761c <_dtoa_r+0x2cc>)
 8007380:	f001 fba2 	bl	8008ac8 <__assert_func>
 8007384:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007388:	6007      	str	r7, [r0, #0]
 800738a:	60c7      	str	r7, [r0, #12]
 800738c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007390:	6819      	ldr	r1, [r3, #0]
 8007392:	b159      	cbz	r1, 80073ac <_dtoa_r+0x5c>
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	604a      	str	r2, [r1, #4]
 8007398:	2301      	movs	r3, #1
 800739a:	4093      	lsls	r3, r2
 800739c:	608b      	str	r3, [r1, #8]
 800739e:	4658      	mov	r0, fp
 80073a0:	f000 fe24 	bl	8007fec <_Bfree>
 80073a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	1e2b      	subs	r3, r5, #0
 80073ae:	bfb9      	ittee	lt
 80073b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80073b4:	9303      	strlt	r3, [sp, #12]
 80073b6:	2300      	movge	r3, #0
 80073b8:	6033      	strge	r3, [r6, #0]
 80073ba:	9f03      	ldr	r7, [sp, #12]
 80073bc:	4b98      	ldr	r3, [pc, #608]	@ (8007620 <_dtoa_r+0x2d0>)
 80073be:	bfbc      	itt	lt
 80073c0:	2201      	movlt	r2, #1
 80073c2:	6032      	strlt	r2, [r6, #0]
 80073c4:	43bb      	bics	r3, r7
 80073c6:	d112      	bne.n	80073ee <_dtoa_r+0x9e>
 80073c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80073ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80073d4:	4323      	orrs	r3, r4
 80073d6:	f000 854d 	beq.w	8007e74 <_dtoa_r+0xb24>
 80073da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80073dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007634 <_dtoa_r+0x2e4>
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 854f 	beq.w	8007e84 <_dtoa_r+0xb34>
 80073e6:	f10a 0303 	add.w	r3, sl, #3
 80073ea:	f000 bd49 	b.w	8007e80 <_dtoa_r+0xb30>
 80073ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073f2:	2200      	movs	r2, #0
 80073f4:	ec51 0b17 	vmov	r0, r1, d7
 80073f8:	2300      	movs	r3, #0
 80073fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80073fe:	f7f9 fb83 	bl	8000b08 <__aeabi_dcmpeq>
 8007402:	4680      	mov	r8, r0
 8007404:	b158      	cbz	r0, 800741e <_dtoa_r+0xce>
 8007406:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007408:	2301      	movs	r3, #1
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800740e:	b113      	cbz	r3, 8007416 <_dtoa_r+0xc6>
 8007410:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007412:	4b84      	ldr	r3, [pc, #528]	@ (8007624 <_dtoa_r+0x2d4>)
 8007414:	6013      	str	r3, [r2, #0]
 8007416:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007638 <_dtoa_r+0x2e8>
 800741a:	f000 bd33 	b.w	8007e84 <_dtoa_r+0xb34>
 800741e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007422:	aa16      	add	r2, sp, #88	@ 0x58
 8007424:	a917      	add	r1, sp, #92	@ 0x5c
 8007426:	4658      	mov	r0, fp
 8007428:	f001 f8ca 	bl	80085c0 <__d2b>
 800742c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007430:	4681      	mov	r9, r0
 8007432:	2e00      	cmp	r6, #0
 8007434:	d077      	beq.n	8007526 <_dtoa_r+0x1d6>
 8007436:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007438:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800743c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007444:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007448:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800744c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007450:	4619      	mov	r1, r3
 8007452:	2200      	movs	r2, #0
 8007454:	4b74      	ldr	r3, [pc, #464]	@ (8007628 <_dtoa_r+0x2d8>)
 8007456:	f7f8 ff37 	bl	80002c8 <__aeabi_dsub>
 800745a:	a369      	add	r3, pc, #420	@ (adr r3, 8007600 <_dtoa_r+0x2b0>)
 800745c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007460:	f7f9 f8ea 	bl	8000638 <__aeabi_dmul>
 8007464:	a368      	add	r3, pc, #416	@ (adr r3, 8007608 <_dtoa_r+0x2b8>)
 8007466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746a:	f7f8 ff2f 	bl	80002cc <__adddf3>
 800746e:	4604      	mov	r4, r0
 8007470:	4630      	mov	r0, r6
 8007472:	460d      	mov	r5, r1
 8007474:	f7f9 f876 	bl	8000564 <__aeabi_i2d>
 8007478:	a365      	add	r3, pc, #404	@ (adr r3, 8007610 <_dtoa_r+0x2c0>)
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f7f9 f8db 	bl	8000638 <__aeabi_dmul>
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	4620      	mov	r0, r4
 8007488:	4629      	mov	r1, r5
 800748a:	f7f8 ff1f 	bl	80002cc <__adddf3>
 800748e:	4604      	mov	r4, r0
 8007490:	460d      	mov	r5, r1
 8007492:	f7f9 fb81 	bl	8000b98 <__aeabi_d2iz>
 8007496:	2200      	movs	r2, #0
 8007498:	4607      	mov	r7, r0
 800749a:	2300      	movs	r3, #0
 800749c:	4620      	mov	r0, r4
 800749e:	4629      	mov	r1, r5
 80074a0:	f7f9 fb3c 	bl	8000b1c <__aeabi_dcmplt>
 80074a4:	b140      	cbz	r0, 80074b8 <_dtoa_r+0x168>
 80074a6:	4638      	mov	r0, r7
 80074a8:	f7f9 f85c 	bl	8000564 <__aeabi_i2d>
 80074ac:	4622      	mov	r2, r4
 80074ae:	462b      	mov	r3, r5
 80074b0:	f7f9 fb2a 	bl	8000b08 <__aeabi_dcmpeq>
 80074b4:	b900      	cbnz	r0, 80074b8 <_dtoa_r+0x168>
 80074b6:	3f01      	subs	r7, #1
 80074b8:	2f16      	cmp	r7, #22
 80074ba:	d851      	bhi.n	8007560 <_dtoa_r+0x210>
 80074bc:	4b5b      	ldr	r3, [pc, #364]	@ (800762c <_dtoa_r+0x2dc>)
 80074be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074ca:	f7f9 fb27 	bl	8000b1c <__aeabi_dcmplt>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d048      	beq.n	8007564 <_dtoa_r+0x214>
 80074d2:	3f01      	subs	r7, #1
 80074d4:	2300      	movs	r3, #0
 80074d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80074d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80074da:	1b9b      	subs	r3, r3, r6
 80074dc:	1e5a      	subs	r2, r3, #1
 80074de:	bf44      	itt	mi
 80074e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80074e4:	2300      	movmi	r3, #0
 80074e6:	9208      	str	r2, [sp, #32]
 80074e8:	bf54      	ite	pl
 80074ea:	f04f 0800 	movpl.w	r8, #0
 80074ee:	9308      	strmi	r3, [sp, #32]
 80074f0:	2f00      	cmp	r7, #0
 80074f2:	db39      	blt.n	8007568 <_dtoa_r+0x218>
 80074f4:	9b08      	ldr	r3, [sp, #32]
 80074f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80074f8:	443b      	add	r3, r7
 80074fa:	9308      	str	r3, [sp, #32]
 80074fc:	2300      	movs	r3, #0
 80074fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007502:	2b09      	cmp	r3, #9
 8007504:	d864      	bhi.n	80075d0 <_dtoa_r+0x280>
 8007506:	2b05      	cmp	r3, #5
 8007508:	bfc4      	itt	gt
 800750a:	3b04      	subgt	r3, #4
 800750c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800750e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007510:	f1a3 0302 	sub.w	r3, r3, #2
 8007514:	bfcc      	ite	gt
 8007516:	2400      	movgt	r4, #0
 8007518:	2401      	movle	r4, #1
 800751a:	2b03      	cmp	r3, #3
 800751c:	d863      	bhi.n	80075e6 <_dtoa_r+0x296>
 800751e:	e8df f003 	tbb	[pc, r3]
 8007522:	372a      	.short	0x372a
 8007524:	5535      	.short	0x5535
 8007526:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800752a:	441e      	add	r6, r3
 800752c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007530:	2b20      	cmp	r3, #32
 8007532:	bfc1      	itttt	gt
 8007534:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007538:	409f      	lslgt	r7, r3
 800753a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800753e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007542:	bfd6      	itet	le
 8007544:	f1c3 0320 	rsble	r3, r3, #32
 8007548:	ea47 0003 	orrgt.w	r0, r7, r3
 800754c:	fa04 f003 	lslle.w	r0, r4, r3
 8007550:	f7f8 fff8 	bl	8000544 <__aeabi_ui2d>
 8007554:	2201      	movs	r2, #1
 8007556:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800755a:	3e01      	subs	r6, #1
 800755c:	9214      	str	r2, [sp, #80]	@ 0x50
 800755e:	e777      	b.n	8007450 <_dtoa_r+0x100>
 8007560:	2301      	movs	r3, #1
 8007562:	e7b8      	b.n	80074d6 <_dtoa_r+0x186>
 8007564:	9012      	str	r0, [sp, #72]	@ 0x48
 8007566:	e7b7      	b.n	80074d8 <_dtoa_r+0x188>
 8007568:	427b      	negs	r3, r7
 800756a:	930a      	str	r3, [sp, #40]	@ 0x28
 800756c:	2300      	movs	r3, #0
 800756e:	eba8 0807 	sub.w	r8, r8, r7
 8007572:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007574:	e7c4      	b.n	8007500 <_dtoa_r+0x1b0>
 8007576:	2300      	movs	r3, #0
 8007578:	930b      	str	r3, [sp, #44]	@ 0x2c
 800757a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800757c:	2b00      	cmp	r3, #0
 800757e:	dc35      	bgt.n	80075ec <_dtoa_r+0x29c>
 8007580:	2301      	movs	r3, #1
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	9307      	str	r3, [sp, #28]
 8007586:	461a      	mov	r2, r3
 8007588:	920e      	str	r2, [sp, #56]	@ 0x38
 800758a:	e00b      	b.n	80075a4 <_dtoa_r+0x254>
 800758c:	2301      	movs	r3, #1
 800758e:	e7f3      	b.n	8007578 <_dtoa_r+0x228>
 8007590:	2300      	movs	r3, #0
 8007592:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007594:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007596:	18fb      	adds	r3, r7, r3
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	3301      	adds	r3, #1
 800759c:	2b01      	cmp	r3, #1
 800759e:	9307      	str	r3, [sp, #28]
 80075a0:	bfb8      	it	lt
 80075a2:	2301      	movlt	r3, #1
 80075a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80075a8:	2100      	movs	r1, #0
 80075aa:	2204      	movs	r2, #4
 80075ac:	f102 0514 	add.w	r5, r2, #20
 80075b0:	429d      	cmp	r5, r3
 80075b2:	d91f      	bls.n	80075f4 <_dtoa_r+0x2a4>
 80075b4:	6041      	str	r1, [r0, #4]
 80075b6:	4658      	mov	r0, fp
 80075b8:	f000 fcd8 	bl	8007f6c <_Balloc>
 80075bc:	4682      	mov	sl, r0
 80075be:	2800      	cmp	r0, #0
 80075c0:	d13c      	bne.n	800763c <_dtoa_r+0x2ec>
 80075c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007630 <_dtoa_r+0x2e0>)
 80075c4:	4602      	mov	r2, r0
 80075c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80075ca:	e6d8      	b.n	800737e <_dtoa_r+0x2e>
 80075cc:	2301      	movs	r3, #1
 80075ce:	e7e0      	b.n	8007592 <_dtoa_r+0x242>
 80075d0:	2401      	movs	r4, #1
 80075d2:	2300      	movs	r3, #0
 80075d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80075d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80075d8:	f04f 33ff 	mov.w	r3, #4294967295
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	9307      	str	r3, [sp, #28]
 80075e0:	2200      	movs	r2, #0
 80075e2:	2312      	movs	r3, #18
 80075e4:	e7d0      	b.n	8007588 <_dtoa_r+0x238>
 80075e6:	2301      	movs	r3, #1
 80075e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075ea:	e7f5      	b.n	80075d8 <_dtoa_r+0x288>
 80075ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	9307      	str	r3, [sp, #28]
 80075f2:	e7d7      	b.n	80075a4 <_dtoa_r+0x254>
 80075f4:	3101      	adds	r1, #1
 80075f6:	0052      	lsls	r2, r2, #1
 80075f8:	e7d8      	b.n	80075ac <_dtoa_r+0x25c>
 80075fa:	bf00      	nop
 80075fc:	f3af 8000 	nop.w
 8007600:	636f4361 	.word	0x636f4361
 8007604:	3fd287a7 	.word	0x3fd287a7
 8007608:	8b60c8b3 	.word	0x8b60c8b3
 800760c:	3fc68a28 	.word	0x3fc68a28
 8007610:	509f79fb 	.word	0x509f79fb
 8007614:	3fd34413 	.word	0x3fd34413
 8007618:	080092b1 	.word	0x080092b1
 800761c:	080092c8 	.word	0x080092c8
 8007620:	7ff00000 	.word	0x7ff00000
 8007624:	08009281 	.word	0x08009281
 8007628:	3ff80000 	.word	0x3ff80000
 800762c:	080093c0 	.word	0x080093c0
 8007630:	08009320 	.word	0x08009320
 8007634:	080092ad 	.word	0x080092ad
 8007638:	08009280 	.word	0x08009280
 800763c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007640:	6018      	str	r0, [r3, #0]
 8007642:	9b07      	ldr	r3, [sp, #28]
 8007644:	2b0e      	cmp	r3, #14
 8007646:	f200 80a4 	bhi.w	8007792 <_dtoa_r+0x442>
 800764a:	2c00      	cmp	r4, #0
 800764c:	f000 80a1 	beq.w	8007792 <_dtoa_r+0x442>
 8007650:	2f00      	cmp	r7, #0
 8007652:	dd33      	ble.n	80076bc <_dtoa_r+0x36c>
 8007654:	4bad      	ldr	r3, [pc, #692]	@ (800790c <_dtoa_r+0x5bc>)
 8007656:	f007 020f 	and.w	r2, r7, #15
 800765a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800765e:	ed93 7b00 	vldr	d7, [r3]
 8007662:	05f8      	lsls	r0, r7, #23
 8007664:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007668:	ea4f 1427 	mov.w	r4, r7, asr #4
 800766c:	d516      	bpl.n	800769c <_dtoa_r+0x34c>
 800766e:	4ba8      	ldr	r3, [pc, #672]	@ (8007910 <_dtoa_r+0x5c0>)
 8007670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007674:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007678:	f7f9 f908 	bl	800088c <__aeabi_ddiv>
 800767c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007680:	f004 040f 	and.w	r4, r4, #15
 8007684:	2603      	movs	r6, #3
 8007686:	4da2      	ldr	r5, [pc, #648]	@ (8007910 <_dtoa_r+0x5c0>)
 8007688:	b954      	cbnz	r4, 80076a0 <_dtoa_r+0x350>
 800768a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800768e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007692:	f7f9 f8fb 	bl	800088c <__aeabi_ddiv>
 8007696:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800769a:	e028      	b.n	80076ee <_dtoa_r+0x39e>
 800769c:	2602      	movs	r6, #2
 800769e:	e7f2      	b.n	8007686 <_dtoa_r+0x336>
 80076a0:	07e1      	lsls	r1, r4, #31
 80076a2:	d508      	bpl.n	80076b6 <_dtoa_r+0x366>
 80076a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076ac:	f7f8 ffc4 	bl	8000638 <__aeabi_dmul>
 80076b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076b4:	3601      	adds	r6, #1
 80076b6:	1064      	asrs	r4, r4, #1
 80076b8:	3508      	adds	r5, #8
 80076ba:	e7e5      	b.n	8007688 <_dtoa_r+0x338>
 80076bc:	f000 80d2 	beq.w	8007864 <_dtoa_r+0x514>
 80076c0:	427c      	negs	r4, r7
 80076c2:	4b92      	ldr	r3, [pc, #584]	@ (800790c <_dtoa_r+0x5bc>)
 80076c4:	4d92      	ldr	r5, [pc, #584]	@ (8007910 <_dtoa_r+0x5c0>)
 80076c6:	f004 020f 	and.w	r2, r4, #15
 80076ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076d6:	f7f8 ffaf 	bl	8000638 <__aeabi_dmul>
 80076da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076de:	1124      	asrs	r4, r4, #4
 80076e0:	2300      	movs	r3, #0
 80076e2:	2602      	movs	r6, #2
 80076e4:	2c00      	cmp	r4, #0
 80076e6:	f040 80b2 	bne.w	800784e <_dtoa_r+0x4fe>
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1d3      	bne.n	8007696 <_dtoa_r+0x346>
 80076ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80076f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 80b7 	beq.w	8007868 <_dtoa_r+0x518>
 80076fa:	4b86      	ldr	r3, [pc, #536]	@ (8007914 <_dtoa_r+0x5c4>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	4620      	mov	r0, r4
 8007700:	4629      	mov	r1, r5
 8007702:	f7f9 fa0b 	bl	8000b1c <__aeabi_dcmplt>
 8007706:	2800      	cmp	r0, #0
 8007708:	f000 80ae 	beq.w	8007868 <_dtoa_r+0x518>
 800770c:	9b07      	ldr	r3, [sp, #28]
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 80aa 	beq.w	8007868 <_dtoa_r+0x518>
 8007714:	9b00      	ldr	r3, [sp, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	dd37      	ble.n	800778a <_dtoa_r+0x43a>
 800771a:	1e7b      	subs	r3, r7, #1
 800771c:	9304      	str	r3, [sp, #16]
 800771e:	4620      	mov	r0, r4
 8007720:	4b7d      	ldr	r3, [pc, #500]	@ (8007918 <_dtoa_r+0x5c8>)
 8007722:	2200      	movs	r2, #0
 8007724:	4629      	mov	r1, r5
 8007726:	f7f8 ff87 	bl	8000638 <__aeabi_dmul>
 800772a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800772e:	9c00      	ldr	r4, [sp, #0]
 8007730:	3601      	adds	r6, #1
 8007732:	4630      	mov	r0, r6
 8007734:	f7f8 ff16 	bl	8000564 <__aeabi_i2d>
 8007738:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800773c:	f7f8 ff7c 	bl	8000638 <__aeabi_dmul>
 8007740:	4b76      	ldr	r3, [pc, #472]	@ (800791c <_dtoa_r+0x5cc>)
 8007742:	2200      	movs	r2, #0
 8007744:	f7f8 fdc2 	bl	80002cc <__adddf3>
 8007748:	4605      	mov	r5, r0
 800774a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800774e:	2c00      	cmp	r4, #0
 8007750:	f040 808d 	bne.w	800786e <_dtoa_r+0x51e>
 8007754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007758:	4b71      	ldr	r3, [pc, #452]	@ (8007920 <_dtoa_r+0x5d0>)
 800775a:	2200      	movs	r2, #0
 800775c:	f7f8 fdb4 	bl	80002c8 <__aeabi_dsub>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007768:	462a      	mov	r2, r5
 800776a:	4633      	mov	r3, r6
 800776c:	f7f9 f9f4 	bl	8000b58 <__aeabi_dcmpgt>
 8007770:	2800      	cmp	r0, #0
 8007772:	f040 828b 	bne.w	8007c8c <_dtoa_r+0x93c>
 8007776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800777a:	462a      	mov	r2, r5
 800777c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007780:	f7f9 f9cc 	bl	8000b1c <__aeabi_dcmplt>
 8007784:	2800      	cmp	r0, #0
 8007786:	f040 8128 	bne.w	80079da <_dtoa_r+0x68a>
 800778a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800778e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007792:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007794:	2b00      	cmp	r3, #0
 8007796:	f2c0 815a 	blt.w	8007a4e <_dtoa_r+0x6fe>
 800779a:	2f0e      	cmp	r7, #14
 800779c:	f300 8157 	bgt.w	8007a4e <_dtoa_r+0x6fe>
 80077a0:	4b5a      	ldr	r3, [pc, #360]	@ (800790c <_dtoa_r+0x5bc>)
 80077a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80077a6:	ed93 7b00 	vldr	d7, [r3]
 80077aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	ed8d 7b00 	vstr	d7, [sp]
 80077b2:	da03      	bge.n	80077bc <_dtoa_r+0x46c>
 80077b4:	9b07      	ldr	r3, [sp, #28]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f340 8101 	ble.w	80079be <_dtoa_r+0x66e>
 80077bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80077c0:	4656      	mov	r6, sl
 80077c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077c6:	4620      	mov	r0, r4
 80077c8:	4629      	mov	r1, r5
 80077ca:	f7f9 f85f 	bl	800088c <__aeabi_ddiv>
 80077ce:	f7f9 f9e3 	bl	8000b98 <__aeabi_d2iz>
 80077d2:	4680      	mov	r8, r0
 80077d4:	f7f8 fec6 	bl	8000564 <__aeabi_i2d>
 80077d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077dc:	f7f8 ff2c 	bl	8000638 <__aeabi_dmul>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4620      	mov	r0, r4
 80077e6:	4629      	mov	r1, r5
 80077e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80077ec:	f7f8 fd6c 	bl	80002c8 <__aeabi_dsub>
 80077f0:	f806 4b01 	strb.w	r4, [r6], #1
 80077f4:	9d07      	ldr	r5, [sp, #28]
 80077f6:	eba6 040a 	sub.w	r4, r6, sl
 80077fa:	42a5      	cmp	r5, r4
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	f040 8117 	bne.w	8007a32 <_dtoa_r+0x6e2>
 8007804:	f7f8 fd62 	bl	80002cc <__adddf3>
 8007808:	e9dd 2300 	ldrd	r2, r3, [sp]
 800780c:	4604      	mov	r4, r0
 800780e:	460d      	mov	r5, r1
 8007810:	f7f9 f9a2 	bl	8000b58 <__aeabi_dcmpgt>
 8007814:	2800      	cmp	r0, #0
 8007816:	f040 80f9 	bne.w	8007a0c <_dtoa_r+0x6bc>
 800781a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800781e:	4620      	mov	r0, r4
 8007820:	4629      	mov	r1, r5
 8007822:	f7f9 f971 	bl	8000b08 <__aeabi_dcmpeq>
 8007826:	b118      	cbz	r0, 8007830 <_dtoa_r+0x4e0>
 8007828:	f018 0f01 	tst.w	r8, #1
 800782c:	f040 80ee 	bne.w	8007a0c <_dtoa_r+0x6bc>
 8007830:	4649      	mov	r1, r9
 8007832:	4658      	mov	r0, fp
 8007834:	f000 fbda 	bl	8007fec <_Bfree>
 8007838:	2300      	movs	r3, #0
 800783a:	7033      	strb	r3, [r6, #0]
 800783c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800783e:	3701      	adds	r7, #1
 8007840:	601f      	str	r7, [r3, #0]
 8007842:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 831d 	beq.w	8007e84 <_dtoa_r+0xb34>
 800784a:	601e      	str	r6, [r3, #0]
 800784c:	e31a      	b.n	8007e84 <_dtoa_r+0xb34>
 800784e:	07e2      	lsls	r2, r4, #31
 8007850:	d505      	bpl.n	800785e <_dtoa_r+0x50e>
 8007852:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007856:	f7f8 feef 	bl	8000638 <__aeabi_dmul>
 800785a:	3601      	adds	r6, #1
 800785c:	2301      	movs	r3, #1
 800785e:	1064      	asrs	r4, r4, #1
 8007860:	3508      	adds	r5, #8
 8007862:	e73f      	b.n	80076e4 <_dtoa_r+0x394>
 8007864:	2602      	movs	r6, #2
 8007866:	e742      	b.n	80076ee <_dtoa_r+0x39e>
 8007868:	9c07      	ldr	r4, [sp, #28]
 800786a:	9704      	str	r7, [sp, #16]
 800786c:	e761      	b.n	8007732 <_dtoa_r+0x3e2>
 800786e:	4b27      	ldr	r3, [pc, #156]	@ (800790c <_dtoa_r+0x5bc>)
 8007870:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007872:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007876:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800787a:	4454      	add	r4, sl
 800787c:	2900      	cmp	r1, #0
 800787e:	d053      	beq.n	8007928 <_dtoa_r+0x5d8>
 8007880:	4928      	ldr	r1, [pc, #160]	@ (8007924 <_dtoa_r+0x5d4>)
 8007882:	2000      	movs	r0, #0
 8007884:	f7f9 f802 	bl	800088c <__aeabi_ddiv>
 8007888:	4633      	mov	r3, r6
 800788a:	462a      	mov	r2, r5
 800788c:	f7f8 fd1c 	bl	80002c8 <__aeabi_dsub>
 8007890:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007894:	4656      	mov	r6, sl
 8007896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800789a:	f7f9 f97d 	bl	8000b98 <__aeabi_d2iz>
 800789e:	4605      	mov	r5, r0
 80078a0:	f7f8 fe60 	bl	8000564 <__aeabi_i2d>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ac:	f7f8 fd0c 	bl	80002c8 <__aeabi_dsub>
 80078b0:	3530      	adds	r5, #48	@ 0x30
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078ba:	f806 5b01 	strb.w	r5, [r6], #1
 80078be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078c2:	f7f9 f92b 	bl	8000b1c <__aeabi_dcmplt>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d171      	bne.n	80079ae <_dtoa_r+0x65e>
 80078ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078ce:	4911      	ldr	r1, [pc, #68]	@ (8007914 <_dtoa_r+0x5c4>)
 80078d0:	2000      	movs	r0, #0
 80078d2:	f7f8 fcf9 	bl	80002c8 <__aeabi_dsub>
 80078d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078da:	f7f9 f91f 	bl	8000b1c <__aeabi_dcmplt>
 80078de:	2800      	cmp	r0, #0
 80078e0:	f040 8095 	bne.w	8007a0e <_dtoa_r+0x6be>
 80078e4:	42a6      	cmp	r6, r4
 80078e6:	f43f af50 	beq.w	800778a <_dtoa_r+0x43a>
 80078ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007918 <_dtoa_r+0x5c8>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	f7f8 fea1 	bl	8000638 <__aeabi_dmul>
 80078f6:	4b08      	ldr	r3, [pc, #32]	@ (8007918 <_dtoa_r+0x5c8>)
 80078f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078fc:	2200      	movs	r2, #0
 80078fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007902:	f7f8 fe99 	bl	8000638 <__aeabi_dmul>
 8007906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800790a:	e7c4      	b.n	8007896 <_dtoa_r+0x546>
 800790c:	080093c0 	.word	0x080093c0
 8007910:	08009398 	.word	0x08009398
 8007914:	3ff00000 	.word	0x3ff00000
 8007918:	40240000 	.word	0x40240000
 800791c:	401c0000 	.word	0x401c0000
 8007920:	40140000 	.word	0x40140000
 8007924:	3fe00000 	.word	0x3fe00000
 8007928:	4631      	mov	r1, r6
 800792a:	4628      	mov	r0, r5
 800792c:	f7f8 fe84 	bl	8000638 <__aeabi_dmul>
 8007930:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007934:	9415      	str	r4, [sp, #84]	@ 0x54
 8007936:	4656      	mov	r6, sl
 8007938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800793c:	f7f9 f92c 	bl	8000b98 <__aeabi_d2iz>
 8007940:	4605      	mov	r5, r0
 8007942:	f7f8 fe0f 	bl	8000564 <__aeabi_i2d>
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800794e:	f7f8 fcbb 	bl	80002c8 <__aeabi_dsub>
 8007952:	3530      	adds	r5, #48	@ 0x30
 8007954:	f806 5b01 	strb.w	r5, [r6], #1
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	42a6      	cmp	r6, r4
 800795e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007962:	f04f 0200 	mov.w	r2, #0
 8007966:	d124      	bne.n	80079b2 <_dtoa_r+0x662>
 8007968:	4bac      	ldr	r3, [pc, #688]	@ (8007c1c <_dtoa_r+0x8cc>)
 800796a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800796e:	f7f8 fcad 	bl	80002cc <__adddf3>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800797a:	f7f9 f8ed 	bl	8000b58 <__aeabi_dcmpgt>
 800797e:	2800      	cmp	r0, #0
 8007980:	d145      	bne.n	8007a0e <_dtoa_r+0x6be>
 8007982:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007986:	49a5      	ldr	r1, [pc, #660]	@ (8007c1c <_dtoa_r+0x8cc>)
 8007988:	2000      	movs	r0, #0
 800798a:	f7f8 fc9d 	bl	80002c8 <__aeabi_dsub>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007996:	f7f9 f8c1 	bl	8000b1c <__aeabi_dcmplt>
 800799a:	2800      	cmp	r0, #0
 800799c:	f43f aef5 	beq.w	800778a <_dtoa_r+0x43a>
 80079a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80079a2:	1e73      	subs	r3, r6, #1
 80079a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80079a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80079aa:	2b30      	cmp	r3, #48	@ 0x30
 80079ac:	d0f8      	beq.n	80079a0 <_dtoa_r+0x650>
 80079ae:	9f04      	ldr	r7, [sp, #16]
 80079b0:	e73e      	b.n	8007830 <_dtoa_r+0x4e0>
 80079b2:	4b9b      	ldr	r3, [pc, #620]	@ (8007c20 <_dtoa_r+0x8d0>)
 80079b4:	f7f8 fe40 	bl	8000638 <__aeabi_dmul>
 80079b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079bc:	e7bc      	b.n	8007938 <_dtoa_r+0x5e8>
 80079be:	d10c      	bne.n	80079da <_dtoa_r+0x68a>
 80079c0:	4b98      	ldr	r3, [pc, #608]	@ (8007c24 <_dtoa_r+0x8d4>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079c8:	f7f8 fe36 	bl	8000638 <__aeabi_dmul>
 80079cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079d0:	f7f9 f8b8 	bl	8000b44 <__aeabi_dcmpge>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	f000 8157 	beq.w	8007c88 <_dtoa_r+0x938>
 80079da:	2400      	movs	r4, #0
 80079dc:	4625      	mov	r5, r4
 80079de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079e0:	43db      	mvns	r3, r3
 80079e2:	9304      	str	r3, [sp, #16]
 80079e4:	4656      	mov	r6, sl
 80079e6:	2700      	movs	r7, #0
 80079e8:	4621      	mov	r1, r4
 80079ea:	4658      	mov	r0, fp
 80079ec:	f000 fafe 	bl	8007fec <_Bfree>
 80079f0:	2d00      	cmp	r5, #0
 80079f2:	d0dc      	beq.n	80079ae <_dtoa_r+0x65e>
 80079f4:	b12f      	cbz	r7, 8007a02 <_dtoa_r+0x6b2>
 80079f6:	42af      	cmp	r7, r5
 80079f8:	d003      	beq.n	8007a02 <_dtoa_r+0x6b2>
 80079fa:	4639      	mov	r1, r7
 80079fc:	4658      	mov	r0, fp
 80079fe:	f000 faf5 	bl	8007fec <_Bfree>
 8007a02:	4629      	mov	r1, r5
 8007a04:	4658      	mov	r0, fp
 8007a06:	f000 faf1 	bl	8007fec <_Bfree>
 8007a0a:	e7d0      	b.n	80079ae <_dtoa_r+0x65e>
 8007a0c:	9704      	str	r7, [sp, #16]
 8007a0e:	4633      	mov	r3, r6
 8007a10:	461e      	mov	r6, r3
 8007a12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a16:	2a39      	cmp	r2, #57	@ 0x39
 8007a18:	d107      	bne.n	8007a2a <_dtoa_r+0x6da>
 8007a1a:	459a      	cmp	sl, r3
 8007a1c:	d1f8      	bne.n	8007a10 <_dtoa_r+0x6c0>
 8007a1e:	9a04      	ldr	r2, [sp, #16]
 8007a20:	3201      	adds	r2, #1
 8007a22:	9204      	str	r2, [sp, #16]
 8007a24:	2230      	movs	r2, #48	@ 0x30
 8007a26:	f88a 2000 	strb.w	r2, [sl]
 8007a2a:	781a      	ldrb	r2, [r3, #0]
 8007a2c:	3201      	adds	r2, #1
 8007a2e:	701a      	strb	r2, [r3, #0]
 8007a30:	e7bd      	b.n	80079ae <_dtoa_r+0x65e>
 8007a32:	4b7b      	ldr	r3, [pc, #492]	@ (8007c20 <_dtoa_r+0x8d0>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	f7f8 fdff 	bl	8000638 <__aeabi_dmul>
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	4604      	mov	r4, r0
 8007a40:	460d      	mov	r5, r1
 8007a42:	f7f9 f861 	bl	8000b08 <__aeabi_dcmpeq>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	f43f aebb 	beq.w	80077c2 <_dtoa_r+0x472>
 8007a4c:	e6f0      	b.n	8007830 <_dtoa_r+0x4e0>
 8007a4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007a50:	2a00      	cmp	r2, #0
 8007a52:	f000 80db 	beq.w	8007c0c <_dtoa_r+0x8bc>
 8007a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a58:	2a01      	cmp	r2, #1
 8007a5a:	f300 80bf 	bgt.w	8007bdc <_dtoa_r+0x88c>
 8007a5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007a60:	2a00      	cmp	r2, #0
 8007a62:	f000 80b7 	beq.w	8007bd4 <_dtoa_r+0x884>
 8007a66:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007a6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a6c:	4646      	mov	r6, r8
 8007a6e:	9a08      	ldr	r2, [sp, #32]
 8007a70:	2101      	movs	r1, #1
 8007a72:	441a      	add	r2, r3
 8007a74:	4658      	mov	r0, fp
 8007a76:	4498      	add	r8, r3
 8007a78:	9208      	str	r2, [sp, #32]
 8007a7a:	f000 fb6b 	bl	8008154 <__i2b>
 8007a7e:	4605      	mov	r5, r0
 8007a80:	b15e      	cbz	r6, 8007a9a <_dtoa_r+0x74a>
 8007a82:	9b08      	ldr	r3, [sp, #32]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	dd08      	ble.n	8007a9a <_dtoa_r+0x74a>
 8007a88:	42b3      	cmp	r3, r6
 8007a8a:	9a08      	ldr	r2, [sp, #32]
 8007a8c:	bfa8      	it	ge
 8007a8e:	4633      	movge	r3, r6
 8007a90:	eba8 0803 	sub.w	r8, r8, r3
 8007a94:	1af6      	subs	r6, r6, r3
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	9308      	str	r3, [sp, #32]
 8007a9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a9c:	b1f3      	cbz	r3, 8007adc <_dtoa_r+0x78c>
 8007a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 80b7 	beq.w	8007c14 <_dtoa_r+0x8c4>
 8007aa6:	b18c      	cbz	r4, 8007acc <_dtoa_r+0x77c>
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4622      	mov	r2, r4
 8007aac:	4658      	mov	r0, fp
 8007aae:	f000 fc11 	bl	80082d4 <__pow5mult>
 8007ab2:	464a      	mov	r2, r9
 8007ab4:	4601      	mov	r1, r0
 8007ab6:	4605      	mov	r5, r0
 8007ab8:	4658      	mov	r0, fp
 8007aba:	f000 fb61 	bl	8008180 <__multiply>
 8007abe:	4649      	mov	r1, r9
 8007ac0:	9004      	str	r0, [sp, #16]
 8007ac2:	4658      	mov	r0, fp
 8007ac4:	f000 fa92 	bl	8007fec <_Bfree>
 8007ac8:	9b04      	ldr	r3, [sp, #16]
 8007aca:	4699      	mov	r9, r3
 8007acc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ace:	1b1a      	subs	r2, r3, r4
 8007ad0:	d004      	beq.n	8007adc <_dtoa_r+0x78c>
 8007ad2:	4649      	mov	r1, r9
 8007ad4:	4658      	mov	r0, fp
 8007ad6:	f000 fbfd 	bl	80082d4 <__pow5mult>
 8007ada:	4681      	mov	r9, r0
 8007adc:	2101      	movs	r1, #1
 8007ade:	4658      	mov	r0, fp
 8007ae0:	f000 fb38 	bl	8008154 <__i2b>
 8007ae4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 81cf 	beq.w	8007e8c <_dtoa_r+0xb3c>
 8007aee:	461a      	mov	r2, r3
 8007af0:	4601      	mov	r1, r0
 8007af2:	4658      	mov	r0, fp
 8007af4:	f000 fbee 	bl	80082d4 <__pow5mult>
 8007af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	4604      	mov	r4, r0
 8007afe:	f300 8095 	bgt.w	8007c2c <_dtoa_r+0x8dc>
 8007b02:	9b02      	ldr	r3, [sp, #8]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f040 8087 	bne.w	8007c18 <_dtoa_r+0x8c8>
 8007b0a:	9b03      	ldr	r3, [sp, #12]
 8007b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f040 8089 	bne.w	8007c28 <_dtoa_r+0x8d8>
 8007b16:	9b03      	ldr	r3, [sp, #12]
 8007b18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b1c:	0d1b      	lsrs	r3, r3, #20
 8007b1e:	051b      	lsls	r3, r3, #20
 8007b20:	b12b      	cbz	r3, 8007b2e <_dtoa_r+0x7de>
 8007b22:	9b08      	ldr	r3, [sp, #32]
 8007b24:	3301      	adds	r3, #1
 8007b26:	9308      	str	r3, [sp, #32]
 8007b28:	f108 0801 	add.w	r8, r8, #1
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 81b0 	beq.w	8007e98 <_dtoa_r+0xb48>
 8007b38:	6923      	ldr	r3, [r4, #16]
 8007b3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b3e:	6918      	ldr	r0, [r3, #16]
 8007b40:	f000 fabc 	bl	80080bc <__hi0bits>
 8007b44:	f1c0 0020 	rsb	r0, r0, #32
 8007b48:	9b08      	ldr	r3, [sp, #32]
 8007b4a:	4418      	add	r0, r3
 8007b4c:	f010 001f 	ands.w	r0, r0, #31
 8007b50:	d077      	beq.n	8007c42 <_dtoa_r+0x8f2>
 8007b52:	f1c0 0320 	rsb	r3, r0, #32
 8007b56:	2b04      	cmp	r3, #4
 8007b58:	dd6b      	ble.n	8007c32 <_dtoa_r+0x8e2>
 8007b5a:	9b08      	ldr	r3, [sp, #32]
 8007b5c:	f1c0 001c 	rsb	r0, r0, #28
 8007b60:	4403      	add	r3, r0
 8007b62:	4480      	add	r8, r0
 8007b64:	4406      	add	r6, r0
 8007b66:	9308      	str	r3, [sp, #32]
 8007b68:	f1b8 0f00 	cmp.w	r8, #0
 8007b6c:	dd05      	ble.n	8007b7a <_dtoa_r+0x82a>
 8007b6e:	4649      	mov	r1, r9
 8007b70:	4642      	mov	r2, r8
 8007b72:	4658      	mov	r0, fp
 8007b74:	f000 fc08 	bl	8008388 <__lshift>
 8007b78:	4681      	mov	r9, r0
 8007b7a:	9b08      	ldr	r3, [sp, #32]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	dd05      	ble.n	8007b8c <_dtoa_r+0x83c>
 8007b80:	4621      	mov	r1, r4
 8007b82:	461a      	mov	r2, r3
 8007b84:	4658      	mov	r0, fp
 8007b86:	f000 fbff 	bl	8008388 <__lshift>
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d059      	beq.n	8007c46 <_dtoa_r+0x8f6>
 8007b92:	4621      	mov	r1, r4
 8007b94:	4648      	mov	r0, r9
 8007b96:	f000 fc63 	bl	8008460 <__mcmp>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	da53      	bge.n	8007c46 <_dtoa_r+0x8f6>
 8007b9e:	1e7b      	subs	r3, r7, #1
 8007ba0:	9304      	str	r3, [sp, #16]
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	220a      	movs	r2, #10
 8007ba8:	4658      	mov	r0, fp
 8007baa:	f000 fa41 	bl	8008030 <__multadd>
 8007bae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bb0:	4681      	mov	r9, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 8172 	beq.w	8007e9c <_dtoa_r+0xb4c>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4629      	mov	r1, r5
 8007bbc:	220a      	movs	r2, #10
 8007bbe:	4658      	mov	r0, fp
 8007bc0:	f000 fa36 	bl	8008030 <__multadd>
 8007bc4:	9b00      	ldr	r3, [sp, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	4605      	mov	r5, r0
 8007bca:	dc67      	bgt.n	8007c9c <_dtoa_r+0x94c>
 8007bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	dc41      	bgt.n	8007c56 <_dtoa_r+0x906>
 8007bd2:	e063      	b.n	8007c9c <_dtoa_r+0x94c>
 8007bd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007bd6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007bda:	e746      	b.n	8007a6a <_dtoa_r+0x71a>
 8007bdc:	9b07      	ldr	r3, [sp, #28]
 8007bde:	1e5c      	subs	r4, r3, #1
 8007be0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007be2:	42a3      	cmp	r3, r4
 8007be4:	bfbf      	itttt	lt
 8007be6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007be8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007bea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007bec:	1ae3      	sublt	r3, r4, r3
 8007bee:	bfb4      	ite	lt
 8007bf0:	18d2      	addlt	r2, r2, r3
 8007bf2:	1b1c      	subge	r4, r3, r4
 8007bf4:	9b07      	ldr	r3, [sp, #28]
 8007bf6:	bfbc      	itt	lt
 8007bf8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007bfa:	2400      	movlt	r4, #0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	bfb5      	itete	lt
 8007c00:	eba8 0603 	sublt.w	r6, r8, r3
 8007c04:	9b07      	ldrge	r3, [sp, #28]
 8007c06:	2300      	movlt	r3, #0
 8007c08:	4646      	movge	r6, r8
 8007c0a:	e730      	b.n	8007a6e <_dtoa_r+0x71e>
 8007c0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007c10:	4646      	mov	r6, r8
 8007c12:	e735      	b.n	8007a80 <_dtoa_r+0x730>
 8007c14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c16:	e75c      	b.n	8007ad2 <_dtoa_r+0x782>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	e788      	b.n	8007b2e <_dtoa_r+0x7de>
 8007c1c:	3fe00000 	.word	0x3fe00000
 8007c20:	40240000 	.word	0x40240000
 8007c24:	40140000 	.word	0x40140000
 8007c28:	9b02      	ldr	r3, [sp, #8]
 8007c2a:	e780      	b.n	8007b2e <_dtoa_r+0x7de>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c30:	e782      	b.n	8007b38 <_dtoa_r+0x7e8>
 8007c32:	d099      	beq.n	8007b68 <_dtoa_r+0x818>
 8007c34:	9a08      	ldr	r2, [sp, #32]
 8007c36:	331c      	adds	r3, #28
 8007c38:	441a      	add	r2, r3
 8007c3a:	4498      	add	r8, r3
 8007c3c:	441e      	add	r6, r3
 8007c3e:	9208      	str	r2, [sp, #32]
 8007c40:	e792      	b.n	8007b68 <_dtoa_r+0x818>
 8007c42:	4603      	mov	r3, r0
 8007c44:	e7f6      	b.n	8007c34 <_dtoa_r+0x8e4>
 8007c46:	9b07      	ldr	r3, [sp, #28]
 8007c48:	9704      	str	r7, [sp, #16]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	dc20      	bgt.n	8007c90 <_dtoa_r+0x940>
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	dd1e      	ble.n	8007c94 <_dtoa_r+0x944>
 8007c56:	9b00      	ldr	r3, [sp, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f47f aec0 	bne.w	80079de <_dtoa_r+0x68e>
 8007c5e:	4621      	mov	r1, r4
 8007c60:	2205      	movs	r2, #5
 8007c62:	4658      	mov	r0, fp
 8007c64:	f000 f9e4 	bl	8008030 <__multadd>
 8007c68:	4601      	mov	r1, r0
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	4648      	mov	r0, r9
 8007c6e:	f000 fbf7 	bl	8008460 <__mcmp>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	f77f aeb3 	ble.w	80079de <_dtoa_r+0x68e>
 8007c78:	4656      	mov	r6, sl
 8007c7a:	2331      	movs	r3, #49	@ 0x31
 8007c7c:	f806 3b01 	strb.w	r3, [r6], #1
 8007c80:	9b04      	ldr	r3, [sp, #16]
 8007c82:	3301      	adds	r3, #1
 8007c84:	9304      	str	r3, [sp, #16]
 8007c86:	e6ae      	b.n	80079e6 <_dtoa_r+0x696>
 8007c88:	9c07      	ldr	r4, [sp, #28]
 8007c8a:	9704      	str	r7, [sp, #16]
 8007c8c:	4625      	mov	r5, r4
 8007c8e:	e7f3      	b.n	8007c78 <_dtoa_r+0x928>
 8007c90:	9b07      	ldr	r3, [sp, #28]
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f000 8104 	beq.w	8007ea4 <_dtoa_r+0xb54>
 8007c9c:	2e00      	cmp	r6, #0
 8007c9e:	dd05      	ble.n	8007cac <_dtoa_r+0x95c>
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	4632      	mov	r2, r6
 8007ca4:	4658      	mov	r0, fp
 8007ca6:	f000 fb6f 	bl	8008388 <__lshift>
 8007caa:	4605      	mov	r5, r0
 8007cac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d05a      	beq.n	8007d68 <_dtoa_r+0xa18>
 8007cb2:	6869      	ldr	r1, [r5, #4]
 8007cb4:	4658      	mov	r0, fp
 8007cb6:	f000 f959 	bl	8007f6c <_Balloc>
 8007cba:	4606      	mov	r6, r0
 8007cbc:	b928      	cbnz	r0, 8007cca <_dtoa_r+0x97a>
 8007cbe:	4b84      	ldr	r3, [pc, #528]	@ (8007ed0 <_dtoa_r+0xb80>)
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007cc6:	f7ff bb5a 	b.w	800737e <_dtoa_r+0x2e>
 8007cca:	692a      	ldr	r2, [r5, #16]
 8007ccc:	3202      	adds	r2, #2
 8007cce:	0092      	lsls	r2, r2, #2
 8007cd0:	f105 010c 	add.w	r1, r5, #12
 8007cd4:	300c      	adds	r0, #12
 8007cd6:	f000 fee9 	bl	8008aac <memcpy>
 8007cda:	2201      	movs	r2, #1
 8007cdc:	4631      	mov	r1, r6
 8007cde:	4658      	mov	r0, fp
 8007ce0:	f000 fb52 	bl	8008388 <__lshift>
 8007ce4:	f10a 0301 	add.w	r3, sl, #1
 8007ce8:	9307      	str	r3, [sp, #28]
 8007cea:	9b00      	ldr	r3, [sp, #0]
 8007cec:	4453      	add	r3, sl
 8007cee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cf0:	9b02      	ldr	r3, [sp, #8]
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	462f      	mov	r7, r5
 8007cf8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cfa:	4605      	mov	r5, r0
 8007cfc:	9b07      	ldr	r3, [sp, #28]
 8007cfe:	4621      	mov	r1, r4
 8007d00:	3b01      	subs	r3, #1
 8007d02:	4648      	mov	r0, r9
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	f7ff fa98 	bl	800723a <quorem>
 8007d0a:	4639      	mov	r1, r7
 8007d0c:	9002      	str	r0, [sp, #8]
 8007d0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d12:	4648      	mov	r0, r9
 8007d14:	f000 fba4 	bl	8008460 <__mcmp>
 8007d18:	462a      	mov	r2, r5
 8007d1a:	9008      	str	r0, [sp, #32]
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	4658      	mov	r0, fp
 8007d20:	f000 fbba 	bl	8008498 <__mdiff>
 8007d24:	68c2      	ldr	r2, [r0, #12]
 8007d26:	4606      	mov	r6, r0
 8007d28:	bb02      	cbnz	r2, 8007d6c <_dtoa_r+0xa1c>
 8007d2a:	4601      	mov	r1, r0
 8007d2c:	4648      	mov	r0, r9
 8007d2e:	f000 fb97 	bl	8008460 <__mcmp>
 8007d32:	4602      	mov	r2, r0
 8007d34:	4631      	mov	r1, r6
 8007d36:	4658      	mov	r0, fp
 8007d38:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d3a:	f000 f957 	bl	8007fec <_Bfree>
 8007d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d42:	9e07      	ldr	r6, [sp, #28]
 8007d44:	ea43 0102 	orr.w	r1, r3, r2
 8007d48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d4a:	4319      	orrs	r1, r3
 8007d4c:	d110      	bne.n	8007d70 <_dtoa_r+0xa20>
 8007d4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d52:	d029      	beq.n	8007da8 <_dtoa_r+0xa58>
 8007d54:	9b08      	ldr	r3, [sp, #32]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	dd02      	ble.n	8007d60 <_dtoa_r+0xa10>
 8007d5a:	9b02      	ldr	r3, [sp, #8]
 8007d5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007d60:	9b00      	ldr	r3, [sp, #0]
 8007d62:	f883 8000 	strb.w	r8, [r3]
 8007d66:	e63f      	b.n	80079e8 <_dtoa_r+0x698>
 8007d68:	4628      	mov	r0, r5
 8007d6a:	e7bb      	b.n	8007ce4 <_dtoa_r+0x994>
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	e7e1      	b.n	8007d34 <_dtoa_r+0x9e4>
 8007d70:	9b08      	ldr	r3, [sp, #32]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	db04      	blt.n	8007d80 <_dtoa_r+0xa30>
 8007d76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d78:	430b      	orrs	r3, r1
 8007d7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d7c:	430b      	orrs	r3, r1
 8007d7e:	d120      	bne.n	8007dc2 <_dtoa_r+0xa72>
 8007d80:	2a00      	cmp	r2, #0
 8007d82:	dded      	ble.n	8007d60 <_dtoa_r+0xa10>
 8007d84:	4649      	mov	r1, r9
 8007d86:	2201      	movs	r2, #1
 8007d88:	4658      	mov	r0, fp
 8007d8a:	f000 fafd 	bl	8008388 <__lshift>
 8007d8e:	4621      	mov	r1, r4
 8007d90:	4681      	mov	r9, r0
 8007d92:	f000 fb65 	bl	8008460 <__mcmp>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	dc03      	bgt.n	8007da2 <_dtoa_r+0xa52>
 8007d9a:	d1e1      	bne.n	8007d60 <_dtoa_r+0xa10>
 8007d9c:	f018 0f01 	tst.w	r8, #1
 8007da0:	d0de      	beq.n	8007d60 <_dtoa_r+0xa10>
 8007da2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007da6:	d1d8      	bne.n	8007d5a <_dtoa_r+0xa0a>
 8007da8:	9a00      	ldr	r2, [sp, #0]
 8007daa:	2339      	movs	r3, #57	@ 0x39
 8007dac:	7013      	strb	r3, [r2, #0]
 8007dae:	4633      	mov	r3, r6
 8007db0:	461e      	mov	r6, r3
 8007db2:	3b01      	subs	r3, #1
 8007db4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007db8:	2a39      	cmp	r2, #57	@ 0x39
 8007dba:	d052      	beq.n	8007e62 <_dtoa_r+0xb12>
 8007dbc:	3201      	adds	r2, #1
 8007dbe:	701a      	strb	r2, [r3, #0]
 8007dc0:	e612      	b.n	80079e8 <_dtoa_r+0x698>
 8007dc2:	2a00      	cmp	r2, #0
 8007dc4:	dd07      	ble.n	8007dd6 <_dtoa_r+0xa86>
 8007dc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007dca:	d0ed      	beq.n	8007da8 <_dtoa_r+0xa58>
 8007dcc:	9a00      	ldr	r2, [sp, #0]
 8007dce:	f108 0301 	add.w	r3, r8, #1
 8007dd2:	7013      	strb	r3, [r2, #0]
 8007dd4:	e608      	b.n	80079e8 <_dtoa_r+0x698>
 8007dd6:	9b07      	ldr	r3, [sp, #28]
 8007dd8:	9a07      	ldr	r2, [sp, #28]
 8007dda:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007dde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d028      	beq.n	8007e36 <_dtoa_r+0xae6>
 8007de4:	4649      	mov	r1, r9
 8007de6:	2300      	movs	r3, #0
 8007de8:	220a      	movs	r2, #10
 8007dea:	4658      	mov	r0, fp
 8007dec:	f000 f920 	bl	8008030 <__multadd>
 8007df0:	42af      	cmp	r7, r5
 8007df2:	4681      	mov	r9, r0
 8007df4:	f04f 0300 	mov.w	r3, #0
 8007df8:	f04f 020a 	mov.w	r2, #10
 8007dfc:	4639      	mov	r1, r7
 8007dfe:	4658      	mov	r0, fp
 8007e00:	d107      	bne.n	8007e12 <_dtoa_r+0xac2>
 8007e02:	f000 f915 	bl	8008030 <__multadd>
 8007e06:	4607      	mov	r7, r0
 8007e08:	4605      	mov	r5, r0
 8007e0a:	9b07      	ldr	r3, [sp, #28]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	9307      	str	r3, [sp, #28]
 8007e10:	e774      	b.n	8007cfc <_dtoa_r+0x9ac>
 8007e12:	f000 f90d 	bl	8008030 <__multadd>
 8007e16:	4629      	mov	r1, r5
 8007e18:	4607      	mov	r7, r0
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	220a      	movs	r2, #10
 8007e1e:	4658      	mov	r0, fp
 8007e20:	f000 f906 	bl	8008030 <__multadd>
 8007e24:	4605      	mov	r5, r0
 8007e26:	e7f0      	b.n	8007e0a <_dtoa_r+0xaba>
 8007e28:	9b00      	ldr	r3, [sp, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	bfcc      	ite	gt
 8007e2e:	461e      	movgt	r6, r3
 8007e30:	2601      	movle	r6, #1
 8007e32:	4456      	add	r6, sl
 8007e34:	2700      	movs	r7, #0
 8007e36:	4649      	mov	r1, r9
 8007e38:	2201      	movs	r2, #1
 8007e3a:	4658      	mov	r0, fp
 8007e3c:	f000 faa4 	bl	8008388 <__lshift>
 8007e40:	4621      	mov	r1, r4
 8007e42:	4681      	mov	r9, r0
 8007e44:	f000 fb0c 	bl	8008460 <__mcmp>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	dcb0      	bgt.n	8007dae <_dtoa_r+0xa5e>
 8007e4c:	d102      	bne.n	8007e54 <_dtoa_r+0xb04>
 8007e4e:	f018 0f01 	tst.w	r8, #1
 8007e52:	d1ac      	bne.n	8007dae <_dtoa_r+0xa5e>
 8007e54:	4633      	mov	r3, r6
 8007e56:	461e      	mov	r6, r3
 8007e58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e5c:	2a30      	cmp	r2, #48	@ 0x30
 8007e5e:	d0fa      	beq.n	8007e56 <_dtoa_r+0xb06>
 8007e60:	e5c2      	b.n	80079e8 <_dtoa_r+0x698>
 8007e62:	459a      	cmp	sl, r3
 8007e64:	d1a4      	bne.n	8007db0 <_dtoa_r+0xa60>
 8007e66:	9b04      	ldr	r3, [sp, #16]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	9304      	str	r3, [sp, #16]
 8007e6c:	2331      	movs	r3, #49	@ 0x31
 8007e6e:	f88a 3000 	strb.w	r3, [sl]
 8007e72:	e5b9      	b.n	80079e8 <_dtoa_r+0x698>
 8007e74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007ed4 <_dtoa_r+0xb84>
 8007e7a:	b11b      	cbz	r3, 8007e84 <_dtoa_r+0xb34>
 8007e7c:	f10a 0308 	add.w	r3, sl, #8
 8007e80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007e82:	6013      	str	r3, [r2, #0]
 8007e84:	4650      	mov	r0, sl
 8007e86:	b019      	add	sp, #100	@ 0x64
 8007e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	f77f ae37 	ble.w	8007b02 <_dtoa_r+0x7b2>
 8007e94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e96:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e98:	2001      	movs	r0, #1
 8007e9a:	e655      	b.n	8007b48 <_dtoa_r+0x7f8>
 8007e9c:	9b00      	ldr	r3, [sp, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f77f aed6 	ble.w	8007c50 <_dtoa_r+0x900>
 8007ea4:	4656      	mov	r6, sl
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	4648      	mov	r0, r9
 8007eaa:	f7ff f9c6 	bl	800723a <quorem>
 8007eae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007eb2:	f806 8b01 	strb.w	r8, [r6], #1
 8007eb6:	9b00      	ldr	r3, [sp, #0]
 8007eb8:	eba6 020a 	sub.w	r2, r6, sl
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	ddb3      	ble.n	8007e28 <_dtoa_r+0xad8>
 8007ec0:	4649      	mov	r1, r9
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	220a      	movs	r2, #10
 8007ec6:	4658      	mov	r0, fp
 8007ec8:	f000 f8b2 	bl	8008030 <__multadd>
 8007ecc:	4681      	mov	r9, r0
 8007ece:	e7ea      	b.n	8007ea6 <_dtoa_r+0xb56>
 8007ed0:	08009320 	.word	0x08009320
 8007ed4:	080092a4 	.word	0x080092a4

08007ed8 <_free_r>:
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	4605      	mov	r5, r0
 8007edc:	2900      	cmp	r1, #0
 8007ede:	d041      	beq.n	8007f64 <_free_r+0x8c>
 8007ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ee4:	1f0c      	subs	r4, r1, #4
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	bfb8      	it	lt
 8007eea:	18e4      	addlt	r4, r4, r3
 8007eec:	f7fe fb78 	bl	80065e0 <__malloc_lock>
 8007ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f68 <_free_r+0x90>)
 8007ef2:	6813      	ldr	r3, [r2, #0]
 8007ef4:	b933      	cbnz	r3, 8007f04 <_free_r+0x2c>
 8007ef6:	6063      	str	r3, [r4, #4]
 8007ef8:	6014      	str	r4, [r2, #0]
 8007efa:	4628      	mov	r0, r5
 8007efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f00:	f7fe bb74 	b.w	80065ec <__malloc_unlock>
 8007f04:	42a3      	cmp	r3, r4
 8007f06:	d908      	bls.n	8007f1a <_free_r+0x42>
 8007f08:	6820      	ldr	r0, [r4, #0]
 8007f0a:	1821      	adds	r1, r4, r0
 8007f0c:	428b      	cmp	r3, r1
 8007f0e:	bf01      	itttt	eq
 8007f10:	6819      	ldreq	r1, [r3, #0]
 8007f12:	685b      	ldreq	r3, [r3, #4]
 8007f14:	1809      	addeq	r1, r1, r0
 8007f16:	6021      	streq	r1, [r4, #0]
 8007f18:	e7ed      	b.n	8007ef6 <_free_r+0x1e>
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	b10b      	cbz	r3, 8007f24 <_free_r+0x4c>
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	d9fa      	bls.n	8007f1a <_free_r+0x42>
 8007f24:	6811      	ldr	r1, [r2, #0]
 8007f26:	1850      	adds	r0, r2, r1
 8007f28:	42a0      	cmp	r0, r4
 8007f2a:	d10b      	bne.n	8007f44 <_free_r+0x6c>
 8007f2c:	6820      	ldr	r0, [r4, #0]
 8007f2e:	4401      	add	r1, r0
 8007f30:	1850      	adds	r0, r2, r1
 8007f32:	4283      	cmp	r3, r0
 8007f34:	6011      	str	r1, [r2, #0]
 8007f36:	d1e0      	bne.n	8007efa <_free_r+0x22>
 8007f38:	6818      	ldr	r0, [r3, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	6053      	str	r3, [r2, #4]
 8007f3e:	4408      	add	r0, r1
 8007f40:	6010      	str	r0, [r2, #0]
 8007f42:	e7da      	b.n	8007efa <_free_r+0x22>
 8007f44:	d902      	bls.n	8007f4c <_free_r+0x74>
 8007f46:	230c      	movs	r3, #12
 8007f48:	602b      	str	r3, [r5, #0]
 8007f4a:	e7d6      	b.n	8007efa <_free_r+0x22>
 8007f4c:	6820      	ldr	r0, [r4, #0]
 8007f4e:	1821      	adds	r1, r4, r0
 8007f50:	428b      	cmp	r3, r1
 8007f52:	bf04      	itt	eq
 8007f54:	6819      	ldreq	r1, [r3, #0]
 8007f56:	685b      	ldreq	r3, [r3, #4]
 8007f58:	6063      	str	r3, [r4, #4]
 8007f5a:	bf04      	itt	eq
 8007f5c:	1809      	addeq	r1, r1, r0
 8007f5e:	6021      	streq	r1, [r4, #0]
 8007f60:	6054      	str	r4, [r2, #4]
 8007f62:	e7ca      	b.n	8007efa <_free_r+0x22>
 8007f64:	bd38      	pop	{r3, r4, r5, pc}
 8007f66:	bf00      	nop
 8007f68:	2000045c 	.word	0x2000045c

08007f6c <_Balloc>:
 8007f6c:	b570      	push	{r4, r5, r6, lr}
 8007f6e:	69c6      	ldr	r6, [r0, #28]
 8007f70:	4604      	mov	r4, r0
 8007f72:	460d      	mov	r5, r1
 8007f74:	b976      	cbnz	r6, 8007f94 <_Balloc+0x28>
 8007f76:	2010      	movs	r0, #16
 8007f78:	f7fe fa80 	bl	800647c <malloc>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	61e0      	str	r0, [r4, #28]
 8007f80:	b920      	cbnz	r0, 8007f8c <_Balloc+0x20>
 8007f82:	4b18      	ldr	r3, [pc, #96]	@ (8007fe4 <_Balloc+0x78>)
 8007f84:	4818      	ldr	r0, [pc, #96]	@ (8007fe8 <_Balloc+0x7c>)
 8007f86:	216b      	movs	r1, #107	@ 0x6b
 8007f88:	f000 fd9e 	bl	8008ac8 <__assert_func>
 8007f8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f90:	6006      	str	r6, [r0, #0]
 8007f92:	60c6      	str	r6, [r0, #12]
 8007f94:	69e6      	ldr	r6, [r4, #28]
 8007f96:	68f3      	ldr	r3, [r6, #12]
 8007f98:	b183      	cbz	r3, 8007fbc <_Balloc+0x50>
 8007f9a:	69e3      	ldr	r3, [r4, #28]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fa2:	b9b8      	cbnz	r0, 8007fd4 <_Balloc+0x68>
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	fa01 f605 	lsl.w	r6, r1, r5
 8007faa:	1d72      	adds	r2, r6, #5
 8007fac:	0092      	lsls	r2, r2, #2
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f000 fda8 	bl	8008b04 <_calloc_r>
 8007fb4:	b160      	cbz	r0, 8007fd0 <_Balloc+0x64>
 8007fb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fba:	e00e      	b.n	8007fda <_Balloc+0x6e>
 8007fbc:	2221      	movs	r2, #33	@ 0x21
 8007fbe:	2104      	movs	r1, #4
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f000 fd9f 	bl	8008b04 <_calloc_r>
 8007fc6:	69e3      	ldr	r3, [r4, #28]
 8007fc8:	60f0      	str	r0, [r6, #12]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e4      	bne.n	8007f9a <_Balloc+0x2e>
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}
 8007fd4:	6802      	ldr	r2, [r0, #0]
 8007fd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fe0:	e7f7      	b.n	8007fd2 <_Balloc+0x66>
 8007fe2:	bf00      	nop
 8007fe4:	080092b1 	.word	0x080092b1
 8007fe8:	08009331 	.word	0x08009331

08007fec <_Bfree>:
 8007fec:	b570      	push	{r4, r5, r6, lr}
 8007fee:	69c6      	ldr	r6, [r0, #28]
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	460c      	mov	r4, r1
 8007ff4:	b976      	cbnz	r6, 8008014 <_Bfree+0x28>
 8007ff6:	2010      	movs	r0, #16
 8007ff8:	f7fe fa40 	bl	800647c <malloc>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	61e8      	str	r0, [r5, #28]
 8008000:	b920      	cbnz	r0, 800800c <_Bfree+0x20>
 8008002:	4b09      	ldr	r3, [pc, #36]	@ (8008028 <_Bfree+0x3c>)
 8008004:	4809      	ldr	r0, [pc, #36]	@ (800802c <_Bfree+0x40>)
 8008006:	218f      	movs	r1, #143	@ 0x8f
 8008008:	f000 fd5e 	bl	8008ac8 <__assert_func>
 800800c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008010:	6006      	str	r6, [r0, #0]
 8008012:	60c6      	str	r6, [r0, #12]
 8008014:	b13c      	cbz	r4, 8008026 <_Bfree+0x3a>
 8008016:	69eb      	ldr	r3, [r5, #28]
 8008018:	6862      	ldr	r2, [r4, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008020:	6021      	str	r1, [r4, #0]
 8008022:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008026:	bd70      	pop	{r4, r5, r6, pc}
 8008028:	080092b1 	.word	0x080092b1
 800802c:	08009331 	.word	0x08009331

08008030 <__multadd>:
 8008030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008034:	690d      	ldr	r5, [r1, #16]
 8008036:	4607      	mov	r7, r0
 8008038:	460c      	mov	r4, r1
 800803a:	461e      	mov	r6, r3
 800803c:	f101 0c14 	add.w	ip, r1, #20
 8008040:	2000      	movs	r0, #0
 8008042:	f8dc 3000 	ldr.w	r3, [ip]
 8008046:	b299      	uxth	r1, r3
 8008048:	fb02 6101 	mla	r1, r2, r1, r6
 800804c:	0c1e      	lsrs	r6, r3, #16
 800804e:	0c0b      	lsrs	r3, r1, #16
 8008050:	fb02 3306 	mla	r3, r2, r6, r3
 8008054:	b289      	uxth	r1, r1
 8008056:	3001      	adds	r0, #1
 8008058:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800805c:	4285      	cmp	r5, r0
 800805e:	f84c 1b04 	str.w	r1, [ip], #4
 8008062:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008066:	dcec      	bgt.n	8008042 <__multadd+0x12>
 8008068:	b30e      	cbz	r6, 80080ae <__multadd+0x7e>
 800806a:	68a3      	ldr	r3, [r4, #8]
 800806c:	42ab      	cmp	r3, r5
 800806e:	dc19      	bgt.n	80080a4 <__multadd+0x74>
 8008070:	6861      	ldr	r1, [r4, #4]
 8008072:	4638      	mov	r0, r7
 8008074:	3101      	adds	r1, #1
 8008076:	f7ff ff79 	bl	8007f6c <_Balloc>
 800807a:	4680      	mov	r8, r0
 800807c:	b928      	cbnz	r0, 800808a <__multadd+0x5a>
 800807e:	4602      	mov	r2, r0
 8008080:	4b0c      	ldr	r3, [pc, #48]	@ (80080b4 <__multadd+0x84>)
 8008082:	480d      	ldr	r0, [pc, #52]	@ (80080b8 <__multadd+0x88>)
 8008084:	21ba      	movs	r1, #186	@ 0xba
 8008086:	f000 fd1f 	bl	8008ac8 <__assert_func>
 800808a:	6922      	ldr	r2, [r4, #16]
 800808c:	3202      	adds	r2, #2
 800808e:	f104 010c 	add.w	r1, r4, #12
 8008092:	0092      	lsls	r2, r2, #2
 8008094:	300c      	adds	r0, #12
 8008096:	f000 fd09 	bl	8008aac <memcpy>
 800809a:	4621      	mov	r1, r4
 800809c:	4638      	mov	r0, r7
 800809e:	f7ff ffa5 	bl	8007fec <_Bfree>
 80080a2:	4644      	mov	r4, r8
 80080a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080a8:	3501      	adds	r5, #1
 80080aa:	615e      	str	r6, [r3, #20]
 80080ac:	6125      	str	r5, [r4, #16]
 80080ae:	4620      	mov	r0, r4
 80080b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080b4:	08009320 	.word	0x08009320
 80080b8:	08009331 	.word	0x08009331

080080bc <__hi0bits>:
 80080bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80080c0:	4603      	mov	r3, r0
 80080c2:	bf36      	itet	cc
 80080c4:	0403      	lslcc	r3, r0, #16
 80080c6:	2000      	movcs	r0, #0
 80080c8:	2010      	movcc	r0, #16
 80080ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080ce:	bf3c      	itt	cc
 80080d0:	021b      	lslcc	r3, r3, #8
 80080d2:	3008      	addcc	r0, #8
 80080d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080d8:	bf3c      	itt	cc
 80080da:	011b      	lslcc	r3, r3, #4
 80080dc:	3004      	addcc	r0, #4
 80080de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080e2:	bf3c      	itt	cc
 80080e4:	009b      	lslcc	r3, r3, #2
 80080e6:	3002      	addcc	r0, #2
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	db05      	blt.n	80080f8 <__hi0bits+0x3c>
 80080ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80080f0:	f100 0001 	add.w	r0, r0, #1
 80080f4:	bf08      	it	eq
 80080f6:	2020      	moveq	r0, #32
 80080f8:	4770      	bx	lr

080080fa <__lo0bits>:
 80080fa:	6803      	ldr	r3, [r0, #0]
 80080fc:	4602      	mov	r2, r0
 80080fe:	f013 0007 	ands.w	r0, r3, #7
 8008102:	d00b      	beq.n	800811c <__lo0bits+0x22>
 8008104:	07d9      	lsls	r1, r3, #31
 8008106:	d421      	bmi.n	800814c <__lo0bits+0x52>
 8008108:	0798      	lsls	r0, r3, #30
 800810a:	bf49      	itett	mi
 800810c:	085b      	lsrmi	r3, r3, #1
 800810e:	089b      	lsrpl	r3, r3, #2
 8008110:	2001      	movmi	r0, #1
 8008112:	6013      	strmi	r3, [r2, #0]
 8008114:	bf5c      	itt	pl
 8008116:	6013      	strpl	r3, [r2, #0]
 8008118:	2002      	movpl	r0, #2
 800811a:	4770      	bx	lr
 800811c:	b299      	uxth	r1, r3
 800811e:	b909      	cbnz	r1, 8008124 <__lo0bits+0x2a>
 8008120:	0c1b      	lsrs	r3, r3, #16
 8008122:	2010      	movs	r0, #16
 8008124:	b2d9      	uxtb	r1, r3
 8008126:	b909      	cbnz	r1, 800812c <__lo0bits+0x32>
 8008128:	3008      	adds	r0, #8
 800812a:	0a1b      	lsrs	r3, r3, #8
 800812c:	0719      	lsls	r1, r3, #28
 800812e:	bf04      	itt	eq
 8008130:	091b      	lsreq	r3, r3, #4
 8008132:	3004      	addeq	r0, #4
 8008134:	0799      	lsls	r1, r3, #30
 8008136:	bf04      	itt	eq
 8008138:	089b      	lsreq	r3, r3, #2
 800813a:	3002      	addeq	r0, #2
 800813c:	07d9      	lsls	r1, r3, #31
 800813e:	d403      	bmi.n	8008148 <__lo0bits+0x4e>
 8008140:	085b      	lsrs	r3, r3, #1
 8008142:	f100 0001 	add.w	r0, r0, #1
 8008146:	d003      	beq.n	8008150 <__lo0bits+0x56>
 8008148:	6013      	str	r3, [r2, #0]
 800814a:	4770      	bx	lr
 800814c:	2000      	movs	r0, #0
 800814e:	4770      	bx	lr
 8008150:	2020      	movs	r0, #32
 8008152:	4770      	bx	lr

08008154 <__i2b>:
 8008154:	b510      	push	{r4, lr}
 8008156:	460c      	mov	r4, r1
 8008158:	2101      	movs	r1, #1
 800815a:	f7ff ff07 	bl	8007f6c <_Balloc>
 800815e:	4602      	mov	r2, r0
 8008160:	b928      	cbnz	r0, 800816e <__i2b+0x1a>
 8008162:	4b05      	ldr	r3, [pc, #20]	@ (8008178 <__i2b+0x24>)
 8008164:	4805      	ldr	r0, [pc, #20]	@ (800817c <__i2b+0x28>)
 8008166:	f240 1145 	movw	r1, #325	@ 0x145
 800816a:	f000 fcad 	bl	8008ac8 <__assert_func>
 800816e:	2301      	movs	r3, #1
 8008170:	6144      	str	r4, [r0, #20]
 8008172:	6103      	str	r3, [r0, #16]
 8008174:	bd10      	pop	{r4, pc}
 8008176:	bf00      	nop
 8008178:	08009320 	.word	0x08009320
 800817c:	08009331 	.word	0x08009331

08008180 <__multiply>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	4614      	mov	r4, r2
 8008186:	690a      	ldr	r2, [r1, #16]
 8008188:	6923      	ldr	r3, [r4, #16]
 800818a:	429a      	cmp	r2, r3
 800818c:	bfa8      	it	ge
 800818e:	4623      	movge	r3, r4
 8008190:	460f      	mov	r7, r1
 8008192:	bfa4      	itt	ge
 8008194:	460c      	movge	r4, r1
 8008196:	461f      	movge	r7, r3
 8008198:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800819c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80081a0:	68a3      	ldr	r3, [r4, #8]
 80081a2:	6861      	ldr	r1, [r4, #4]
 80081a4:	eb0a 0609 	add.w	r6, sl, r9
 80081a8:	42b3      	cmp	r3, r6
 80081aa:	b085      	sub	sp, #20
 80081ac:	bfb8      	it	lt
 80081ae:	3101      	addlt	r1, #1
 80081b0:	f7ff fedc 	bl	8007f6c <_Balloc>
 80081b4:	b930      	cbnz	r0, 80081c4 <__multiply+0x44>
 80081b6:	4602      	mov	r2, r0
 80081b8:	4b44      	ldr	r3, [pc, #272]	@ (80082cc <__multiply+0x14c>)
 80081ba:	4845      	ldr	r0, [pc, #276]	@ (80082d0 <__multiply+0x150>)
 80081bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80081c0:	f000 fc82 	bl	8008ac8 <__assert_func>
 80081c4:	f100 0514 	add.w	r5, r0, #20
 80081c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081cc:	462b      	mov	r3, r5
 80081ce:	2200      	movs	r2, #0
 80081d0:	4543      	cmp	r3, r8
 80081d2:	d321      	bcc.n	8008218 <__multiply+0x98>
 80081d4:	f107 0114 	add.w	r1, r7, #20
 80081d8:	f104 0214 	add.w	r2, r4, #20
 80081dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80081e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80081e4:	9302      	str	r3, [sp, #8]
 80081e6:	1b13      	subs	r3, r2, r4
 80081e8:	3b15      	subs	r3, #21
 80081ea:	f023 0303 	bic.w	r3, r3, #3
 80081ee:	3304      	adds	r3, #4
 80081f0:	f104 0715 	add.w	r7, r4, #21
 80081f4:	42ba      	cmp	r2, r7
 80081f6:	bf38      	it	cc
 80081f8:	2304      	movcc	r3, #4
 80081fa:	9301      	str	r3, [sp, #4]
 80081fc:	9b02      	ldr	r3, [sp, #8]
 80081fe:	9103      	str	r1, [sp, #12]
 8008200:	428b      	cmp	r3, r1
 8008202:	d80c      	bhi.n	800821e <__multiply+0x9e>
 8008204:	2e00      	cmp	r6, #0
 8008206:	dd03      	ble.n	8008210 <__multiply+0x90>
 8008208:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800820c:	2b00      	cmp	r3, #0
 800820e:	d05b      	beq.n	80082c8 <__multiply+0x148>
 8008210:	6106      	str	r6, [r0, #16]
 8008212:	b005      	add	sp, #20
 8008214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008218:	f843 2b04 	str.w	r2, [r3], #4
 800821c:	e7d8      	b.n	80081d0 <__multiply+0x50>
 800821e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008222:	f1ba 0f00 	cmp.w	sl, #0
 8008226:	d024      	beq.n	8008272 <__multiply+0xf2>
 8008228:	f104 0e14 	add.w	lr, r4, #20
 800822c:	46a9      	mov	r9, r5
 800822e:	f04f 0c00 	mov.w	ip, #0
 8008232:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008236:	f8d9 3000 	ldr.w	r3, [r9]
 800823a:	fa1f fb87 	uxth.w	fp, r7
 800823e:	b29b      	uxth	r3, r3
 8008240:	fb0a 330b 	mla	r3, sl, fp, r3
 8008244:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008248:	f8d9 7000 	ldr.w	r7, [r9]
 800824c:	4463      	add	r3, ip
 800824e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008252:	fb0a c70b 	mla	r7, sl, fp, ip
 8008256:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800825a:	b29b      	uxth	r3, r3
 800825c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008260:	4572      	cmp	r2, lr
 8008262:	f849 3b04 	str.w	r3, [r9], #4
 8008266:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800826a:	d8e2      	bhi.n	8008232 <__multiply+0xb2>
 800826c:	9b01      	ldr	r3, [sp, #4]
 800826e:	f845 c003 	str.w	ip, [r5, r3]
 8008272:	9b03      	ldr	r3, [sp, #12]
 8008274:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008278:	3104      	adds	r1, #4
 800827a:	f1b9 0f00 	cmp.w	r9, #0
 800827e:	d021      	beq.n	80082c4 <__multiply+0x144>
 8008280:	682b      	ldr	r3, [r5, #0]
 8008282:	f104 0c14 	add.w	ip, r4, #20
 8008286:	46ae      	mov	lr, r5
 8008288:	f04f 0a00 	mov.w	sl, #0
 800828c:	f8bc b000 	ldrh.w	fp, [ip]
 8008290:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008294:	fb09 770b 	mla	r7, r9, fp, r7
 8008298:	4457      	add	r7, sl
 800829a:	b29b      	uxth	r3, r3
 800829c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80082a0:	f84e 3b04 	str.w	r3, [lr], #4
 80082a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082ac:	f8be 3000 	ldrh.w	r3, [lr]
 80082b0:	fb09 330a 	mla	r3, r9, sl, r3
 80082b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80082b8:	4562      	cmp	r2, ip
 80082ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082be:	d8e5      	bhi.n	800828c <__multiply+0x10c>
 80082c0:	9f01      	ldr	r7, [sp, #4]
 80082c2:	51eb      	str	r3, [r5, r7]
 80082c4:	3504      	adds	r5, #4
 80082c6:	e799      	b.n	80081fc <__multiply+0x7c>
 80082c8:	3e01      	subs	r6, #1
 80082ca:	e79b      	b.n	8008204 <__multiply+0x84>
 80082cc:	08009320 	.word	0x08009320
 80082d0:	08009331 	.word	0x08009331

080082d4 <__pow5mult>:
 80082d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d8:	4615      	mov	r5, r2
 80082da:	f012 0203 	ands.w	r2, r2, #3
 80082de:	4607      	mov	r7, r0
 80082e0:	460e      	mov	r6, r1
 80082e2:	d007      	beq.n	80082f4 <__pow5mult+0x20>
 80082e4:	4c25      	ldr	r4, [pc, #148]	@ (800837c <__pow5mult+0xa8>)
 80082e6:	3a01      	subs	r2, #1
 80082e8:	2300      	movs	r3, #0
 80082ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082ee:	f7ff fe9f 	bl	8008030 <__multadd>
 80082f2:	4606      	mov	r6, r0
 80082f4:	10ad      	asrs	r5, r5, #2
 80082f6:	d03d      	beq.n	8008374 <__pow5mult+0xa0>
 80082f8:	69fc      	ldr	r4, [r7, #28]
 80082fa:	b97c      	cbnz	r4, 800831c <__pow5mult+0x48>
 80082fc:	2010      	movs	r0, #16
 80082fe:	f7fe f8bd 	bl	800647c <malloc>
 8008302:	4602      	mov	r2, r0
 8008304:	61f8      	str	r0, [r7, #28]
 8008306:	b928      	cbnz	r0, 8008314 <__pow5mult+0x40>
 8008308:	4b1d      	ldr	r3, [pc, #116]	@ (8008380 <__pow5mult+0xac>)
 800830a:	481e      	ldr	r0, [pc, #120]	@ (8008384 <__pow5mult+0xb0>)
 800830c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008310:	f000 fbda 	bl	8008ac8 <__assert_func>
 8008314:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008318:	6004      	str	r4, [r0, #0]
 800831a:	60c4      	str	r4, [r0, #12]
 800831c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008320:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008324:	b94c      	cbnz	r4, 800833a <__pow5mult+0x66>
 8008326:	f240 2171 	movw	r1, #625	@ 0x271
 800832a:	4638      	mov	r0, r7
 800832c:	f7ff ff12 	bl	8008154 <__i2b>
 8008330:	2300      	movs	r3, #0
 8008332:	f8c8 0008 	str.w	r0, [r8, #8]
 8008336:	4604      	mov	r4, r0
 8008338:	6003      	str	r3, [r0, #0]
 800833a:	f04f 0900 	mov.w	r9, #0
 800833e:	07eb      	lsls	r3, r5, #31
 8008340:	d50a      	bpl.n	8008358 <__pow5mult+0x84>
 8008342:	4631      	mov	r1, r6
 8008344:	4622      	mov	r2, r4
 8008346:	4638      	mov	r0, r7
 8008348:	f7ff ff1a 	bl	8008180 <__multiply>
 800834c:	4631      	mov	r1, r6
 800834e:	4680      	mov	r8, r0
 8008350:	4638      	mov	r0, r7
 8008352:	f7ff fe4b 	bl	8007fec <_Bfree>
 8008356:	4646      	mov	r6, r8
 8008358:	106d      	asrs	r5, r5, #1
 800835a:	d00b      	beq.n	8008374 <__pow5mult+0xa0>
 800835c:	6820      	ldr	r0, [r4, #0]
 800835e:	b938      	cbnz	r0, 8008370 <__pow5mult+0x9c>
 8008360:	4622      	mov	r2, r4
 8008362:	4621      	mov	r1, r4
 8008364:	4638      	mov	r0, r7
 8008366:	f7ff ff0b 	bl	8008180 <__multiply>
 800836a:	6020      	str	r0, [r4, #0]
 800836c:	f8c0 9000 	str.w	r9, [r0]
 8008370:	4604      	mov	r4, r0
 8008372:	e7e4      	b.n	800833e <__pow5mult+0x6a>
 8008374:	4630      	mov	r0, r6
 8008376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800837a:	bf00      	nop
 800837c:	0800938c 	.word	0x0800938c
 8008380:	080092b1 	.word	0x080092b1
 8008384:	08009331 	.word	0x08009331

08008388 <__lshift>:
 8008388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800838c:	460c      	mov	r4, r1
 800838e:	6849      	ldr	r1, [r1, #4]
 8008390:	6923      	ldr	r3, [r4, #16]
 8008392:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008396:	68a3      	ldr	r3, [r4, #8]
 8008398:	4607      	mov	r7, r0
 800839a:	4691      	mov	r9, r2
 800839c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083a0:	f108 0601 	add.w	r6, r8, #1
 80083a4:	42b3      	cmp	r3, r6
 80083a6:	db0b      	blt.n	80083c0 <__lshift+0x38>
 80083a8:	4638      	mov	r0, r7
 80083aa:	f7ff fddf 	bl	8007f6c <_Balloc>
 80083ae:	4605      	mov	r5, r0
 80083b0:	b948      	cbnz	r0, 80083c6 <__lshift+0x3e>
 80083b2:	4602      	mov	r2, r0
 80083b4:	4b28      	ldr	r3, [pc, #160]	@ (8008458 <__lshift+0xd0>)
 80083b6:	4829      	ldr	r0, [pc, #164]	@ (800845c <__lshift+0xd4>)
 80083b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80083bc:	f000 fb84 	bl	8008ac8 <__assert_func>
 80083c0:	3101      	adds	r1, #1
 80083c2:	005b      	lsls	r3, r3, #1
 80083c4:	e7ee      	b.n	80083a4 <__lshift+0x1c>
 80083c6:	2300      	movs	r3, #0
 80083c8:	f100 0114 	add.w	r1, r0, #20
 80083cc:	f100 0210 	add.w	r2, r0, #16
 80083d0:	4618      	mov	r0, r3
 80083d2:	4553      	cmp	r3, sl
 80083d4:	db33      	blt.n	800843e <__lshift+0xb6>
 80083d6:	6920      	ldr	r0, [r4, #16]
 80083d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083dc:	f104 0314 	add.w	r3, r4, #20
 80083e0:	f019 091f 	ands.w	r9, r9, #31
 80083e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083ec:	d02b      	beq.n	8008446 <__lshift+0xbe>
 80083ee:	f1c9 0e20 	rsb	lr, r9, #32
 80083f2:	468a      	mov	sl, r1
 80083f4:	2200      	movs	r2, #0
 80083f6:	6818      	ldr	r0, [r3, #0]
 80083f8:	fa00 f009 	lsl.w	r0, r0, r9
 80083fc:	4310      	orrs	r0, r2
 80083fe:	f84a 0b04 	str.w	r0, [sl], #4
 8008402:	f853 2b04 	ldr.w	r2, [r3], #4
 8008406:	459c      	cmp	ip, r3
 8008408:	fa22 f20e 	lsr.w	r2, r2, lr
 800840c:	d8f3      	bhi.n	80083f6 <__lshift+0x6e>
 800840e:	ebac 0304 	sub.w	r3, ip, r4
 8008412:	3b15      	subs	r3, #21
 8008414:	f023 0303 	bic.w	r3, r3, #3
 8008418:	3304      	adds	r3, #4
 800841a:	f104 0015 	add.w	r0, r4, #21
 800841e:	4584      	cmp	ip, r0
 8008420:	bf38      	it	cc
 8008422:	2304      	movcc	r3, #4
 8008424:	50ca      	str	r2, [r1, r3]
 8008426:	b10a      	cbz	r2, 800842c <__lshift+0xa4>
 8008428:	f108 0602 	add.w	r6, r8, #2
 800842c:	3e01      	subs	r6, #1
 800842e:	4638      	mov	r0, r7
 8008430:	612e      	str	r6, [r5, #16]
 8008432:	4621      	mov	r1, r4
 8008434:	f7ff fdda 	bl	8007fec <_Bfree>
 8008438:	4628      	mov	r0, r5
 800843a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800843e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008442:	3301      	adds	r3, #1
 8008444:	e7c5      	b.n	80083d2 <__lshift+0x4a>
 8008446:	3904      	subs	r1, #4
 8008448:	f853 2b04 	ldr.w	r2, [r3], #4
 800844c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008450:	459c      	cmp	ip, r3
 8008452:	d8f9      	bhi.n	8008448 <__lshift+0xc0>
 8008454:	e7ea      	b.n	800842c <__lshift+0xa4>
 8008456:	bf00      	nop
 8008458:	08009320 	.word	0x08009320
 800845c:	08009331 	.word	0x08009331

08008460 <__mcmp>:
 8008460:	690a      	ldr	r2, [r1, #16]
 8008462:	4603      	mov	r3, r0
 8008464:	6900      	ldr	r0, [r0, #16]
 8008466:	1a80      	subs	r0, r0, r2
 8008468:	b530      	push	{r4, r5, lr}
 800846a:	d10e      	bne.n	800848a <__mcmp+0x2a>
 800846c:	3314      	adds	r3, #20
 800846e:	3114      	adds	r1, #20
 8008470:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008474:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008478:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800847c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008480:	4295      	cmp	r5, r2
 8008482:	d003      	beq.n	800848c <__mcmp+0x2c>
 8008484:	d205      	bcs.n	8008492 <__mcmp+0x32>
 8008486:	f04f 30ff 	mov.w	r0, #4294967295
 800848a:	bd30      	pop	{r4, r5, pc}
 800848c:	42a3      	cmp	r3, r4
 800848e:	d3f3      	bcc.n	8008478 <__mcmp+0x18>
 8008490:	e7fb      	b.n	800848a <__mcmp+0x2a>
 8008492:	2001      	movs	r0, #1
 8008494:	e7f9      	b.n	800848a <__mcmp+0x2a>
	...

08008498 <__mdiff>:
 8008498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800849c:	4689      	mov	r9, r1
 800849e:	4606      	mov	r6, r0
 80084a0:	4611      	mov	r1, r2
 80084a2:	4648      	mov	r0, r9
 80084a4:	4614      	mov	r4, r2
 80084a6:	f7ff ffdb 	bl	8008460 <__mcmp>
 80084aa:	1e05      	subs	r5, r0, #0
 80084ac:	d112      	bne.n	80084d4 <__mdiff+0x3c>
 80084ae:	4629      	mov	r1, r5
 80084b0:	4630      	mov	r0, r6
 80084b2:	f7ff fd5b 	bl	8007f6c <_Balloc>
 80084b6:	4602      	mov	r2, r0
 80084b8:	b928      	cbnz	r0, 80084c6 <__mdiff+0x2e>
 80084ba:	4b3f      	ldr	r3, [pc, #252]	@ (80085b8 <__mdiff+0x120>)
 80084bc:	f240 2137 	movw	r1, #567	@ 0x237
 80084c0:	483e      	ldr	r0, [pc, #248]	@ (80085bc <__mdiff+0x124>)
 80084c2:	f000 fb01 	bl	8008ac8 <__assert_func>
 80084c6:	2301      	movs	r3, #1
 80084c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084cc:	4610      	mov	r0, r2
 80084ce:	b003      	add	sp, #12
 80084d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d4:	bfbc      	itt	lt
 80084d6:	464b      	movlt	r3, r9
 80084d8:	46a1      	movlt	r9, r4
 80084da:	4630      	mov	r0, r6
 80084dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80084e0:	bfba      	itte	lt
 80084e2:	461c      	movlt	r4, r3
 80084e4:	2501      	movlt	r5, #1
 80084e6:	2500      	movge	r5, #0
 80084e8:	f7ff fd40 	bl	8007f6c <_Balloc>
 80084ec:	4602      	mov	r2, r0
 80084ee:	b918      	cbnz	r0, 80084f8 <__mdiff+0x60>
 80084f0:	4b31      	ldr	r3, [pc, #196]	@ (80085b8 <__mdiff+0x120>)
 80084f2:	f240 2145 	movw	r1, #581	@ 0x245
 80084f6:	e7e3      	b.n	80084c0 <__mdiff+0x28>
 80084f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80084fc:	6926      	ldr	r6, [r4, #16]
 80084fe:	60c5      	str	r5, [r0, #12]
 8008500:	f109 0310 	add.w	r3, r9, #16
 8008504:	f109 0514 	add.w	r5, r9, #20
 8008508:	f104 0e14 	add.w	lr, r4, #20
 800850c:	f100 0b14 	add.w	fp, r0, #20
 8008510:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008514:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008518:	9301      	str	r3, [sp, #4]
 800851a:	46d9      	mov	r9, fp
 800851c:	f04f 0c00 	mov.w	ip, #0
 8008520:	9b01      	ldr	r3, [sp, #4]
 8008522:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008526:	f853 af04 	ldr.w	sl, [r3, #4]!
 800852a:	9301      	str	r3, [sp, #4]
 800852c:	fa1f f38a 	uxth.w	r3, sl
 8008530:	4619      	mov	r1, r3
 8008532:	b283      	uxth	r3, r0
 8008534:	1acb      	subs	r3, r1, r3
 8008536:	0c00      	lsrs	r0, r0, #16
 8008538:	4463      	add	r3, ip
 800853a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800853e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008542:	b29b      	uxth	r3, r3
 8008544:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008548:	4576      	cmp	r6, lr
 800854a:	f849 3b04 	str.w	r3, [r9], #4
 800854e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008552:	d8e5      	bhi.n	8008520 <__mdiff+0x88>
 8008554:	1b33      	subs	r3, r6, r4
 8008556:	3b15      	subs	r3, #21
 8008558:	f023 0303 	bic.w	r3, r3, #3
 800855c:	3415      	adds	r4, #21
 800855e:	3304      	adds	r3, #4
 8008560:	42a6      	cmp	r6, r4
 8008562:	bf38      	it	cc
 8008564:	2304      	movcc	r3, #4
 8008566:	441d      	add	r5, r3
 8008568:	445b      	add	r3, fp
 800856a:	461e      	mov	r6, r3
 800856c:	462c      	mov	r4, r5
 800856e:	4544      	cmp	r4, r8
 8008570:	d30e      	bcc.n	8008590 <__mdiff+0xf8>
 8008572:	f108 0103 	add.w	r1, r8, #3
 8008576:	1b49      	subs	r1, r1, r5
 8008578:	f021 0103 	bic.w	r1, r1, #3
 800857c:	3d03      	subs	r5, #3
 800857e:	45a8      	cmp	r8, r5
 8008580:	bf38      	it	cc
 8008582:	2100      	movcc	r1, #0
 8008584:	440b      	add	r3, r1
 8008586:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800858a:	b191      	cbz	r1, 80085b2 <__mdiff+0x11a>
 800858c:	6117      	str	r7, [r2, #16]
 800858e:	e79d      	b.n	80084cc <__mdiff+0x34>
 8008590:	f854 1b04 	ldr.w	r1, [r4], #4
 8008594:	46e6      	mov	lr, ip
 8008596:	0c08      	lsrs	r0, r1, #16
 8008598:	fa1c fc81 	uxtah	ip, ip, r1
 800859c:	4471      	add	r1, lr
 800859e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80085a2:	b289      	uxth	r1, r1
 80085a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085a8:	f846 1b04 	str.w	r1, [r6], #4
 80085ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085b0:	e7dd      	b.n	800856e <__mdiff+0xd6>
 80085b2:	3f01      	subs	r7, #1
 80085b4:	e7e7      	b.n	8008586 <__mdiff+0xee>
 80085b6:	bf00      	nop
 80085b8:	08009320 	.word	0x08009320
 80085bc:	08009331 	.word	0x08009331

080085c0 <__d2b>:
 80085c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085c4:	460f      	mov	r7, r1
 80085c6:	2101      	movs	r1, #1
 80085c8:	ec59 8b10 	vmov	r8, r9, d0
 80085cc:	4616      	mov	r6, r2
 80085ce:	f7ff fccd 	bl	8007f6c <_Balloc>
 80085d2:	4604      	mov	r4, r0
 80085d4:	b930      	cbnz	r0, 80085e4 <__d2b+0x24>
 80085d6:	4602      	mov	r2, r0
 80085d8:	4b23      	ldr	r3, [pc, #140]	@ (8008668 <__d2b+0xa8>)
 80085da:	4824      	ldr	r0, [pc, #144]	@ (800866c <__d2b+0xac>)
 80085dc:	f240 310f 	movw	r1, #783	@ 0x30f
 80085e0:	f000 fa72 	bl	8008ac8 <__assert_func>
 80085e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80085e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085ec:	b10d      	cbz	r5, 80085f2 <__d2b+0x32>
 80085ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085f2:	9301      	str	r3, [sp, #4]
 80085f4:	f1b8 0300 	subs.w	r3, r8, #0
 80085f8:	d023      	beq.n	8008642 <__d2b+0x82>
 80085fa:	4668      	mov	r0, sp
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	f7ff fd7c 	bl	80080fa <__lo0bits>
 8008602:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008606:	b1d0      	cbz	r0, 800863e <__d2b+0x7e>
 8008608:	f1c0 0320 	rsb	r3, r0, #32
 800860c:	fa02 f303 	lsl.w	r3, r2, r3
 8008610:	430b      	orrs	r3, r1
 8008612:	40c2      	lsrs	r2, r0
 8008614:	6163      	str	r3, [r4, #20]
 8008616:	9201      	str	r2, [sp, #4]
 8008618:	9b01      	ldr	r3, [sp, #4]
 800861a:	61a3      	str	r3, [r4, #24]
 800861c:	2b00      	cmp	r3, #0
 800861e:	bf0c      	ite	eq
 8008620:	2201      	moveq	r2, #1
 8008622:	2202      	movne	r2, #2
 8008624:	6122      	str	r2, [r4, #16]
 8008626:	b1a5      	cbz	r5, 8008652 <__d2b+0x92>
 8008628:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800862c:	4405      	add	r5, r0
 800862e:	603d      	str	r5, [r7, #0]
 8008630:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008634:	6030      	str	r0, [r6, #0]
 8008636:	4620      	mov	r0, r4
 8008638:	b003      	add	sp, #12
 800863a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800863e:	6161      	str	r1, [r4, #20]
 8008640:	e7ea      	b.n	8008618 <__d2b+0x58>
 8008642:	a801      	add	r0, sp, #4
 8008644:	f7ff fd59 	bl	80080fa <__lo0bits>
 8008648:	9b01      	ldr	r3, [sp, #4]
 800864a:	6163      	str	r3, [r4, #20]
 800864c:	3020      	adds	r0, #32
 800864e:	2201      	movs	r2, #1
 8008650:	e7e8      	b.n	8008624 <__d2b+0x64>
 8008652:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008656:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800865a:	6038      	str	r0, [r7, #0]
 800865c:	6918      	ldr	r0, [r3, #16]
 800865e:	f7ff fd2d 	bl	80080bc <__hi0bits>
 8008662:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008666:	e7e5      	b.n	8008634 <__d2b+0x74>
 8008668:	08009320 	.word	0x08009320
 800866c:	08009331 	.word	0x08009331

08008670 <__ssputs_r>:
 8008670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008674:	688e      	ldr	r6, [r1, #8]
 8008676:	461f      	mov	r7, r3
 8008678:	42be      	cmp	r6, r7
 800867a:	680b      	ldr	r3, [r1, #0]
 800867c:	4682      	mov	sl, r0
 800867e:	460c      	mov	r4, r1
 8008680:	4690      	mov	r8, r2
 8008682:	d82d      	bhi.n	80086e0 <__ssputs_r+0x70>
 8008684:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008688:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800868c:	d026      	beq.n	80086dc <__ssputs_r+0x6c>
 800868e:	6965      	ldr	r5, [r4, #20]
 8008690:	6909      	ldr	r1, [r1, #16]
 8008692:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008696:	eba3 0901 	sub.w	r9, r3, r1
 800869a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800869e:	1c7b      	adds	r3, r7, #1
 80086a0:	444b      	add	r3, r9
 80086a2:	106d      	asrs	r5, r5, #1
 80086a4:	429d      	cmp	r5, r3
 80086a6:	bf38      	it	cc
 80086a8:	461d      	movcc	r5, r3
 80086aa:	0553      	lsls	r3, r2, #21
 80086ac:	d527      	bpl.n	80086fe <__ssputs_r+0x8e>
 80086ae:	4629      	mov	r1, r5
 80086b0:	f7fd ff16 	bl	80064e0 <_malloc_r>
 80086b4:	4606      	mov	r6, r0
 80086b6:	b360      	cbz	r0, 8008712 <__ssputs_r+0xa2>
 80086b8:	6921      	ldr	r1, [r4, #16]
 80086ba:	464a      	mov	r2, r9
 80086bc:	f000 f9f6 	bl	8008aac <memcpy>
 80086c0:	89a3      	ldrh	r3, [r4, #12]
 80086c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80086c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086ca:	81a3      	strh	r3, [r4, #12]
 80086cc:	6126      	str	r6, [r4, #16]
 80086ce:	6165      	str	r5, [r4, #20]
 80086d0:	444e      	add	r6, r9
 80086d2:	eba5 0509 	sub.w	r5, r5, r9
 80086d6:	6026      	str	r6, [r4, #0]
 80086d8:	60a5      	str	r5, [r4, #8]
 80086da:	463e      	mov	r6, r7
 80086dc:	42be      	cmp	r6, r7
 80086de:	d900      	bls.n	80086e2 <__ssputs_r+0x72>
 80086e0:	463e      	mov	r6, r7
 80086e2:	6820      	ldr	r0, [r4, #0]
 80086e4:	4632      	mov	r2, r6
 80086e6:	4641      	mov	r1, r8
 80086e8:	f000 f9c6 	bl	8008a78 <memmove>
 80086ec:	68a3      	ldr	r3, [r4, #8]
 80086ee:	1b9b      	subs	r3, r3, r6
 80086f0:	60a3      	str	r3, [r4, #8]
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	4433      	add	r3, r6
 80086f6:	6023      	str	r3, [r4, #0]
 80086f8:	2000      	movs	r0, #0
 80086fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086fe:	462a      	mov	r2, r5
 8008700:	f000 fa26 	bl	8008b50 <_realloc_r>
 8008704:	4606      	mov	r6, r0
 8008706:	2800      	cmp	r0, #0
 8008708:	d1e0      	bne.n	80086cc <__ssputs_r+0x5c>
 800870a:	6921      	ldr	r1, [r4, #16]
 800870c:	4650      	mov	r0, sl
 800870e:	f7ff fbe3 	bl	8007ed8 <_free_r>
 8008712:	230c      	movs	r3, #12
 8008714:	f8ca 3000 	str.w	r3, [sl]
 8008718:	89a3      	ldrh	r3, [r4, #12]
 800871a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800871e:	81a3      	strh	r3, [r4, #12]
 8008720:	f04f 30ff 	mov.w	r0, #4294967295
 8008724:	e7e9      	b.n	80086fa <__ssputs_r+0x8a>
	...

08008728 <_svfiprintf_r>:
 8008728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	4698      	mov	r8, r3
 800872e:	898b      	ldrh	r3, [r1, #12]
 8008730:	061b      	lsls	r3, r3, #24
 8008732:	b09d      	sub	sp, #116	@ 0x74
 8008734:	4607      	mov	r7, r0
 8008736:	460d      	mov	r5, r1
 8008738:	4614      	mov	r4, r2
 800873a:	d510      	bpl.n	800875e <_svfiprintf_r+0x36>
 800873c:	690b      	ldr	r3, [r1, #16]
 800873e:	b973      	cbnz	r3, 800875e <_svfiprintf_r+0x36>
 8008740:	2140      	movs	r1, #64	@ 0x40
 8008742:	f7fd fecd 	bl	80064e0 <_malloc_r>
 8008746:	6028      	str	r0, [r5, #0]
 8008748:	6128      	str	r0, [r5, #16]
 800874a:	b930      	cbnz	r0, 800875a <_svfiprintf_r+0x32>
 800874c:	230c      	movs	r3, #12
 800874e:	603b      	str	r3, [r7, #0]
 8008750:	f04f 30ff 	mov.w	r0, #4294967295
 8008754:	b01d      	add	sp, #116	@ 0x74
 8008756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800875a:	2340      	movs	r3, #64	@ 0x40
 800875c:	616b      	str	r3, [r5, #20]
 800875e:	2300      	movs	r3, #0
 8008760:	9309      	str	r3, [sp, #36]	@ 0x24
 8008762:	2320      	movs	r3, #32
 8008764:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008768:	f8cd 800c 	str.w	r8, [sp, #12]
 800876c:	2330      	movs	r3, #48	@ 0x30
 800876e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800890c <_svfiprintf_r+0x1e4>
 8008772:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008776:	f04f 0901 	mov.w	r9, #1
 800877a:	4623      	mov	r3, r4
 800877c:	469a      	mov	sl, r3
 800877e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008782:	b10a      	cbz	r2, 8008788 <_svfiprintf_r+0x60>
 8008784:	2a25      	cmp	r2, #37	@ 0x25
 8008786:	d1f9      	bne.n	800877c <_svfiprintf_r+0x54>
 8008788:	ebba 0b04 	subs.w	fp, sl, r4
 800878c:	d00b      	beq.n	80087a6 <_svfiprintf_r+0x7e>
 800878e:	465b      	mov	r3, fp
 8008790:	4622      	mov	r2, r4
 8008792:	4629      	mov	r1, r5
 8008794:	4638      	mov	r0, r7
 8008796:	f7ff ff6b 	bl	8008670 <__ssputs_r>
 800879a:	3001      	adds	r0, #1
 800879c:	f000 80a7 	beq.w	80088ee <_svfiprintf_r+0x1c6>
 80087a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087a2:	445a      	add	r2, fp
 80087a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80087a6:	f89a 3000 	ldrb.w	r3, [sl]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 809f 	beq.w	80088ee <_svfiprintf_r+0x1c6>
 80087b0:	2300      	movs	r3, #0
 80087b2:	f04f 32ff 	mov.w	r2, #4294967295
 80087b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ba:	f10a 0a01 	add.w	sl, sl, #1
 80087be:	9304      	str	r3, [sp, #16]
 80087c0:	9307      	str	r3, [sp, #28]
 80087c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80087c8:	4654      	mov	r4, sl
 80087ca:	2205      	movs	r2, #5
 80087cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087d0:	484e      	ldr	r0, [pc, #312]	@ (800890c <_svfiprintf_r+0x1e4>)
 80087d2:	f7f7 fd1d 	bl	8000210 <memchr>
 80087d6:	9a04      	ldr	r2, [sp, #16]
 80087d8:	b9d8      	cbnz	r0, 8008812 <_svfiprintf_r+0xea>
 80087da:	06d0      	lsls	r0, r2, #27
 80087dc:	bf44      	itt	mi
 80087de:	2320      	movmi	r3, #32
 80087e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087e4:	0711      	lsls	r1, r2, #28
 80087e6:	bf44      	itt	mi
 80087e8:	232b      	movmi	r3, #43	@ 0x2b
 80087ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087ee:	f89a 3000 	ldrb.w	r3, [sl]
 80087f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80087f4:	d015      	beq.n	8008822 <_svfiprintf_r+0xfa>
 80087f6:	9a07      	ldr	r2, [sp, #28]
 80087f8:	4654      	mov	r4, sl
 80087fa:	2000      	movs	r0, #0
 80087fc:	f04f 0c0a 	mov.w	ip, #10
 8008800:	4621      	mov	r1, r4
 8008802:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008806:	3b30      	subs	r3, #48	@ 0x30
 8008808:	2b09      	cmp	r3, #9
 800880a:	d94b      	bls.n	80088a4 <_svfiprintf_r+0x17c>
 800880c:	b1b0      	cbz	r0, 800883c <_svfiprintf_r+0x114>
 800880e:	9207      	str	r2, [sp, #28]
 8008810:	e014      	b.n	800883c <_svfiprintf_r+0x114>
 8008812:	eba0 0308 	sub.w	r3, r0, r8
 8008816:	fa09 f303 	lsl.w	r3, r9, r3
 800881a:	4313      	orrs	r3, r2
 800881c:	9304      	str	r3, [sp, #16]
 800881e:	46a2      	mov	sl, r4
 8008820:	e7d2      	b.n	80087c8 <_svfiprintf_r+0xa0>
 8008822:	9b03      	ldr	r3, [sp, #12]
 8008824:	1d19      	adds	r1, r3, #4
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	9103      	str	r1, [sp, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	bfbb      	ittet	lt
 800882e:	425b      	neglt	r3, r3
 8008830:	f042 0202 	orrlt.w	r2, r2, #2
 8008834:	9307      	strge	r3, [sp, #28]
 8008836:	9307      	strlt	r3, [sp, #28]
 8008838:	bfb8      	it	lt
 800883a:	9204      	strlt	r2, [sp, #16]
 800883c:	7823      	ldrb	r3, [r4, #0]
 800883e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008840:	d10a      	bne.n	8008858 <_svfiprintf_r+0x130>
 8008842:	7863      	ldrb	r3, [r4, #1]
 8008844:	2b2a      	cmp	r3, #42	@ 0x2a
 8008846:	d132      	bne.n	80088ae <_svfiprintf_r+0x186>
 8008848:	9b03      	ldr	r3, [sp, #12]
 800884a:	1d1a      	adds	r2, r3, #4
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	9203      	str	r2, [sp, #12]
 8008850:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008854:	3402      	adds	r4, #2
 8008856:	9305      	str	r3, [sp, #20]
 8008858:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800891c <_svfiprintf_r+0x1f4>
 800885c:	7821      	ldrb	r1, [r4, #0]
 800885e:	2203      	movs	r2, #3
 8008860:	4650      	mov	r0, sl
 8008862:	f7f7 fcd5 	bl	8000210 <memchr>
 8008866:	b138      	cbz	r0, 8008878 <_svfiprintf_r+0x150>
 8008868:	9b04      	ldr	r3, [sp, #16]
 800886a:	eba0 000a 	sub.w	r0, r0, sl
 800886e:	2240      	movs	r2, #64	@ 0x40
 8008870:	4082      	lsls	r2, r0
 8008872:	4313      	orrs	r3, r2
 8008874:	3401      	adds	r4, #1
 8008876:	9304      	str	r3, [sp, #16]
 8008878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800887c:	4824      	ldr	r0, [pc, #144]	@ (8008910 <_svfiprintf_r+0x1e8>)
 800887e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008882:	2206      	movs	r2, #6
 8008884:	f7f7 fcc4 	bl	8000210 <memchr>
 8008888:	2800      	cmp	r0, #0
 800888a:	d036      	beq.n	80088fa <_svfiprintf_r+0x1d2>
 800888c:	4b21      	ldr	r3, [pc, #132]	@ (8008914 <_svfiprintf_r+0x1ec>)
 800888e:	bb1b      	cbnz	r3, 80088d8 <_svfiprintf_r+0x1b0>
 8008890:	9b03      	ldr	r3, [sp, #12]
 8008892:	3307      	adds	r3, #7
 8008894:	f023 0307 	bic.w	r3, r3, #7
 8008898:	3308      	adds	r3, #8
 800889a:	9303      	str	r3, [sp, #12]
 800889c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800889e:	4433      	add	r3, r6
 80088a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80088a2:	e76a      	b.n	800877a <_svfiprintf_r+0x52>
 80088a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80088a8:	460c      	mov	r4, r1
 80088aa:	2001      	movs	r0, #1
 80088ac:	e7a8      	b.n	8008800 <_svfiprintf_r+0xd8>
 80088ae:	2300      	movs	r3, #0
 80088b0:	3401      	adds	r4, #1
 80088b2:	9305      	str	r3, [sp, #20]
 80088b4:	4619      	mov	r1, r3
 80088b6:	f04f 0c0a 	mov.w	ip, #10
 80088ba:	4620      	mov	r0, r4
 80088bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088c0:	3a30      	subs	r2, #48	@ 0x30
 80088c2:	2a09      	cmp	r2, #9
 80088c4:	d903      	bls.n	80088ce <_svfiprintf_r+0x1a6>
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0c6      	beq.n	8008858 <_svfiprintf_r+0x130>
 80088ca:	9105      	str	r1, [sp, #20]
 80088cc:	e7c4      	b.n	8008858 <_svfiprintf_r+0x130>
 80088ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80088d2:	4604      	mov	r4, r0
 80088d4:	2301      	movs	r3, #1
 80088d6:	e7f0      	b.n	80088ba <_svfiprintf_r+0x192>
 80088d8:	ab03      	add	r3, sp, #12
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	462a      	mov	r2, r5
 80088de:	4b0e      	ldr	r3, [pc, #56]	@ (8008918 <_svfiprintf_r+0x1f0>)
 80088e0:	a904      	add	r1, sp, #16
 80088e2:	4638      	mov	r0, r7
 80088e4:	f7fd ff28 	bl	8006738 <_printf_float>
 80088e8:	1c42      	adds	r2, r0, #1
 80088ea:	4606      	mov	r6, r0
 80088ec:	d1d6      	bne.n	800889c <_svfiprintf_r+0x174>
 80088ee:	89ab      	ldrh	r3, [r5, #12]
 80088f0:	065b      	lsls	r3, r3, #25
 80088f2:	f53f af2d 	bmi.w	8008750 <_svfiprintf_r+0x28>
 80088f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088f8:	e72c      	b.n	8008754 <_svfiprintf_r+0x2c>
 80088fa:	ab03      	add	r3, sp, #12
 80088fc:	9300      	str	r3, [sp, #0]
 80088fe:	462a      	mov	r2, r5
 8008900:	4b05      	ldr	r3, [pc, #20]	@ (8008918 <_svfiprintf_r+0x1f0>)
 8008902:	a904      	add	r1, sp, #16
 8008904:	4638      	mov	r0, r7
 8008906:	f7fe f9af 	bl	8006c68 <_printf_i>
 800890a:	e7ed      	b.n	80088e8 <_svfiprintf_r+0x1c0>
 800890c:	08009488 	.word	0x08009488
 8008910:	08009492 	.word	0x08009492
 8008914:	08006739 	.word	0x08006739
 8008918:	08008671 	.word	0x08008671
 800891c:	0800948e 	.word	0x0800948e

08008920 <__sflush_r>:
 8008920:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008928:	0716      	lsls	r6, r2, #28
 800892a:	4605      	mov	r5, r0
 800892c:	460c      	mov	r4, r1
 800892e:	d454      	bmi.n	80089da <__sflush_r+0xba>
 8008930:	684b      	ldr	r3, [r1, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	dc02      	bgt.n	800893c <__sflush_r+0x1c>
 8008936:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008938:	2b00      	cmp	r3, #0
 800893a:	dd48      	ble.n	80089ce <__sflush_r+0xae>
 800893c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800893e:	2e00      	cmp	r6, #0
 8008940:	d045      	beq.n	80089ce <__sflush_r+0xae>
 8008942:	2300      	movs	r3, #0
 8008944:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008948:	682f      	ldr	r7, [r5, #0]
 800894a:	6a21      	ldr	r1, [r4, #32]
 800894c:	602b      	str	r3, [r5, #0]
 800894e:	d030      	beq.n	80089b2 <__sflush_r+0x92>
 8008950:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	0759      	lsls	r1, r3, #29
 8008956:	d505      	bpl.n	8008964 <__sflush_r+0x44>
 8008958:	6863      	ldr	r3, [r4, #4]
 800895a:	1ad2      	subs	r2, r2, r3
 800895c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800895e:	b10b      	cbz	r3, 8008964 <__sflush_r+0x44>
 8008960:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008962:	1ad2      	subs	r2, r2, r3
 8008964:	2300      	movs	r3, #0
 8008966:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008968:	6a21      	ldr	r1, [r4, #32]
 800896a:	4628      	mov	r0, r5
 800896c:	47b0      	blx	r6
 800896e:	1c43      	adds	r3, r0, #1
 8008970:	89a3      	ldrh	r3, [r4, #12]
 8008972:	d106      	bne.n	8008982 <__sflush_r+0x62>
 8008974:	6829      	ldr	r1, [r5, #0]
 8008976:	291d      	cmp	r1, #29
 8008978:	d82b      	bhi.n	80089d2 <__sflush_r+0xb2>
 800897a:	4a2a      	ldr	r2, [pc, #168]	@ (8008a24 <__sflush_r+0x104>)
 800897c:	410a      	asrs	r2, r1
 800897e:	07d6      	lsls	r6, r2, #31
 8008980:	d427      	bmi.n	80089d2 <__sflush_r+0xb2>
 8008982:	2200      	movs	r2, #0
 8008984:	6062      	str	r2, [r4, #4]
 8008986:	04d9      	lsls	r1, r3, #19
 8008988:	6922      	ldr	r2, [r4, #16]
 800898a:	6022      	str	r2, [r4, #0]
 800898c:	d504      	bpl.n	8008998 <__sflush_r+0x78>
 800898e:	1c42      	adds	r2, r0, #1
 8008990:	d101      	bne.n	8008996 <__sflush_r+0x76>
 8008992:	682b      	ldr	r3, [r5, #0]
 8008994:	b903      	cbnz	r3, 8008998 <__sflush_r+0x78>
 8008996:	6560      	str	r0, [r4, #84]	@ 0x54
 8008998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800899a:	602f      	str	r7, [r5, #0]
 800899c:	b1b9      	cbz	r1, 80089ce <__sflush_r+0xae>
 800899e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089a2:	4299      	cmp	r1, r3
 80089a4:	d002      	beq.n	80089ac <__sflush_r+0x8c>
 80089a6:	4628      	mov	r0, r5
 80089a8:	f7ff fa96 	bl	8007ed8 <_free_r>
 80089ac:	2300      	movs	r3, #0
 80089ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80089b0:	e00d      	b.n	80089ce <__sflush_r+0xae>
 80089b2:	2301      	movs	r3, #1
 80089b4:	4628      	mov	r0, r5
 80089b6:	47b0      	blx	r6
 80089b8:	4602      	mov	r2, r0
 80089ba:	1c50      	adds	r0, r2, #1
 80089bc:	d1c9      	bne.n	8008952 <__sflush_r+0x32>
 80089be:	682b      	ldr	r3, [r5, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d0c6      	beq.n	8008952 <__sflush_r+0x32>
 80089c4:	2b1d      	cmp	r3, #29
 80089c6:	d001      	beq.n	80089cc <__sflush_r+0xac>
 80089c8:	2b16      	cmp	r3, #22
 80089ca:	d11e      	bne.n	8008a0a <__sflush_r+0xea>
 80089cc:	602f      	str	r7, [r5, #0]
 80089ce:	2000      	movs	r0, #0
 80089d0:	e022      	b.n	8008a18 <__sflush_r+0xf8>
 80089d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089d6:	b21b      	sxth	r3, r3
 80089d8:	e01b      	b.n	8008a12 <__sflush_r+0xf2>
 80089da:	690f      	ldr	r7, [r1, #16]
 80089dc:	2f00      	cmp	r7, #0
 80089de:	d0f6      	beq.n	80089ce <__sflush_r+0xae>
 80089e0:	0793      	lsls	r3, r2, #30
 80089e2:	680e      	ldr	r6, [r1, #0]
 80089e4:	bf08      	it	eq
 80089e6:	694b      	ldreq	r3, [r1, #20]
 80089e8:	600f      	str	r7, [r1, #0]
 80089ea:	bf18      	it	ne
 80089ec:	2300      	movne	r3, #0
 80089ee:	eba6 0807 	sub.w	r8, r6, r7
 80089f2:	608b      	str	r3, [r1, #8]
 80089f4:	f1b8 0f00 	cmp.w	r8, #0
 80089f8:	dde9      	ble.n	80089ce <__sflush_r+0xae>
 80089fa:	6a21      	ldr	r1, [r4, #32]
 80089fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80089fe:	4643      	mov	r3, r8
 8008a00:	463a      	mov	r2, r7
 8008a02:	4628      	mov	r0, r5
 8008a04:	47b0      	blx	r6
 8008a06:	2800      	cmp	r0, #0
 8008a08:	dc08      	bgt.n	8008a1c <__sflush_r+0xfc>
 8008a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a12:	81a3      	strh	r3, [r4, #12]
 8008a14:	f04f 30ff 	mov.w	r0, #4294967295
 8008a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a1c:	4407      	add	r7, r0
 8008a1e:	eba8 0800 	sub.w	r8, r8, r0
 8008a22:	e7e7      	b.n	80089f4 <__sflush_r+0xd4>
 8008a24:	dfbffffe 	.word	0xdfbffffe

08008a28 <_fflush_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	690b      	ldr	r3, [r1, #16]
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	460c      	mov	r4, r1
 8008a30:	b913      	cbnz	r3, 8008a38 <_fflush_r+0x10>
 8008a32:	2500      	movs	r5, #0
 8008a34:	4628      	mov	r0, r5
 8008a36:	bd38      	pop	{r3, r4, r5, pc}
 8008a38:	b118      	cbz	r0, 8008a42 <_fflush_r+0x1a>
 8008a3a:	6a03      	ldr	r3, [r0, #32]
 8008a3c:	b90b      	cbnz	r3, 8008a42 <_fflush_r+0x1a>
 8008a3e:	f7fe fabf 	bl	8006fc0 <__sinit>
 8008a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0f3      	beq.n	8008a32 <_fflush_r+0xa>
 8008a4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a4c:	07d0      	lsls	r0, r2, #31
 8008a4e:	d404      	bmi.n	8008a5a <_fflush_r+0x32>
 8008a50:	0599      	lsls	r1, r3, #22
 8008a52:	d402      	bmi.n	8008a5a <_fflush_r+0x32>
 8008a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a56:	f7fe fbee 	bl	8007236 <__retarget_lock_acquire_recursive>
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	4621      	mov	r1, r4
 8008a5e:	f7ff ff5f 	bl	8008920 <__sflush_r>
 8008a62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a64:	07da      	lsls	r2, r3, #31
 8008a66:	4605      	mov	r5, r0
 8008a68:	d4e4      	bmi.n	8008a34 <_fflush_r+0xc>
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	059b      	lsls	r3, r3, #22
 8008a6e:	d4e1      	bmi.n	8008a34 <_fflush_r+0xc>
 8008a70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a72:	f7fe fbe1 	bl	8007238 <__retarget_lock_release_recursive>
 8008a76:	e7dd      	b.n	8008a34 <_fflush_r+0xc>

08008a78 <memmove>:
 8008a78:	4288      	cmp	r0, r1
 8008a7a:	b510      	push	{r4, lr}
 8008a7c:	eb01 0402 	add.w	r4, r1, r2
 8008a80:	d902      	bls.n	8008a88 <memmove+0x10>
 8008a82:	4284      	cmp	r4, r0
 8008a84:	4623      	mov	r3, r4
 8008a86:	d807      	bhi.n	8008a98 <memmove+0x20>
 8008a88:	1e43      	subs	r3, r0, #1
 8008a8a:	42a1      	cmp	r1, r4
 8008a8c:	d008      	beq.n	8008aa0 <memmove+0x28>
 8008a8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a96:	e7f8      	b.n	8008a8a <memmove+0x12>
 8008a98:	4402      	add	r2, r0
 8008a9a:	4601      	mov	r1, r0
 8008a9c:	428a      	cmp	r2, r1
 8008a9e:	d100      	bne.n	8008aa2 <memmove+0x2a>
 8008aa0:	bd10      	pop	{r4, pc}
 8008aa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008aa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008aaa:	e7f7      	b.n	8008a9c <memmove+0x24>

08008aac <memcpy>:
 8008aac:	440a      	add	r2, r1
 8008aae:	4291      	cmp	r1, r2
 8008ab0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ab4:	d100      	bne.n	8008ab8 <memcpy+0xc>
 8008ab6:	4770      	bx	lr
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008abe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ac2:	4291      	cmp	r1, r2
 8008ac4:	d1f9      	bne.n	8008aba <memcpy+0xe>
 8008ac6:	bd10      	pop	{r4, pc}

08008ac8 <__assert_func>:
 8008ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008aca:	4614      	mov	r4, r2
 8008acc:	461a      	mov	r2, r3
 8008ace:	4b09      	ldr	r3, [pc, #36]	@ (8008af4 <__assert_func+0x2c>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4605      	mov	r5, r0
 8008ad4:	68d8      	ldr	r0, [r3, #12]
 8008ad6:	b954      	cbnz	r4, 8008aee <__assert_func+0x26>
 8008ad8:	4b07      	ldr	r3, [pc, #28]	@ (8008af8 <__assert_func+0x30>)
 8008ada:	461c      	mov	r4, r3
 8008adc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ae0:	9100      	str	r1, [sp, #0]
 8008ae2:	462b      	mov	r3, r5
 8008ae4:	4905      	ldr	r1, [pc, #20]	@ (8008afc <__assert_func+0x34>)
 8008ae6:	f000 f86f 	bl	8008bc8 <fiprintf>
 8008aea:	f000 f87f 	bl	8008bec <abort>
 8008aee:	4b04      	ldr	r3, [pc, #16]	@ (8008b00 <__assert_func+0x38>)
 8008af0:	e7f4      	b.n	8008adc <__assert_func+0x14>
 8008af2:	bf00      	nop
 8008af4:	20000020 	.word	0x20000020
 8008af8:	080094de 	.word	0x080094de
 8008afc:	080094b0 	.word	0x080094b0
 8008b00:	080094a3 	.word	0x080094a3

08008b04 <_calloc_r>:
 8008b04:	b570      	push	{r4, r5, r6, lr}
 8008b06:	fba1 5402 	umull	r5, r4, r1, r2
 8008b0a:	b93c      	cbnz	r4, 8008b1c <_calloc_r+0x18>
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	f7fd fce7 	bl	80064e0 <_malloc_r>
 8008b12:	4606      	mov	r6, r0
 8008b14:	b928      	cbnz	r0, 8008b22 <_calloc_r+0x1e>
 8008b16:	2600      	movs	r6, #0
 8008b18:	4630      	mov	r0, r6
 8008b1a:	bd70      	pop	{r4, r5, r6, pc}
 8008b1c:	220c      	movs	r2, #12
 8008b1e:	6002      	str	r2, [r0, #0]
 8008b20:	e7f9      	b.n	8008b16 <_calloc_r+0x12>
 8008b22:	462a      	mov	r2, r5
 8008b24:	4621      	mov	r1, r4
 8008b26:	f7fe faf8 	bl	800711a <memset>
 8008b2a:	e7f5      	b.n	8008b18 <_calloc_r+0x14>

08008b2c <__ascii_mbtowc>:
 8008b2c:	b082      	sub	sp, #8
 8008b2e:	b901      	cbnz	r1, 8008b32 <__ascii_mbtowc+0x6>
 8008b30:	a901      	add	r1, sp, #4
 8008b32:	b142      	cbz	r2, 8008b46 <__ascii_mbtowc+0x1a>
 8008b34:	b14b      	cbz	r3, 8008b4a <__ascii_mbtowc+0x1e>
 8008b36:	7813      	ldrb	r3, [r2, #0]
 8008b38:	600b      	str	r3, [r1, #0]
 8008b3a:	7812      	ldrb	r2, [r2, #0]
 8008b3c:	1e10      	subs	r0, r2, #0
 8008b3e:	bf18      	it	ne
 8008b40:	2001      	movne	r0, #1
 8008b42:	b002      	add	sp, #8
 8008b44:	4770      	bx	lr
 8008b46:	4610      	mov	r0, r2
 8008b48:	e7fb      	b.n	8008b42 <__ascii_mbtowc+0x16>
 8008b4a:	f06f 0001 	mvn.w	r0, #1
 8008b4e:	e7f8      	b.n	8008b42 <__ascii_mbtowc+0x16>

08008b50 <_realloc_r>:
 8008b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b54:	4680      	mov	r8, r0
 8008b56:	4615      	mov	r5, r2
 8008b58:	460c      	mov	r4, r1
 8008b5a:	b921      	cbnz	r1, 8008b66 <_realloc_r+0x16>
 8008b5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b60:	4611      	mov	r1, r2
 8008b62:	f7fd bcbd 	b.w	80064e0 <_malloc_r>
 8008b66:	b92a      	cbnz	r2, 8008b74 <_realloc_r+0x24>
 8008b68:	f7ff f9b6 	bl	8007ed8 <_free_r>
 8008b6c:	2400      	movs	r4, #0
 8008b6e:	4620      	mov	r0, r4
 8008b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b74:	f000 f841 	bl	8008bfa <_malloc_usable_size_r>
 8008b78:	4285      	cmp	r5, r0
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	d802      	bhi.n	8008b84 <_realloc_r+0x34>
 8008b7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b82:	d8f4      	bhi.n	8008b6e <_realloc_r+0x1e>
 8008b84:	4629      	mov	r1, r5
 8008b86:	4640      	mov	r0, r8
 8008b88:	f7fd fcaa 	bl	80064e0 <_malloc_r>
 8008b8c:	4607      	mov	r7, r0
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	d0ec      	beq.n	8008b6c <_realloc_r+0x1c>
 8008b92:	42b5      	cmp	r5, r6
 8008b94:	462a      	mov	r2, r5
 8008b96:	4621      	mov	r1, r4
 8008b98:	bf28      	it	cs
 8008b9a:	4632      	movcs	r2, r6
 8008b9c:	f7ff ff86 	bl	8008aac <memcpy>
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	4640      	mov	r0, r8
 8008ba4:	f7ff f998 	bl	8007ed8 <_free_r>
 8008ba8:	463c      	mov	r4, r7
 8008baa:	e7e0      	b.n	8008b6e <_realloc_r+0x1e>

08008bac <__ascii_wctomb>:
 8008bac:	4603      	mov	r3, r0
 8008bae:	4608      	mov	r0, r1
 8008bb0:	b141      	cbz	r1, 8008bc4 <__ascii_wctomb+0x18>
 8008bb2:	2aff      	cmp	r2, #255	@ 0xff
 8008bb4:	d904      	bls.n	8008bc0 <__ascii_wctomb+0x14>
 8008bb6:	228a      	movs	r2, #138	@ 0x8a
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	f04f 30ff 	mov.w	r0, #4294967295
 8008bbe:	4770      	bx	lr
 8008bc0:	700a      	strb	r2, [r1, #0]
 8008bc2:	2001      	movs	r0, #1
 8008bc4:	4770      	bx	lr
	...

08008bc8 <fiprintf>:
 8008bc8:	b40e      	push	{r1, r2, r3}
 8008bca:	b503      	push	{r0, r1, lr}
 8008bcc:	4601      	mov	r1, r0
 8008bce:	ab03      	add	r3, sp, #12
 8008bd0:	4805      	ldr	r0, [pc, #20]	@ (8008be8 <fiprintf+0x20>)
 8008bd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bd6:	6800      	ldr	r0, [r0, #0]
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	f000 f83f 	bl	8008c5c <_vfiprintf_r>
 8008bde:	b002      	add	sp, #8
 8008be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008be4:	b003      	add	sp, #12
 8008be6:	4770      	bx	lr
 8008be8:	20000020 	.word	0x20000020

08008bec <abort>:
 8008bec:	b508      	push	{r3, lr}
 8008bee:	2006      	movs	r0, #6
 8008bf0:	f000 fa08 	bl	8009004 <raise>
 8008bf4:	2001      	movs	r0, #1
 8008bf6:	f7f9 fb05 	bl	8002204 <_exit>

08008bfa <_malloc_usable_size_r>:
 8008bfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bfe:	1f18      	subs	r0, r3, #4
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	bfbc      	itt	lt
 8008c04:	580b      	ldrlt	r3, [r1, r0]
 8008c06:	18c0      	addlt	r0, r0, r3
 8008c08:	4770      	bx	lr

08008c0a <__sfputc_r>:
 8008c0a:	6893      	ldr	r3, [r2, #8]
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	b410      	push	{r4}
 8008c12:	6093      	str	r3, [r2, #8]
 8008c14:	da08      	bge.n	8008c28 <__sfputc_r+0x1e>
 8008c16:	6994      	ldr	r4, [r2, #24]
 8008c18:	42a3      	cmp	r3, r4
 8008c1a:	db01      	blt.n	8008c20 <__sfputc_r+0x16>
 8008c1c:	290a      	cmp	r1, #10
 8008c1e:	d103      	bne.n	8008c28 <__sfputc_r+0x1e>
 8008c20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c24:	f000 b932 	b.w	8008e8c <__swbuf_r>
 8008c28:	6813      	ldr	r3, [r2, #0]
 8008c2a:	1c58      	adds	r0, r3, #1
 8008c2c:	6010      	str	r0, [r2, #0]
 8008c2e:	7019      	strb	r1, [r3, #0]
 8008c30:	4608      	mov	r0, r1
 8008c32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <__sfputs_r>:
 8008c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3a:	4606      	mov	r6, r0
 8008c3c:	460f      	mov	r7, r1
 8008c3e:	4614      	mov	r4, r2
 8008c40:	18d5      	adds	r5, r2, r3
 8008c42:	42ac      	cmp	r4, r5
 8008c44:	d101      	bne.n	8008c4a <__sfputs_r+0x12>
 8008c46:	2000      	movs	r0, #0
 8008c48:	e007      	b.n	8008c5a <__sfputs_r+0x22>
 8008c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c4e:	463a      	mov	r2, r7
 8008c50:	4630      	mov	r0, r6
 8008c52:	f7ff ffda 	bl	8008c0a <__sfputc_r>
 8008c56:	1c43      	adds	r3, r0, #1
 8008c58:	d1f3      	bne.n	8008c42 <__sfputs_r+0xa>
 8008c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c5c <_vfiprintf_r>:
 8008c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c60:	460d      	mov	r5, r1
 8008c62:	b09d      	sub	sp, #116	@ 0x74
 8008c64:	4614      	mov	r4, r2
 8008c66:	4698      	mov	r8, r3
 8008c68:	4606      	mov	r6, r0
 8008c6a:	b118      	cbz	r0, 8008c74 <_vfiprintf_r+0x18>
 8008c6c:	6a03      	ldr	r3, [r0, #32]
 8008c6e:	b90b      	cbnz	r3, 8008c74 <_vfiprintf_r+0x18>
 8008c70:	f7fe f9a6 	bl	8006fc0 <__sinit>
 8008c74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c76:	07d9      	lsls	r1, r3, #31
 8008c78:	d405      	bmi.n	8008c86 <_vfiprintf_r+0x2a>
 8008c7a:	89ab      	ldrh	r3, [r5, #12]
 8008c7c:	059a      	lsls	r2, r3, #22
 8008c7e:	d402      	bmi.n	8008c86 <_vfiprintf_r+0x2a>
 8008c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c82:	f7fe fad8 	bl	8007236 <__retarget_lock_acquire_recursive>
 8008c86:	89ab      	ldrh	r3, [r5, #12]
 8008c88:	071b      	lsls	r3, r3, #28
 8008c8a:	d501      	bpl.n	8008c90 <_vfiprintf_r+0x34>
 8008c8c:	692b      	ldr	r3, [r5, #16]
 8008c8e:	b99b      	cbnz	r3, 8008cb8 <_vfiprintf_r+0x5c>
 8008c90:	4629      	mov	r1, r5
 8008c92:	4630      	mov	r0, r6
 8008c94:	f000 f938 	bl	8008f08 <__swsetup_r>
 8008c98:	b170      	cbz	r0, 8008cb8 <_vfiprintf_r+0x5c>
 8008c9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c9c:	07dc      	lsls	r4, r3, #31
 8008c9e:	d504      	bpl.n	8008caa <_vfiprintf_r+0x4e>
 8008ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca4:	b01d      	add	sp, #116	@ 0x74
 8008ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008caa:	89ab      	ldrh	r3, [r5, #12]
 8008cac:	0598      	lsls	r0, r3, #22
 8008cae:	d4f7      	bmi.n	8008ca0 <_vfiprintf_r+0x44>
 8008cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cb2:	f7fe fac1 	bl	8007238 <__retarget_lock_release_recursive>
 8008cb6:	e7f3      	b.n	8008ca0 <_vfiprintf_r+0x44>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cbc:	2320      	movs	r3, #32
 8008cbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cc6:	2330      	movs	r3, #48	@ 0x30
 8008cc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e78 <_vfiprintf_r+0x21c>
 8008ccc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cd0:	f04f 0901 	mov.w	r9, #1
 8008cd4:	4623      	mov	r3, r4
 8008cd6:	469a      	mov	sl, r3
 8008cd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cdc:	b10a      	cbz	r2, 8008ce2 <_vfiprintf_r+0x86>
 8008cde:	2a25      	cmp	r2, #37	@ 0x25
 8008ce0:	d1f9      	bne.n	8008cd6 <_vfiprintf_r+0x7a>
 8008ce2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ce6:	d00b      	beq.n	8008d00 <_vfiprintf_r+0xa4>
 8008ce8:	465b      	mov	r3, fp
 8008cea:	4622      	mov	r2, r4
 8008cec:	4629      	mov	r1, r5
 8008cee:	4630      	mov	r0, r6
 8008cf0:	f7ff ffa2 	bl	8008c38 <__sfputs_r>
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	f000 80a7 	beq.w	8008e48 <_vfiprintf_r+0x1ec>
 8008cfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cfc:	445a      	add	r2, fp
 8008cfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d00:	f89a 3000 	ldrb.w	r3, [sl]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f000 809f 	beq.w	8008e48 <_vfiprintf_r+0x1ec>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d14:	f10a 0a01 	add.w	sl, sl, #1
 8008d18:	9304      	str	r3, [sp, #16]
 8008d1a:	9307      	str	r3, [sp, #28]
 8008d1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d20:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d22:	4654      	mov	r4, sl
 8008d24:	2205      	movs	r2, #5
 8008d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d2a:	4853      	ldr	r0, [pc, #332]	@ (8008e78 <_vfiprintf_r+0x21c>)
 8008d2c:	f7f7 fa70 	bl	8000210 <memchr>
 8008d30:	9a04      	ldr	r2, [sp, #16]
 8008d32:	b9d8      	cbnz	r0, 8008d6c <_vfiprintf_r+0x110>
 8008d34:	06d1      	lsls	r1, r2, #27
 8008d36:	bf44      	itt	mi
 8008d38:	2320      	movmi	r3, #32
 8008d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d3e:	0713      	lsls	r3, r2, #28
 8008d40:	bf44      	itt	mi
 8008d42:	232b      	movmi	r3, #43	@ 0x2b
 8008d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d48:	f89a 3000 	ldrb.w	r3, [sl]
 8008d4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d4e:	d015      	beq.n	8008d7c <_vfiprintf_r+0x120>
 8008d50:	9a07      	ldr	r2, [sp, #28]
 8008d52:	4654      	mov	r4, sl
 8008d54:	2000      	movs	r0, #0
 8008d56:	f04f 0c0a 	mov.w	ip, #10
 8008d5a:	4621      	mov	r1, r4
 8008d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d60:	3b30      	subs	r3, #48	@ 0x30
 8008d62:	2b09      	cmp	r3, #9
 8008d64:	d94b      	bls.n	8008dfe <_vfiprintf_r+0x1a2>
 8008d66:	b1b0      	cbz	r0, 8008d96 <_vfiprintf_r+0x13a>
 8008d68:	9207      	str	r2, [sp, #28]
 8008d6a:	e014      	b.n	8008d96 <_vfiprintf_r+0x13a>
 8008d6c:	eba0 0308 	sub.w	r3, r0, r8
 8008d70:	fa09 f303 	lsl.w	r3, r9, r3
 8008d74:	4313      	orrs	r3, r2
 8008d76:	9304      	str	r3, [sp, #16]
 8008d78:	46a2      	mov	sl, r4
 8008d7a:	e7d2      	b.n	8008d22 <_vfiprintf_r+0xc6>
 8008d7c:	9b03      	ldr	r3, [sp, #12]
 8008d7e:	1d19      	adds	r1, r3, #4
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	9103      	str	r1, [sp, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	bfbb      	ittet	lt
 8008d88:	425b      	neglt	r3, r3
 8008d8a:	f042 0202 	orrlt.w	r2, r2, #2
 8008d8e:	9307      	strge	r3, [sp, #28]
 8008d90:	9307      	strlt	r3, [sp, #28]
 8008d92:	bfb8      	it	lt
 8008d94:	9204      	strlt	r2, [sp, #16]
 8008d96:	7823      	ldrb	r3, [r4, #0]
 8008d98:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d9a:	d10a      	bne.n	8008db2 <_vfiprintf_r+0x156>
 8008d9c:	7863      	ldrb	r3, [r4, #1]
 8008d9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008da0:	d132      	bne.n	8008e08 <_vfiprintf_r+0x1ac>
 8008da2:	9b03      	ldr	r3, [sp, #12]
 8008da4:	1d1a      	adds	r2, r3, #4
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	9203      	str	r2, [sp, #12]
 8008daa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dae:	3402      	adds	r4, #2
 8008db0:	9305      	str	r3, [sp, #20]
 8008db2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e88 <_vfiprintf_r+0x22c>
 8008db6:	7821      	ldrb	r1, [r4, #0]
 8008db8:	2203      	movs	r2, #3
 8008dba:	4650      	mov	r0, sl
 8008dbc:	f7f7 fa28 	bl	8000210 <memchr>
 8008dc0:	b138      	cbz	r0, 8008dd2 <_vfiprintf_r+0x176>
 8008dc2:	9b04      	ldr	r3, [sp, #16]
 8008dc4:	eba0 000a 	sub.w	r0, r0, sl
 8008dc8:	2240      	movs	r2, #64	@ 0x40
 8008dca:	4082      	lsls	r2, r0
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	3401      	adds	r4, #1
 8008dd0:	9304      	str	r3, [sp, #16]
 8008dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd6:	4829      	ldr	r0, [pc, #164]	@ (8008e7c <_vfiprintf_r+0x220>)
 8008dd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ddc:	2206      	movs	r2, #6
 8008dde:	f7f7 fa17 	bl	8000210 <memchr>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d03f      	beq.n	8008e66 <_vfiprintf_r+0x20a>
 8008de6:	4b26      	ldr	r3, [pc, #152]	@ (8008e80 <_vfiprintf_r+0x224>)
 8008de8:	bb1b      	cbnz	r3, 8008e32 <_vfiprintf_r+0x1d6>
 8008dea:	9b03      	ldr	r3, [sp, #12]
 8008dec:	3307      	adds	r3, #7
 8008dee:	f023 0307 	bic.w	r3, r3, #7
 8008df2:	3308      	adds	r3, #8
 8008df4:	9303      	str	r3, [sp, #12]
 8008df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008df8:	443b      	add	r3, r7
 8008dfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dfc:	e76a      	b.n	8008cd4 <_vfiprintf_r+0x78>
 8008dfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e02:	460c      	mov	r4, r1
 8008e04:	2001      	movs	r0, #1
 8008e06:	e7a8      	b.n	8008d5a <_vfiprintf_r+0xfe>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	3401      	adds	r4, #1
 8008e0c:	9305      	str	r3, [sp, #20]
 8008e0e:	4619      	mov	r1, r3
 8008e10:	f04f 0c0a 	mov.w	ip, #10
 8008e14:	4620      	mov	r0, r4
 8008e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e1a:	3a30      	subs	r2, #48	@ 0x30
 8008e1c:	2a09      	cmp	r2, #9
 8008e1e:	d903      	bls.n	8008e28 <_vfiprintf_r+0x1cc>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d0c6      	beq.n	8008db2 <_vfiprintf_r+0x156>
 8008e24:	9105      	str	r1, [sp, #20]
 8008e26:	e7c4      	b.n	8008db2 <_vfiprintf_r+0x156>
 8008e28:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e7f0      	b.n	8008e14 <_vfiprintf_r+0x1b8>
 8008e32:	ab03      	add	r3, sp, #12
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	462a      	mov	r2, r5
 8008e38:	4b12      	ldr	r3, [pc, #72]	@ (8008e84 <_vfiprintf_r+0x228>)
 8008e3a:	a904      	add	r1, sp, #16
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	f7fd fc7b 	bl	8006738 <_printf_float>
 8008e42:	4607      	mov	r7, r0
 8008e44:	1c78      	adds	r0, r7, #1
 8008e46:	d1d6      	bne.n	8008df6 <_vfiprintf_r+0x19a>
 8008e48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e4a:	07d9      	lsls	r1, r3, #31
 8008e4c:	d405      	bmi.n	8008e5a <_vfiprintf_r+0x1fe>
 8008e4e:	89ab      	ldrh	r3, [r5, #12]
 8008e50:	059a      	lsls	r2, r3, #22
 8008e52:	d402      	bmi.n	8008e5a <_vfiprintf_r+0x1fe>
 8008e54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e56:	f7fe f9ef 	bl	8007238 <__retarget_lock_release_recursive>
 8008e5a:	89ab      	ldrh	r3, [r5, #12]
 8008e5c:	065b      	lsls	r3, r3, #25
 8008e5e:	f53f af1f 	bmi.w	8008ca0 <_vfiprintf_r+0x44>
 8008e62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e64:	e71e      	b.n	8008ca4 <_vfiprintf_r+0x48>
 8008e66:	ab03      	add	r3, sp, #12
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	462a      	mov	r2, r5
 8008e6c:	4b05      	ldr	r3, [pc, #20]	@ (8008e84 <_vfiprintf_r+0x228>)
 8008e6e:	a904      	add	r1, sp, #16
 8008e70:	4630      	mov	r0, r6
 8008e72:	f7fd fef9 	bl	8006c68 <_printf_i>
 8008e76:	e7e4      	b.n	8008e42 <_vfiprintf_r+0x1e6>
 8008e78:	08009488 	.word	0x08009488
 8008e7c:	08009492 	.word	0x08009492
 8008e80:	08006739 	.word	0x08006739
 8008e84:	08008c39 	.word	0x08008c39
 8008e88:	0800948e 	.word	0x0800948e

08008e8c <__swbuf_r>:
 8008e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8e:	460e      	mov	r6, r1
 8008e90:	4614      	mov	r4, r2
 8008e92:	4605      	mov	r5, r0
 8008e94:	b118      	cbz	r0, 8008e9e <__swbuf_r+0x12>
 8008e96:	6a03      	ldr	r3, [r0, #32]
 8008e98:	b90b      	cbnz	r3, 8008e9e <__swbuf_r+0x12>
 8008e9a:	f7fe f891 	bl	8006fc0 <__sinit>
 8008e9e:	69a3      	ldr	r3, [r4, #24]
 8008ea0:	60a3      	str	r3, [r4, #8]
 8008ea2:	89a3      	ldrh	r3, [r4, #12]
 8008ea4:	071a      	lsls	r2, r3, #28
 8008ea6:	d501      	bpl.n	8008eac <__swbuf_r+0x20>
 8008ea8:	6923      	ldr	r3, [r4, #16]
 8008eaa:	b943      	cbnz	r3, 8008ebe <__swbuf_r+0x32>
 8008eac:	4621      	mov	r1, r4
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f000 f82a 	bl	8008f08 <__swsetup_r>
 8008eb4:	b118      	cbz	r0, 8008ebe <__swbuf_r+0x32>
 8008eb6:	f04f 37ff 	mov.w	r7, #4294967295
 8008eba:	4638      	mov	r0, r7
 8008ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	6922      	ldr	r2, [r4, #16]
 8008ec2:	1a98      	subs	r0, r3, r2
 8008ec4:	6963      	ldr	r3, [r4, #20]
 8008ec6:	b2f6      	uxtb	r6, r6
 8008ec8:	4283      	cmp	r3, r0
 8008eca:	4637      	mov	r7, r6
 8008ecc:	dc05      	bgt.n	8008eda <__swbuf_r+0x4e>
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	f7ff fda9 	bl	8008a28 <_fflush_r>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d1ed      	bne.n	8008eb6 <__swbuf_r+0x2a>
 8008eda:	68a3      	ldr	r3, [r4, #8]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	60a3      	str	r3, [r4, #8]
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	6022      	str	r2, [r4, #0]
 8008ee6:	701e      	strb	r6, [r3, #0]
 8008ee8:	6962      	ldr	r2, [r4, #20]
 8008eea:	1c43      	adds	r3, r0, #1
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d004      	beq.n	8008efa <__swbuf_r+0x6e>
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	07db      	lsls	r3, r3, #31
 8008ef4:	d5e1      	bpl.n	8008eba <__swbuf_r+0x2e>
 8008ef6:	2e0a      	cmp	r6, #10
 8008ef8:	d1df      	bne.n	8008eba <__swbuf_r+0x2e>
 8008efa:	4621      	mov	r1, r4
 8008efc:	4628      	mov	r0, r5
 8008efe:	f7ff fd93 	bl	8008a28 <_fflush_r>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d0d9      	beq.n	8008eba <__swbuf_r+0x2e>
 8008f06:	e7d6      	b.n	8008eb6 <__swbuf_r+0x2a>

08008f08 <__swsetup_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4b29      	ldr	r3, [pc, #164]	@ (8008fb0 <__swsetup_r+0xa8>)
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	6818      	ldr	r0, [r3, #0]
 8008f10:	460c      	mov	r4, r1
 8008f12:	b118      	cbz	r0, 8008f1c <__swsetup_r+0x14>
 8008f14:	6a03      	ldr	r3, [r0, #32]
 8008f16:	b90b      	cbnz	r3, 8008f1c <__swsetup_r+0x14>
 8008f18:	f7fe f852 	bl	8006fc0 <__sinit>
 8008f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f20:	0719      	lsls	r1, r3, #28
 8008f22:	d422      	bmi.n	8008f6a <__swsetup_r+0x62>
 8008f24:	06da      	lsls	r2, r3, #27
 8008f26:	d407      	bmi.n	8008f38 <__swsetup_r+0x30>
 8008f28:	2209      	movs	r2, #9
 8008f2a:	602a      	str	r2, [r5, #0]
 8008f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f30:	81a3      	strh	r3, [r4, #12]
 8008f32:	f04f 30ff 	mov.w	r0, #4294967295
 8008f36:	e033      	b.n	8008fa0 <__swsetup_r+0x98>
 8008f38:	0758      	lsls	r0, r3, #29
 8008f3a:	d512      	bpl.n	8008f62 <__swsetup_r+0x5a>
 8008f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f3e:	b141      	cbz	r1, 8008f52 <__swsetup_r+0x4a>
 8008f40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f44:	4299      	cmp	r1, r3
 8008f46:	d002      	beq.n	8008f4e <__swsetup_r+0x46>
 8008f48:	4628      	mov	r0, r5
 8008f4a:	f7fe ffc5 	bl	8007ed8 <_free_r>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f52:	89a3      	ldrh	r3, [r4, #12]
 8008f54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f58:	81a3      	strh	r3, [r4, #12]
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	6063      	str	r3, [r4, #4]
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	f043 0308 	orr.w	r3, r3, #8
 8008f68:	81a3      	strh	r3, [r4, #12]
 8008f6a:	6923      	ldr	r3, [r4, #16]
 8008f6c:	b94b      	cbnz	r3, 8008f82 <__swsetup_r+0x7a>
 8008f6e:	89a3      	ldrh	r3, [r4, #12]
 8008f70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f78:	d003      	beq.n	8008f82 <__swsetup_r+0x7a>
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	f000 f883 	bl	8009088 <__smakebuf_r>
 8008f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f86:	f013 0201 	ands.w	r2, r3, #1
 8008f8a:	d00a      	beq.n	8008fa2 <__swsetup_r+0x9a>
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	60a2      	str	r2, [r4, #8]
 8008f90:	6962      	ldr	r2, [r4, #20]
 8008f92:	4252      	negs	r2, r2
 8008f94:	61a2      	str	r2, [r4, #24]
 8008f96:	6922      	ldr	r2, [r4, #16]
 8008f98:	b942      	cbnz	r2, 8008fac <__swsetup_r+0xa4>
 8008f9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f9e:	d1c5      	bne.n	8008f2c <__swsetup_r+0x24>
 8008fa0:	bd38      	pop	{r3, r4, r5, pc}
 8008fa2:	0799      	lsls	r1, r3, #30
 8008fa4:	bf58      	it	pl
 8008fa6:	6962      	ldrpl	r2, [r4, #20]
 8008fa8:	60a2      	str	r2, [r4, #8]
 8008faa:	e7f4      	b.n	8008f96 <__swsetup_r+0x8e>
 8008fac:	2000      	movs	r0, #0
 8008fae:	e7f7      	b.n	8008fa0 <__swsetup_r+0x98>
 8008fb0:	20000020 	.word	0x20000020

08008fb4 <_raise_r>:
 8008fb4:	291f      	cmp	r1, #31
 8008fb6:	b538      	push	{r3, r4, r5, lr}
 8008fb8:	4605      	mov	r5, r0
 8008fba:	460c      	mov	r4, r1
 8008fbc:	d904      	bls.n	8008fc8 <_raise_r+0x14>
 8008fbe:	2316      	movs	r3, #22
 8008fc0:	6003      	str	r3, [r0, #0]
 8008fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc6:	bd38      	pop	{r3, r4, r5, pc}
 8008fc8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fca:	b112      	cbz	r2, 8008fd2 <_raise_r+0x1e>
 8008fcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fd0:	b94b      	cbnz	r3, 8008fe6 <_raise_r+0x32>
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f000 f830 	bl	8009038 <_getpid_r>
 8008fd8:	4622      	mov	r2, r4
 8008fda:	4601      	mov	r1, r0
 8008fdc:	4628      	mov	r0, r5
 8008fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fe2:	f000 b817 	b.w	8009014 <_kill_r>
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d00a      	beq.n	8009000 <_raise_r+0x4c>
 8008fea:	1c59      	adds	r1, r3, #1
 8008fec:	d103      	bne.n	8008ff6 <_raise_r+0x42>
 8008fee:	2316      	movs	r3, #22
 8008ff0:	6003      	str	r3, [r0, #0]
 8008ff2:	2001      	movs	r0, #1
 8008ff4:	e7e7      	b.n	8008fc6 <_raise_r+0x12>
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	4798      	blx	r3
 8009000:	2000      	movs	r0, #0
 8009002:	e7e0      	b.n	8008fc6 <_raise_r+0x12>

08009004 <raise>:
 8009004:	4b02      	ldr	r3, [pc, #8]	@ (8009010 <raise+0xc>)
 8009006:	4601      	mov	r1, r0
 8009008:	6818      	ldr	r0, [r3, #0]
 800900a:	f7ff bfd3 	b.w	8008fb4 <_raise_r>
 800900e:	bf00      	nop
 8009010:	20000020 	.word	0x20000020

08009014 <_kill_r>:
 8009014:	b538      	push	{r3, r4, r5, lr}
 8009016:	4d07      	ldr	r5, [pc, #28]	@ (8009034 <_kill_r+0x20>)
 8009018:	2300      	movs	r3, #0
 800901a:	4604      	mov	r4, r0
 800901c:	4608      	mov	r0, r1
 800901e:	4611      	mov	r1, r2
 8009020:	602b      	str	r3, [r5, #0]
 8009022:	f7f9 f8df 	bl	80021e4 <_kill>
 8009026:	1c43      	adds	r3, r0, #1
 8009028:	d102      	bne.n	8009030 <_kill_r+0x1c>
 800902a:	682b      	ldr	r3, [r5, #0]
 800902c:	b103      	cbz	r3, 8009030 <_kill_r+0x1c>
 800902e:	6023      	str	r3, [r4, #0]
 8009030:	bd38      	pop	{r3, r4, r5, pc}
 8009032:	bf00      	nop
 8009034:	2000059c 	.word	0x2000059c

08009038 <_getpid_r>:
 8009038:	f7f9 b8cc 	b.w	80021d4 <_getpid>

0800903c <__swhatbuf_r>:
 800903c:	b570      	push	{r4, r5, r6, lr}
 800903e:	460c      	mov	r4, r1
 8009040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009044:	2900      	cmp	r1, #0
 8009046:	b096      	sub	sp, #88	@ 0x58
 8009048:	4615      	mov	r5, r2
 800904a:	461e      	mov	r6, r3
 800904c:	da0d      	bge.n	800906a <__swhatbuf_r+0x2e>
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009054:	f04f 0100 	mov.w	r1, #0
 8009058:	bf14      	ite	ne
 800905a:	2340      	movne	r3, #64	@ 0x40
 800905c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009060:	2000      	movs	r0, #0
 8009062:	6031      	str	r1, [r6, #0]
 8009064:	602b      	str	r3, [r5, #0]
 8009066:	b016      	add	sp, #88	@ 0x58
 8009068:	bd70      	pop	{r4, r5, r6, pc}
 800906a:	466a      	mov	r2, sp
 800906c:	f000 f848 	bl	8009100 <_fstat_r>
 8009070:	2800      	cmp	r0, #0
 8009072:	dbec      	blt.n	800904e <__swhatbuf_r+0x12>
 8009074:	9901      	ldr	r1, [sp, #4]
 8009076:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800907a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800907e:	4259      	negs	r1, r3
 8009080:	4159      	adcs	r1, r3
 8009082:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009086:	e7eb      	b.n	8009060 <__swhatbuf_r+0x24>

08009088 <__smakebuf_r>:
 8009088:	898b      	ldrh	r3, [r1, #12]
 800908a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800908c:	079d      	lsls	r5, r3, #30
 800908e:	4606      	mov	r6, r0
 8009090:	460c      	mov	r4, r1
 8009092:	d507      	bpl.n	80090a4 <__smakebuf_r+0x1c>
 8009094:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009098:	6023      	str	r3, [r4, #0]
 800909a:	6123      	str	r3, [r4, #16]
 800909c:	2301      	movs	r3, #1
 800909e:	6163      	str	r3, [r4, #20]
 80090a0:	b003      	add	sp, #12
 80090a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090a4:	ab01      	add	r3, sp, #4
 80090a6:	466a      	mov	r2, sp
 80090a8:	f7ff ffc8 	bl	800903c <__swhatbuf_r>
 80090ac:	9f00      	ldr	r7, [sp, #0]
 80090ae:	4605      	mov	r5, r0
 80090b0:	4639      	mov	r1, r7
 80090b2:	4630      	mov	r0, r6
 80090b4:	f7fd fa14 	bl	80064e0 <_malloc_r>
 80090b8:	b948      	cbnz	r0, 80090ce <__smakebuf_r+0x46>
 80090ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090be:	059a      	lsls	r2, r3, #22
 80090c0:	d4ee      	bmi.n	80090a0 <__smakebuf_r+0x18>
 80090c2:	f023 0303 	bic.w	r3, r3, #3
 80090c6:	f043 0302 	orr.w	r3, r3, #2
 80090ca:	81a3      	strh	r3, [r4, #12]
 80090cc:	e7e2      	b.n	8009094 <__smakebuf_r+0xc>
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	6020      	str	r0, [r4, #0]
 80090d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090d6:	81a3      	strh	r3, [r4, #12]
 80090d8:	9b01      	ldr	r3, [sp, #4]
 80090da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090de:	b15b      	cbz	r3, 80090f8 <__smakebuf_r+0x70>
 80090e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090e4:	4630      	mov	r0, r6
 80090e6:	f000 f81d 	bl	8009124 <_isatty_r>
 80090ea:	b128      	cbz	r0, 80090f8 <__smakebuf_r+0x70>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	f023 0303 	bic.w	r3, r3, #3
 80090f2:	f043 0301 	orr.w	r3, r3, #1
 80090f6:	81a3      	strh	r3, [r4, #12]
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	431d      	orrs	r5, r3
 80090fc:	81a5      	strh	r5, [r4, #12]
 80090fe:	e7cf      	b.n	80090a0 <__smakebuf_r+0x18>

08009100 <_fstat_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	4d07      	ldr	r5, [pc, #28]	@ (8009120 <_fstat_r+0x20>)
 8009104:	2300      	movs	r3, #0
 8009106:	4604      	mov	r4, r0
 8009108:	4608      	mov	r0, r1
 800910a:	4611      	mov	r1, r2
 800910c:	602b      	str	r3, [r5, #0]
 800910e:	f7f9 f8c9 	bl	80022a4 <_fstat>
 8009112:	1c43      	adds	r3, r0, #1
 8009114:	d102      	bne.n	800911c <_fstat_r+0x1c>
 8009116:	682b      	ldr	r3, [r5, #0]
 8009118:	b103      	cbz	r3, 800911c <_fstat_r+0x1c>
 800911a:	6023      	str	r3, [r4, #0]
 800911c:	bd38      	pop	{r3, r4, r5, pc}
 800911e:	bf00      	nop
 8009120:	2000059c 	.word	0x2000059c

08009124 <_isatty_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	4d06      	ldr	r5, [pc, #24]	@ (8009140 <_isatty_r+0x1c>)
 8009128:	2300      	movs	r3, #0
 800912a:	4604      	mov	r4, r0
 800912c:	4608      	mov	r0, r1
 800912e:	602b      	str	r3, [r5, #0]
 8009130:	f7f9 f8c8 	bl	80022c4 <_isatty>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d102      	bne.n	800913e <_isatty_r+0x1a>
 8009138:	682b      	ldr	r3, [r5, #0]
 800913a:	b103      	cbz	r3, 800913e <_isatty_r+0x1a>
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	2000059c 	.word	0x2000059c

08009144 <_init>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	bf00      	nop
 8009148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914a:	bc08      	pop	{r3}
 800914c:	469e      	mov	lr, r3
 800914e:	4770      	bx	lr

08009150 <_fini>:
 8009150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009152:	bf00      	nop
 8009154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009156:	bc08      	pop	{r3}
 8009158:	469e      	mov	lr, r3
 800915a:	4770      	bx	lr
