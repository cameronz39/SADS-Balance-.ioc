
SADS_MBS_Operation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088f4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08008ac8  08008ac8  00009ac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f08  08008f08  0000a1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008f08  08008f08  00009f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f10  08008f10  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008f10  08008f10  00009f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08008f18  08008f18  00009f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08008f20  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  200001dc  080090fc  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  080090fc  0000a66c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015296  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033de  00000000  00000000  0001f4a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  00022880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec4  00000000  00000000  00023b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a3d  00000000  00000000  00024a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017676  00000000  00000000  0004b469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d947e  00000000  00000000  00062adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013bf5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000619c  00000000  00000000  0013bfa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0014213c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008aac 	.word	0x08008aac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08008aac 	.word	0x08008aac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MTi_reset>:
	Xbus_message(m_xbusTxBuffer, 0xFF, XMID_GotoMeasurement, 0);
	rawLength = Xbus_createRawMessageHelper(buffer, m_xbusTxBuffer);
	HAL_I2C_Master_Transmit(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1), (uint8_t*)buffer, rawLength, 100);
}

void MTi_reset() {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2120      	movs	r1, #32
 8000ee0:	4806      	ldr	r0, [pc, #24]	@ (8000efc <MTi_reset+0x24>)
 8000ee2:	f001 fe55 	bl	8002b90 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000ee6:	2064      	movs	r0, #100	@ 0x64
 8000ee8:	f001 fb70 	bl	80025cc <HAL_Delay>
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2120      	movs	r1, #32
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <MTi_reset+0x24>)
 8000ef2:	f001 fe4d 	bl	8002b90 <HAL_GPIO_WritePin>
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40020400 	.word	0x40020400

08000f00 <MTi_step>:

void MTi_step(float *anglesBuffer, size_t bufferLength) {
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b08b      	sub	sp, #44	@ 0x2c
 8000f04:	af04      	add	r7, sp, #16
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
    // Ensure the provided buffer is large enough (needs at least 3 floats).
    if (bufferLength < 3) {
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d80e      	bhi.n	8000f2e <MTi_step+0x2e>
        // Optionally, you can handle the error here.
        int len = snprintf(UART_buffer, sizeof(UART_buffer), "Error\n");
 8000f10:	4a4c      	ldr	r2, [pc, #304]	@ (8001044 <MTi_step+0x144>)
 8000f12:	2164      	movs	r1, #100	@ 0x64
 8000f14:	484c      	ldr	r0, [pc, #304]	@ (8001048 <MTi_step+0x148>)
 8000f16:	f005 fd3d 	bl	8006994 <sniprintf>
 8000f1a:	6138      	str	r0, [r7, #16]
        HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 10000);
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000f24:	4948      	ldr	r1, [pc, #288]	@ (8001048 <MTi_step+0x148>)
 8000f26:	4849      	ldr	r0, [pc, #292]	@ (800104c <MTi_step+0x14c>)
 8000f28:	f004 fb9c 	bl	8005664 <HAL_UART_Transmit>
        return;
 8000f2c:	e086      	b.n	800103c <MTi_step+0x13c>
    }

    // Check if new data is available.
    if (checkDataReadyLineMain()) {
 8000f2e:	f001 f9fb 	bl	8002328 <checkDataReadyLineMain>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d023      	beq.n	8000f80 <MTi_step+0x80>
        HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1),
 8000f38:	2364      	movs	r3, #100	@ 0x64
 8000f3a:	9302      	str	r3, [sp, #8]
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	4b43      	ldr	r3, [pc, #268]	@ (8001050 <MTi_step+0x150>)
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2301      	movs	r3, #1
 8000f46:	2204      	movs	r2, #4
 8000f48:	21d6      	movs	r1, #214	@ 0xd6
 8000f4a:	4842      	ldr	r0, [pc, #264]	@ (8001054 <MTi_step+0x154>)
 8000f4c:	f001 ff96 	bl	8002e7c <HAL_I2C_Mem_Read>
                           XBUS_PIPE_STATUS, 1, status, sizeof(status), 100);
        notificationMessageSize = status[0] | (status[1] << 8);
 8000f50:	4b3f      	ldr	r3, [pc, #252]	@ (8001050 <MTi_step+0x150>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	4b3e      	ldr	r3, [pc, #248]	@ (8001050 <MTi_step+0x150>)
 8000f58:	785b      	ldrb	r3, [r3, #1]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	4b3c      	ldr	r3, [pc, #240]	@ (8001058 <MTi_step+0x158>)
 8000f66:	801a      	strh	r2, [r3, #0]
        measurementMessageSize    = status[2] | (status[3] << 8);
 8000f68:	4b39      	ldr	r3, [pc, #228]	@ (8001050 <MTi_step+0x150>)
 8000f6a:	789b      	ldrb	r3, [r3, #2]
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	4b38      	ldr	r3, [pc, #224]	@ (8001050 <MTi_step+0x150>)
 8000f70:	78db      	ldrb	r3, [r3, #3]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	4b37      	ldr	r3, [pc, #220]	@ (800105c <MTi_step+0x15c>)
 8000f7e:	801a      	strh	r2, [r3, #0]
    }

//	int len = snprintf(UART_buffer, sizeof(UART_buffer), "Notification: %d, Measurement: %d\n",notificationMessageSize,measurementMessageSize);
//	HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 10000);

    if (measurementMessageSize && measurementMessageSize < sizeof(m_dataBuffer)) {
 8000f80:	4b36      	ldr	r3, [pc, #216]	@ (800105c <MTi_step+0x15c>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d059      	beq.n	800103c <MTi_step+0x13c>
 8000f88:	4b34      	ldr	r3, [pc, #208]	@ (800105c <MTi_step+0x15c>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	2bff      	cmp	r3, #255	@ 0xff
 8000f8e:	d855      	bhi.n	800103c <MTi_step+0x13c>
        if (checkDataReadyLineMain()) {
 8000f90:	f001 f9ca 	bl	8002328 <checkDataReadyLineMain>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d050      	beq.n	800103c <MTi_step+0x13c>
            // Read the measurement data into the buffer (starting at offset 2)
            HAL_I2C_Mem_Read(&hi2c1, (MTI_I2C_DEVICE_ADDRESS << 1),
 8000f9a:	4b30      	ldr	r3, [pc, #192]	@ (800105c <MTi_step+0x15c>)
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	2264      	movs	r2, #100	@ 0x64
 8000fa0:	9202      	str	r2, [sp, #8]
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8001060 <MTi_step+0x160>)
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	2206      	movs	r2, #6
 8000fac:	21d6      	movs	r1, #214	@ 0xd6
 8000fae:	4829      	ldr	r0, [pc, #164]	@ (8001054 <MTi_step+0x154>)
 8000fb0:	f001 ff64 	bl	8002e7c <HAL_I2C_Mem_Read>
                               XBUS_MEASUREMENT_PIPE, 1, &m_dataBuffer[2],
                               measurementMessageSize, 100);

            // Check that the message is of type XMID_MtData2
            if (Xbus_getMessageId(m_dataBuffer) == XMID_MtData2) {
 8000fb4:	482b      	ldr	r0, [pc, #172]	@ (8001064 <MTi_step+0x164>)
 8000fb6:	f001 f9a9 	bl	800230c <Xbus_getMessageId>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b36      	cmp	r3, #54	@ 0x36
 8000fbe:	d13d      	bne.n	800103c <MTi_step+0x13c>
//            	int len = snprintf(UART_buffer, sizeof(UART_buffer), "Took a meausrement\n");
//            	HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer, len, 10000);
                int index = 4;  // Start index for reading the payload
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	60fb      	str	r3, [r7, #12]

                uint16_t dataId   = extractUint16(m_dataBuffer, &index);
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4826      	ldr	r0, [pc, #152]	@ (8001064 <MTi_step+0x164>)
 8000fcc:	f001 f9d4 	bl	8002378 <extractUint16>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	82fb      	strh	r3, [r7, #22]
                uint8_t  dataSize = extractUint8(m_dataBuffer, &index);
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4822      	ldr	r0, [pc, #136]	@ (8001064 <MTi_step+0x164>)
 8000fdc:	f001 f9b4 	bl	8002348 <extractUint8>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	757b      	strb	r3, [r7, #21]
                if (dataId == 0x2030 && dataSize == 12) {
 8000fe4:	8afb      	ldrh	r3, [r7, #22]
 8000fe6:	f242 0230 	movw	r2, #8240	@ 0x2030
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d126      	bne.n	800103c <MTi_step+0x13c>
 8000fee:	7d7b      	ldrb	r3, [r7, #21]
 8000ff0:	2b0c      	cmp	r3, #12
 8000ff2:	d123      	bne.n	800103c <MTi_step+0x13c>
                    // Extract Euler angles: roll, pitch, yaw
                    anglesBuffer[0] = extractFloat(m_dataBuffer, &index); // roll
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	481a      	ldr	r0, [pc, #104]	@ (8001064 <MTi_step+0x164>)
 8000ffc:	f001 fa35 	bl	800246a <extractFloat>
 8001000:	eef0 7a40 	vmov.f32	s15, s0
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	edc3 7a00 	vstr	s15, [r3]
                    anglesBuffer[1] = extractFloat(m_dataBuffer, &index); // pitch
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	1d1c      	adds	r4, r3, #4
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	4619      	mov	r1, r3
 8001014:	4813      	ldr	r0, [pc, #76]	@ (8001064 <MTi_step+0x164>)
 8001016:	f001 fa28 	bl	800246a <extractFloat>
 800101a:	eef0 7a40 	vmov.f32	s15, s0
 800101e:	edc4 7a00 	vstr	s15, [r4]
                    anglesBuffer[2] = extractFloat(m_dataBuffer, &index); // yaw
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f103 0408 	add.w	r4, r3, #8
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	4619      	mov	r1, r3
 800102e:	480d      	ldr	r0, [pc, #52]	@ (8001064 <MTi_step+0x164>)
 8001030:	f001 fa1b 	bl	800246a <extractFloat>
 8001034:	eef0 7a40 	vmov.f32	s15, s0
 8001038:	edc4 7a00 	vstr	s15, [r4]
                }
                // Optionally, handle the case when dataId/dataSize are not as expected.
            }
        }
    }
}
 800103c:	371c      	adds	r7, #28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd90      	pop	{r4, r7, pc}
 8001042:	bf00      	nop
 8001044:	08008b18 	.word	0x08008b18
 8001048:	200001f8 	.word	0x200001f8
 800104c:	20000404 	.word	0x20000404
 8001050:	20000360 	.word	0x20000360
 8001054:	20000368 	.word	0x20000368
 8001058:	2000035c 	.word	0x2000035c
 800105c:	2000035e 	.word	0x2000035e
 8001060:	2000025e 	.word	0x2000025e
 8001064:	2000025c 	.word	0x2000025c

08001068 <_ZN5TimerC1EPFvvE>:

// -----                      -----
// ----- Timer implementation -----
// -----                      -----

Timer::Timer(const callback_function f)
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
    : _delay(10), _periodic(false), f((void*)f), running(false), next(nullptr)
 8001072:	4a0c      	ldr	r2, [pc, #48]	@ (80010a4 <_ZN5TimerC1EPFvvE+0x3c>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	220a      	movs	r2, #10
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	721a      	strb	r2, [r3, #8]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	611a      	str	r2, [r3, #16]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	751a      	strb	r2, [r3, #20]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
{}
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	08008b50 	.word	0x08008b50

080010a8 <_ZN5TimerC1EmbPFvvE>:

Timer::Timer(uint32_t delay, bool isPeriodic, const callback_function f)
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	4613      	mov	r3, r2
 80010b6:	71fb      	strb	r3, [r7, #7]
    : _delay(delay), _periodic(isPeriodic), f((void*)f), running(false), next(nullptr)
 80010b8:	4a0c      	ldr	r2, [pc, #48]	@ (80010ec <_ZN5TimerC1EmbPFvvE+0x44>)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	79fa      	ldrb	r2, [r7, #7]
 80010c8:	721a      	strb	r2, [r3, #8]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2200      	movs	r2, #0
 80010d4:	751a      	strb	r2, [r3, #20]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
{}
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4618      	mov	r0, r3
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	08008b50 	.word	0x08008b50

080010f0 <_ZN5Timer4fireEv>:
void Timer::delay(uint32_t val){
    if (running) return; // can't change parameters directly if running
    _delay = val;
}

void Timer::fire(){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    ((callback_function)f)();
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	4798      	blx	r3
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_TIM_OC_DelayElapsedCallback>:
// capture update events and fire the timer array's callback chain
// a single call to tick would suffice in case of one timer array,
// but this way multiple callback handlers for the same interrupt
// routine can exist independently, without requiring rewriting
// the function for the current setup at all times
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef* htim){
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
    TIM_OC_DelayElapsed_CallbackChain::fire(htim);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 faf8 	bl	8001704 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEE4fireES2_>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <_ZN17TimerArrayControl9TimerFeedC1EP17TIM_HandleTypeDefh>:

// -----                            -----
// ----- TimerString implementation -----
// -----                            -----

TimerArrayControl::TimerFeed::TimerFeed(TIM_HandleTypeDef *const htim, const uint8_t bits) :
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	4613      	mov	r3, r2
 8001128:	71fb      	strb	r3, [r7, #7]
    root(nullptr),
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff9a 	bl	8001068 <_ZN5TimerC1EPFvvE>
    htim(htim),
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	61da      	str	r2, [r3, #28]
    bits(bits)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	79fa      	ldrb	r2, [r7, #7]
 800113e:	f883 2020 	strb.w	r2, [r3, #32]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001148:	461a      	mov	r2, r3
 800114a:	2301      	movs	r3, #1
 800114c:	4093      	lsls	r3, r2
 800114e:	3b01      	subs	r3, #1
 8001150:	461a      	mov	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	625a      	str	r2, [r3, #36]	@ 0x24
{}
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <_ZN17TimerArrayControl9TimerFeed22findTimerInsertionLinkEP5TimerS2_>:

Timer* TimerArrayControl::TimerFeed::findTimerInsertionLink(Timer* it, Timer* timer){
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
    while(it->next && isSooner(it->next->target, timer->target)){
 800116c:	e002      	b.n	8001174 <_ZN17TimerArrayControl9TimerFeed22findTimerInsertionLinkEP5TimerS2_+0x14>
        // while there are more timers and the next timer's target is sooner than the new one's
        // advance it on the timer string
        it = it->next;
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	60bb      	str	r3, [r7, #8]
    while(it->next && isSooner(it->next->target, timer->target)){
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00d      	beq.n	8001198 <_ZN17TimerArrayControl9TimerFeed22findTimerInsertionLinkEP5TimerS2_+0x38>
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	68d9      	ldr	r1, [r3, #12]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	461a      	mov	r2, r3
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f000 f8da 	bl	8001342 <_ZN17TimerArrayControl9TimerFeed8isSoonerEmm>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <_ZN17TimerArrayControl9TimerFeed22findTimerInsertionLinkEP5TimerS2_+0x38>
 8001194:	2301      	movs	r3, #1
 8001196:	e000      	b.n	800119a <_ZN17TimerArrayControl9TimerFeed22findTimerInsertionLinkEP5TimerS2_+0x3a>
 8001198:	2300      	movs	r3, #0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1e7      	bne.n	800116e <_ZN17TimerArrayControl9TimerFeed22findTimerInsertionLinkEP5TimerS2_+0xe>
    }
    return it;
 800119e:	68bb      	ldr	r3, [r7, #8]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <_ZN17TimerArrayControl9TimerFeed11insertTimerEP5TimerS2_>:

// insert timer after the iterator
void TimerArrayControl::TimerFeed::insertTimer(Timer* it, Timer* timer){
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
    
    // insert the new timer between it and next of it
    timer->running = true;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	751a      	strb	r2, [r3, #20]
    timer->next = it->next;
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	699a      	ldr	r2, [r3, #24]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
    it->next = timer;
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]

    // if the first timer changed, adjust interrupt target
    if (root.next == timer) SET_TARGET(timer->target);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d105      	bne.n	80011de <_ZN17TimerArrayControl9TimerFeed11insertTimerEP5TimerS2_+0x36>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	68d2      	ldr	r2, [r2, #12]
 80011dc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <_ZN17TimerArrayControl9TimerFeed11insertTimerEP5Timer>:

// insert timer based on target
void TimerArrayControl::TimerFeed::insertTimer(Timer* timer){
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
    insertTimer(findTimerInsertionLink(&root, timer), timer);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffb0 	bl	8001160 <_ZN17TimerArrayControl9TimerFeed22findTimerInsertionLinkEP5TimerS2_>
 8001200:	4603      	mov	r3, r0
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffce 	bl	80011a8 <_ZN17TimerArrayControl9TimerFeed11insertTimerEP5TimerS2_>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <_ZN17TimerArrayControl9TimerFeed11removeTimerEP5Timer>:

// remove timer from feed
void TimerArrayControl::TimerFeed::removeTimer(Timer* timer){
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
    Timer* it = &root;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	60fb      	str	r3, [r7, #12]
    while(it->next && it->next != timer) it = it->next;
 8001222:	e002      	b.n	800122a <_ZN17TimerArrayControl9TimerFeed11removeTimerEP5Timer+0x16>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d004      	beq.n	800123c <_ZN17TimerArrayControl9TimerFeed11removeTimerEP5Timer+0x28>
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d1f3      	bne.n	8001224 <_ZN17TimerArrayControl9TimerFeed11removeTimerEP5Timer+0x10>

    if (it->next == timer){
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d109      	bne.n	800125a <_ZN17TimerArrayControl9TimerFeed11removeTimerEP5Timer+0x46>
        it->next = timer->next;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	699a      	ldr	r2, [r3, #24]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	619a      	str	r2, [r3, #24]
        timer->next = nullptr;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
        timer->running = false;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2200      	movs	r2, #0
 8001258:	751a      	strb	r2, [r3, #20]
    }

    // if the removed timer was the first in the feed, update interrupt target
    if (&root == it && root.next) SET_TARGET(root.next->target);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	429a      	cmp	r2, r3
 8001260:	d10a      	bne.n	8001278 <_ZN17TimerArrayControl9TimerFeed11removeTimerEP5Timer+0x64>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d006      	beq.n	8001278 <_ZN17TimerArrayControl9TimerFeed11removeTimerEP5Timer+0x64>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	699a      	ldr	r2, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68d2      	ldr	r2, [r2, #12]
 8001276:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm>:

// remove and insert timer in one operation, according to it's target
void TimerArrayControl::TimerFeed::updateTimerTarget(Timer* timer, uint32_t target){
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
    
    // find fitting place for timer in string
    Timer* ins = &root;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	617b      	str	r3, [r7, #20]
    Timer* rem = ins;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	613b      	str	r3, [r7, #16]

    // search attach position
    while(ins->next && isSooner(ins->next->target, target)){
 8001298:	e009      	b.n	80012ae <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x2a>
        // while there are more timers and the next timer's target is sooner than the modified one's
        // advance |ins| on the timer string
        ins = ins->next;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	617b      	str	r3, [r7, #20]

        // if the next timer is not our's to remove, advance |rem| on the string
        if (rem->next != timer) rem = ins;
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d001      	beq.n	80012ae <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x2a>
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	613b      	str	r3, [r7, #16]
    while(ins->next && isSooner(ins->next->target, target)){
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00c      	beq.n	80012d0 <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x4c>
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	4619      	mov	r1, r3
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 f83e 	bl	8001342 <_ZN17TimerArrayControl9TimerFeed8isSoonerEmm>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x4c>
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x4e>
 80012d0:	2300      	movs	r3, #0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1e1      	bne.n	800129a <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x16>
    }

    // search where the timer was, to detach it from that position
    while(rem->next && rem->next != timer) rem = rem->next;
 80012d6:	e002      	b.n	80012de <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x5a>
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d004      	beq.n	80012f0 <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x6c>
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d1f3      	bne.n	80012d8 <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x54>

    // only move timer if the predecessor changed and it is not itself
    if (ins != rem && ins != timer){
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d00e      	beq.n	8001316 <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x92>
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d00a      	beq.n	8001316 <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0x92>
        // remove our timer from the string
        rem->next = timer->next;
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	699a      	ldr	r2, [r3, #24]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	619a      	str	r2, [r3, #24]

        // insert our timer between |ins| and next of |ins|
        timer->next = ins->next;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	699a      	ldr	r2, [r3, #24]
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	619a      	str	r2, [r3, #24]
        ins->next = timer;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	619a      	str	r2, [r3, #24]
    }

    // update the timer's target
    timer->target = target;
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	60da      	str	r2, [r3, #12]
    // If the interrupt was set to a timer that has changed, set new target.
    // If ins is first timer, the timer was put to first place.
    // If rem is first timer, the timer was moved from first place.
    // If both, the first timers target was probably changed.
    // In all cases new target is needed.
    if (&root == ins || &root == rem) {
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	429a      	cmp	r2, r3
 8001322:	d003      	beq.n	800132c <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0xa8>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	429a      	cmp	r2, r3
 800132a:	d106      	bne.n	800133a <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm+0xb6>
        SET_TARGET(root.next->target);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	699a      	ldr	r2, [r3, #24]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68d2      	ldr	r2, [r2, #12]
 8001338:	635a      	str	r2, [r3, #52]	@ 0x34
    }
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_ZN17TimerArrayControl9TimerFeed8isSoonerEmm>:

bool TimerArrayControl::TimerFeed::isSooner(uint32_t target, uint32_t reference){
 8001342:	b480      	push	{r7}
 8001344:	b085      	sub	sp, #20
 8001346:	af00      	add	r7, sp, #0
 8001348:	60f8      	str	r0, [r7, #12]
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
    return (max_count & ((uint32_t)(target - cnt))) < (max_count & ((uint32_t)(reference - cnt)));
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001356:	68b9      	ldr	r1, [r7, #8]
 8001358:	1acb      	subs	r3, r1, r3
 800135a:	401a      	ands	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	1ac3      	subs	r3, r0, r3
 8001368:	400b      	ands	r3, r1
 800136a:	429a      	cmp	r2, r3
 800136c:	bf34      	ite	cc
 800136e:	2301      	movcc	r3, #1
 8001370:	2300      	movcs	r3, #0
 8001372:	b2db      	uxtb	r3, r3
}
 8001374:	4618      	mov	r0, r3
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_ZN17TimerArrayControl9TimerFeed10updateTimeEv>:

void TimerArrayControl::TimerFeed::updateTime(){
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    cnt = __HAL_TIM_GET_COUNTER(htim);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_ZN17TimerArrayControl9TimerFeed14updateTickTimeEv>:

void TimerArrayControl::TimerFeed::updateTickTime(){
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
    cnt = GET_TARGET();
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	629a      	str	r2, [r3, #40]	@ 0x28
    uint32_t tim_cnt = __HAL_TIM_GET_COUNTER(htim);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013bc:	60fb      	str	r3, [r7, #12]
    
    if ((max_count & ((uint32_t)(tim_cnt - cnt))) >= CALLBACK_JITTER){
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c6:	68f9      	ldr	r1, [r7, #12]
 80013c8:	1acb      	subs	r3, r1, r3
 80013ca:	4013      	ands	r3, r2
 80013cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013d0:	d302      	bcc.n	80013d8 <_ZN17TimerArrayControl9TimerFeed14updateTickTimeEv+0x38>
        // if CNT passed CCR more than the acceptable jitter, use the CNT value
        cnt = tim_cnt;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <_ZN17TimerArrayControlC1EP17TIM_HandleTypeDefmmh>:
// -----                                  -----
// ----- TimerArrayControl implementation -----
// -----                                  -----


TimerArrayControl::TimerArrayControl(TIM_HandleTypeDef *const htim, const uint32_t fclk, const uint32_t clkdiv, const uint8_t bits) : 
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	603b      	str	r3, [r7, #0]
    fclk(fclk),
    clkdiv(clkdiv),
    timerFeed(htim, bits),
    isTickOngoing(false)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 f9a1 	bl	800173c <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEEC1Ev>
 80013fa:	4a11      	ldr	r2, [pc, #68]	@ (8001440 <_ZN17TimerArrayControlC1EP17TIM_HandleTypeDefmmh+0x5c>)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	601a      	str	r2, [r3, #0]
    fclk(fclk),
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	609a      	str	r2, [r3, #8]
    clkdiv(clkdiv),
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	60da      	str	r2, [r3, #12]
    isTickOngoing(false)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001414:	bf28      	it	cs
 8001416:	f44f 3380 	movcs.w	r3, #65536	@ 0x10000
 800141a:	461a      	mov	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	611a      	str	r2, [r3, #16]
    timerFeed(htim, bits),
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3314      	adds	r3, #20
 8001424:	7e3a      	ldrb	r2, [r7, #24]
 8001426:	68b9      	ldr	r1, [r7, #8]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fe77 	bl	800111c <_ZN17TimerArrayControl9TimerFeedC1EP17TIM_HandleTypeDefh>
    isTickOngoing(false)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
{}
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	08008b5c 	.word	0x08008b5c

08001444 <_ZN17TimerArrayControl5beginEv>:

void TimerArrayControl::begin(){
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	@ 0x30
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

    // stop timer if it was running
    HAL_TIM_OC_Stop_IT(timerFeed.htim, TARGET_CC_CHANNEL);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f003 fa10 	bl	8004878 <HAL_TIM_OC_Stop_IT>

    timerFeed.htim->Init.CounterMode = TIM_COUNTERMODE_UP; // all STM32 counters support it
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
    #ifdef TIM_AUTORELOAD_PRELOAD_DISABLE  // not used by STM32F4
    timerFeed.htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE; // by disabling, write to ARR shadow regs happens immedietely
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
    #endif
    timerFeed.htim->Init.Period = timerFeed.max_count; // set max period for maximum amount of possible delay
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001470:	60da      	str	r2, [r3, #12]
    timerFeed.htim->Init.Prescaler = prescaler - 1; // prescaler divides clock by Prescaler+1
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691a      	ldr	r2, [r3, #16]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	3a01      	subs	r2, #1
 800147c:	605a      	str	r2, [r3, #4]

    TIM_OC_InitTypeDef oc_init;
    oc_init.OCMode = TIM_OCMODE_TIMING;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]

    HAL_TIM_OC_Init(timerFeed.htim);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4618      	mov	r0, r3
 8001488:	f003 f887 	bl	800459a <HAL_TIM_OC_Init>
    HAL_TIM_OC_ConfigChannel(timerFeed.htim, &oc_init, TARGET_CC_CHANNEL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001490:	f107 010c 	add.w	r1, r7, #12
 8001494:	2200      	movs	r2, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f003 fb9c 	bl	8004bd4 <HAL_TIM_OC_ConfigChannel>
    uint32_t cnt = __HAL_TIM_GET_COUNTER(timerFeed.htim);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t target = timerFeed.root.next == nullptr ? (timerFeed.max_count & (cnt-1)) : timerFeed.root.next->target;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d105      	bne.n	80014ba <_ZN17TimerArrayControl5beginEv+0x76>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b4:	3b01      	subs	r3, #1
 80014b6:	4013      	ands	r3, r2
 80014b8:	e002      	b.n	80014c0 <_ZN17TimerArrayControl5beginEv+0x7c>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    __HAL_TIM_SET_COMPARE(timerFeed.htim, TARGET_CC_CHANNEL, target); // if no timers to fire yet, set max delay between unneeded interrupts
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014ca:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_OC_Start_IT(timerFeed.htim, TARGET_CC_CHANNEL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f003 f8ba 	bl	800464c <HAL_TIM_OC_Start_IT>
}
 80014d8:	bf00      	nop
 80014da:	3730      	adds	r7, #48	@ 0x30
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_ZN17TimerArrayControl15chainedCallbackEP17TIM_HandleTypeDef>:

/*
 * Subscribed to interrupts generated by timerFeed.htim.
 * Only call tick if really timerFeed.htim was the source.
 */
void TimerArrayControl::chainedCallback(TIM_HandleTypeDef* htim){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
    if (timerFeed.htim == htim) tick();
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d102      	bne.n	80014fa <_ZN17TimerArrayControl15chainedCallbackEP17TIM_HandleTypeDef+0x1a>
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f804 	bl	8001502 <_ZN17TimerArrayControl4tickEv>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_ZN17TimerArrayControl4tickEv>:

/**
 * This method can only be called from interupts.
 * */
void TimerArrayControl::tick(){
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]

    isTickOngoing = true;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    timerFeed.updateTickTime();
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3314      	adds	r3, #20
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff42 	bl	80013a0 <_ZN17TimerArrayControl9TimerFeed14updateTickTimeEv>

    // handle timeout
    while (timerFeed.root.next && COUNTER_MODULO(timerFeed.cnt - timerFeed.root.next->target) < CALLBACK_JITTER){
 800151c:	e042      	b.n	80015a4 <_ZN17TimerArrayControl4tickEv+0xa2>
        Timer* timer = timerFeed.root.next;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001522:	617b      	str	r3, [r7, #20]

        // set up the next interrupt generation
        if (timer->_periodic){
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	7a1b      	ldrb	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d010      	beq.n	800154e <_ZN17TimerArrayControl4tickEv+0x4c>

            // set new target for timer
            uint32_t target = COUNTER_MODULO(timer->target + timer->_delay);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	68d9      	ldr	r1, [r3, #12]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	440b      	add	r3, r1
 800153a:	4013      	ands	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]

            // find fitting place for timer in string
            timerFeed.updateTimerTarget(timer, target);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3314      	adds	r3, #20
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	6979      	ldr	r1, [r7, #20]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fe9c 	bl	8001284 <_ZN17TimerArrayControl9TimerFeed17updateTimerTargetEP5Timerm>
 800154c:	e00c      	b.n	8001568 <_ZN17TimerArrayControl4tickEv+0x66>

        } else {
            // if timer is not periodic, it is done, we can detach it
            Timer* timer = timerFeed.root.next;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001552:	613b      	str	r3, [r7, #16]
            timer->running = false;
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	2200      	movs	r2, #0
 8001558:	751a      	strb	r2, [r3, #20]
            timerFeed.root.next = timer->next;
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	699a      	ldr	r2, [r3, #24]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	62da      	str	r2, [r3, #44]	@ 0x2c
            timer->next = nullptr;
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
        }

        // set the new target
        uint32_t target = timerFeed.root.next == nullptr ? COUNTER_MODULO(timerFeed.cnt - 1) : timerFeed.root.next->target;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156c:	2b00      	cmp	r3, #0
 800156e:	d106      	bne.n	800157e <_ZN17TimerArrayControl4tickEv+0x7c>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001578:	3b01      	subs	r3, #1
 800157a:	4013      	ands	r3, r2
 800157c:	e002      	b.n	8001584 <_ZN17TimerArrayControl4tickEv+0x82>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	60bb      	str	r3, [r7, #8]
        __HAL_TIM_SET_COMPARE(timerFeed.htim, TARGET_CC_CHANNEL, target);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	635a      	str	r2, [r3, #52]	@ 0x34

        // fire callback
        timer->fire();
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	4798      	blx	r3

        timerFeed.updateTickTime();
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3314      	adds	r3, #20
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fefe 	bl	80013a0 <_ZN17TimerArrayControl9TimerFeed14updateTickTimeEv>
    while (timerFeed.root.next && COUNTER_MODULO(timerFeed.cnt - timerFeed.root.next->target) < CALLBACK_JITTER){
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00b      	beq.n	80015c4 <_ZN17TimerArrayControl4tickEv+0xc2>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	1acb      	subs	r3, r1, r3
 80015bc:	4013      	ands	r3, r2
 80015be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015c2:	d3ac      	bcc.n	800151e <_ZN17TimerArrayControl4tickEv+0x1c>
    }

    isTickOngoing = false;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80015cc:	bf00      	nop
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <_ZN17TimerArrayControl21registerAttachedTimerEP5Timer>:

void TimerArrayControl::registerAttachedTimer(Timer* timer){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]

    // if timer is already attached to a controller, do nothing
    if (timer->running) return;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	7d1b      	ldrb	r3, [r3, #20]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d110      	bne.n	8001608 <_ZN17TimerArrayControl21registerAttachedTimerEP5Timer+0x34>

    // get current time in ticks and add the requested delay to find the target time
    timer->target = COUNTER_MODULO(timer->_delay + timerFeed.cnt);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	6859      	ldr	r1, [r3, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015f2:	440b      	add	r3, r1
 80015f4:	401a      	ands	r2, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	60da      	str	r2, [r3, #12]

    // insert timer based on the target time
    timerFeed.insertTimer(timer);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3314      	adds	r3, #20
 80015fe:	6839      	ldr	r1, [r7, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fdf2 	bl	80011ea <_ZN17TimerArrayControl9TimerFeed11insertTimerEP5Timer>
 8001606:	e000      	b.n	800160a <_ZN17TimerArrayControl21registerAttachedTimerEP5Timer+0x36>
    if (timer->running) return;
 8001608:	bf00      	nop
}
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_ZN17TimerArrayControl21registerDetachedTimerEP5Timer>:

void TimerArrayControl::registerDetachedTimer(Timer* timer){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
    if (!timer->running) return;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	7d1b      	ldrb	r3, [r3, #20]
 800161e:	f083 0301 	eor.w	r3, r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d106      	bne.n	8001636 <_ZN17TimerArrayControl21registerDetachedTimerEP5Timer+0x26>
    timerFeed.removeTimer(timer);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3314      	adds	r3, #20
 800162c:	6839      	ldr	r1, [r7, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fdf0 	bl	8001214 <_ZN17TimerArrayControl9TimerFeed11removeTimerEP5Timer>
 8001634:	e000      	b.n	8001638 <_ZN17TimerArrayControl21registerDetachedTimerEP5Timer+0x28>
    if (!timer->running) return;
 8001636:	bf00      	nop
}
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_ZN17TimerArrayControl11attachTimerEP5Timer>:
//
// Public members
//


void TimerArrayControl::attachTimer(Timer* timer){
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6039      	str	r1, [r7, #0]

    if (!isTickOngoing){
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f083 0301 	eor.w	r3, r3, #1
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d01d      	beq.n	8001696 <_ZN17TimerArrayControl11attachTimerEP5Timer+0x58>
        // timer is running and this is not on interrupt thread, use interrupt safe attach
        
        DISABLE_INTERRUPT();
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0202 	bic.w	r2, r2, #2
 800166c:	60da      	str	r2, [r3, #12]
        timerFeed.updateTime(); // fetch counter
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3314      	adds	r3, #20
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fe84 	bl	8001380 <_ZN17TimerArrayControl9TimerFeed10updateTimeEv>
        registerAttachedTimer(timer);
 8001678:	6839      	ldr	r1, [r7, #0]
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ffaa 	bl	80015d4 <_ZN17TimerArrayControl21registerAttachedTimerEP5Timer>
        ENABLE_INTERRUPT();
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0202 	orr.w	r2, r2, #2
 8001692:	60da      	str	r2, [r3, #12]
    } else {
        // timer is not running or this is an interrupt handler, attach is safe
        registerAttachedTimer(timer);
    }

}
 8001694:	e003      	b.n	800169e <_ZN17TimerArrayControl11attachTimerEP5Timer+0x60>
        registerAttachedTimer(timer);
 8001696:	6839      	ldr	r1, [r7, #0]
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff9b 	bl	80015d4 <_ZN17TimerArrayControl21registerAttachedTimerEP5Timer>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <_ZN17TimerArrayControl11detachTimerEP5Timer>:

void TimerArrayControl::detachTimer(Timer* timer){
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
    

    if (!isTickOngoing){
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	f083 0301 	eor.w	r3, r3, #1
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d018      	beq.n	80016f4 <_ZN17TimerArrayControl11detachTimerEP5Timer+0x4e>
        // timer is running and this is not on interrupt thread, use interrupt safe attach
        
        DISABLE_INTERRUPT();
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0202 	bic.w	r2, r2, #2
 80016d4:	60da      	str	r2, [r3, #12]
        registerDetachedTimer(timer);
 80016d6:	6839      	ldr	r1, [r7, #0]
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff99 	bl	8001610 <_ZN17TimerArrayControl21registerDetachedTimerEP5Timer>
        ENABLE_INTERRUPT();
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f042 0202 	orr.w	r2, r2, #2
 80016f0:	60da      	str	r2, [r3, #12]
    } else {
        // timer is not running or this is an interrupt handler, attach is safe
        registerDetachedTimer(timer);
    }

}
 80016f2:	e003      	b.n	80016fc <_ZN17TimerArrayControl11detachTimerEP5Timer+0x56>
        registerDetachedTimer(timer);
 80016f4:	6839      	ldr	r1, [r7, #0]
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ff8a 	bl	8001610 <_ZN17TimerArrayControl21registerDetachedTimerEP5Timer>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEE4fireES2_>:
    }
    *hnext = this->next;
}

template<typename ChainID, typename ... Args>
void CallbackChain<ChainID, Args...>::fire(Args... args){
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
    CallbackChain<ChainID, Args...>* obj = last;
 800170c:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEE4fireES2_+0x34>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	60fb      	str	r3, [r7, #12]
    while(obj){
 8001712:	e009      	b.n	8001728 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEE4fireES2_+0x24>
        obj->chainedCallback(args...);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	3308      	adds	r3, #8
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	4798      	blx	r3
        obj = obj->next;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	60fb      	str	r3, [r7, #12]
    while(obj){
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f2      	bne.n	8001714 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEE4fireES2_+0x10>
    }
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000364 	.word	0x20000364

0800173c <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEEC1Ev>:
CallbackChain<ChainID, Args...>::CallbackChain() : next(last){
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	4a08      	ldr	r2, [pc, #32]	@ (8001768 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEEC1Ev+0x2c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEEC1Ev+0x30>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	605a      	str	r2, [r3, #4]
    last = this;
 8001752:	4a06      	ldr	r2, [pc, #24]	@ (800176c <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEEC1Ev+0x30>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	08008b70 	.word	0x08008b70
 800176c:	20000364 	.word	0x20000364

08001770 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEED1Ev>:
CallbackChain<ChainID, Args...>::~CallbackChain() {
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
}
 8001778:	4a0c      	ldr	r2, [pc, #48]	@ (80017ac <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEED1Ev+0x3c>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	601a      	str	r2, [r3, #0]
    CallbackChain<ChainID, Args...>** hnext = &last;
 800177e:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEED1Ev+0x40>)
 8001780:	60fb      	str	r3, [r7, #12]
    while(*hnext != this){
 8001782:	e003      	b.n	800178c <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEED1Ev+0x1c>
        hnext = &((*hnext)->next);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3304      	adds	r3, #4
 800178a:	60fb      	str	r3, [r7, #12]
    while(*hnext != this){
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	429a      	cmp	r2, r3
 8001794:	d1f6      	bne.n	8001784 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEED1Ev+0x14>
    *hnext = this->next;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	601a      	str	r2, [r3, #0]
}
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	08008b70 	.word	0x08008b70
 80017b0:	20000364 	.word	0x20000364

080017b4 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEED0Ev>:
CallbackChain<ChainID, Args...>::~CallbackChain() {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
}
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ffd7 	bl	8001770 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEED1Ev>
 80017c2:	2108      	movs	r1, #8
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f004 fb09 	bl	8005ddc <_ZdlPvj>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_ZN17TimerArrayControlD1Ev>:
// clkdiv: how much clock division is required, maximum allowed value depends on the specific timer's prescale register's size
//         currently limited for every timer to 65536 (16 bit prescale register), it could become a setting if needed
// bits: the number of bits in the counter register (16 or 32)
// prescaler: minimum of 65536 and clkdiv, compare with clkdiv to find out if selected prescale is possible
// fcnt: the actual counting frequency based on the settings and limitations
class TimerArrayControl : TIM_OC_DelayElapsed_CallbackChain{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	4a05      	ldr	r2, [pc, #20]	@ (80017f4 <_ZN17TimerArrayControlD1Ev+0x20>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ffc3 	bl	8001770 <_ZN13CallbackChainI35TIM_OC_DelayElapsed_CallbackChainIDJP17TIM_HandleTypeDefEED1Ev>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	08008b5c 	.word	0x08008b5c

080017f8 <_ZN17TimerArrayControlD0Ev>:
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ffe7 	bl	80017d4 <_ZN17TimerArrayControlD1Ev>
 8001806:	2144      	movs	r1, #68	@ 0x44
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f004 fae7 	bl	8005ddc <_ZdlPvj>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b09a      	sub	sp, #104	@ 0x68
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800181e:	f000 fe63 	bl	80024e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001822:	f000 f839 	bl	8001898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001826:	f000 f94f 	bl	8001ac8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800182a:	f000 f923 	bl	8001a74 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800182e:	f000 f8a5 	bl	800197c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001832:	f000 f8d3 	bl	80019dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // stepperControl_init_wrapper();
  stepperControl_init();
 8001836:	f000 fa8d 	bl	8001d54 <stepperControl_init>
  float roll;
  float pitch;
  float yaw;
  int len;
  char g_textBuffer[80];
  MTi_reset();
 800183a:	f7ff fb4d 	bl	8000ed8 <MTi_reset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MTi_step(measurements, 3);
 800183e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001842:	2103      	movs	r1, #3
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fb5b 	bl	8000f00 <MTi_step>
	roll = measurements[0];
 800184a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800184c:	667b      	str	r3, [r7, #100]	@ 0x64
	pitch = measurements[1];
 800184e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001850:	663b      	str	r3, [r7, #96]	@ 0x60
	yaw = measurements[2];
 8001852:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001854:	65fb      	str	r3, [r7, #92]	@ 0x5c

//	len = snprintf(g_textBuffer, sizeof(g_textBuffer), "XMID_MtData2: roll = %.2f, pitch = %.2f, yaw = %.2f\n", roll , pitch, yaw);
//	HAL_UART_Transmit(&huart2, (uint8_t*)g_textBuffer, len, 100);

	motor1.desiredPos = 12*(int)roll;
 8001856:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800185a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185e:	ee17 2a90 	vmov	r2, s15
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	461a      	mov	r2, r3
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <main+0x78>)
 800186e:	615a      	str	r2, [r3, #20]
	motor2.desiredPos = 12*(int)pitch;
 8001870:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001878:	ee17 2a90 	vmov	r2, s15
 800187c:	4613      	mov	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	461a      	mov	r2, r3
 8001886:	4b03      	ldr	r3, [pc, #12]	@ (8001894 <main+0x7c>)
 8001888:	615a      	str	r2, [r3, #20]
	MTi_step(measurements, 3);
 800188a:	bf00      	nop
 800188c:	e7d7      	b.n	800183e <main+0x26>
 800188e:	bf00      	nop
 8001890:	200004e0 	.word	0x200004e0
 8001894:	200004c8 	.word	0x200004c8

08001898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b094      	sub	sp, #80	@ 0x50
 800189c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	2234      	movs	r2, #52	@ 0x34
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f005 f8eb 	bl	8006a82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ac:	f107 0308 	add.w	r3, r7, #8
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001974 <SystemClock_Config+0xdc>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001974 <SystemClock_Config+0xdc>)
 80018c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80018cc:	4b29      	ldr	r3, [pc, #164]	@ (8001974 <SystemClock_Config+0xdc>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d8:	2300      	movs	r3, #0
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <SystemClock_Config+0xe0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a25      	ldr	r2, [pc, #148]	@ (8001978 <SystemClock_Config+0xe0>)
 80018e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <SystemClock_Config+0xe0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018f4:	2302      	movs	r3, #2
 80018f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018f8:	2301      	movs	r3, #1
 80018fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018fc:	2310      	movs	r3, #16
 80018fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001900:	2302      	movs	r3, #2
 8001902:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001904:	2300      	movs	r3, #0
 8001906:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001908:	2308      	movs	r3, #8
 800190a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800190c:	23b4      	movs	r3, #180	@ 0xb4
 800190e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001910:	2302      	movs	r3, #2
 8001912:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001914:	2302      	movs	r3, #2
 8001916:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001918:	2302      	movs	r3, #2
 800191a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4618      	mov	r0, r3
 8001922:	f002 fb4d 	bl	8003fc0 <HAL_RCC_OscConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800192c:	f000 f9a6 	bl	8001c7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001930:	f001 ffac 	bl	800388c <HAL_PWREx_EnableOverDrive>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800193a:	f000 f99f 	bl	8001c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800193e:	230f      	movs	r3, #15
 8001940:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001942:	2302      	movs	r3, #2
 8001944:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800194a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800194e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001950:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001954:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	2105      	movs	r1, #5
 800195c:	4618      	mov	r0, r3
 800195e:	f001 ffe5 	bl	800392c <HAL_RCC_ClockConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001968:	f000 f988 	bl	8001c7c <Error_Handler>
  }
}
 800196c:	bf00      	nop
 800196e:	3750      	adds	r7, #80	@ 0x50
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	40007000 	.word	0x40007000

0800197c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001980:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <MX_I2C1_Init+0x54>)
 8001982:	4a14      	ldr	r2, [pc, #80]	@ (80019d4 <MX_I2C1_Init+0x58>)
 8001984:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001986:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <MX_I2C1_Init+0x54>)
 8001988:	4a13      	ldr	r2, [pc, #76]	@ (80019d8 <MX_I2C1_Init+0x5c>)
 800198a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 800198c:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <MX_I2C1_Init+0x54>)
 800198e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001992:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001994:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <MX_I2C1_Init+0x54>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800199a:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <MX_I2C1_Init+0x54>)
 800199c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <MX_I2C1_Init+0x54>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019a8:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <MX_I2C1_Init+0x54>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <MX_I2C1_Init+0x54>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <MX_I2C1_Init+0x54>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	@ (80019d0 <MX_I2C1_Init+0x54>)
 80019bc:	f001 f91a 	bl	8002bf4 <HAL_I2C_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80019c6:	f000 f959 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000368 	.word	0x20000368
 80019d4:	40005400 	.word	0x40005400
 80019d8:	00061a80 	.word	0x00061a80

080019dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f0:	463b      	mov	r3, r7
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <MX_TIM2_Init+0x94>)
 80019fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	@ (8001a70 <MX_TIM2_Init+0x94>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <MX_TIM2_Init+0x94>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <MX_TIM2_Init+0x94>)
 8001a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a14:	4b16      	ldr	r3, [pc, #88]	@ (8001a70 <MX_TIM2_Init+0x94>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <MX_TIM2_Init+0x94>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a20:	4813      	ldr	r0, [pc, #76]	@ (8001a70 <MX_TIM2_Init+0x94>)
 8001a22:	f002 fd6b 	bl	80044fc <HAL_TIM_Base_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a2c:	f000 f926 	bl	8001c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a36:	f107 0308 	add.w	r3, r7, #8
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480c      	ldr	r0, [pc, #48]	@ (8001a70 <MX_TIM2_Init+0x94>)
 8001a3e:	f003 f925 	bl	8004c8c <HAL_TIM_ConfigClockSource>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a48:	f000 f918 	bl	8001c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a54:	463b      	mov	r3, r7
 8001a56:	4619      	mov	r1, r3
 8001a58:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <MX_TIM2_Init+0x94>)
 8001a5a:	f003 fd23 	bl	80054a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a64:	f000 f90a 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a68:	bf00      	nop
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200003bc 	.word	0x200003bc

08001a74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <MX_USART2_UART_Init+0x4c>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ac4 <MX_USART2_UART_Init+0x50>)
 8001a7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <MX_USART2_UART_Init+0x4c>)
 8001a80:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001a84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <MX_USART2_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <MX_USART2_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <MX_USART2_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a98:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <MX_USART2_UART_Init+0x4c>)
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <MX_USART2_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <MX_USART2_UART_Init+0x4c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aaa:	4805      	ldr	r0, [pc, #20]	@ (8001ac0 <MX_USART2_UART_Init+0x4c>)
 8001aac:	f003 fd8a 	bl	80055c4 <HAL_UART_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ab6:	f000 f8e1 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000404 	.word	0x20000404
 8001ac4:	40004400 	.word	0x40004400

08001ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	@ 0x28
 8001acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	4b62      	ldr	r3, [pc, #392]	@ (8001c6c <MX_GPIO_Init+0x1a4>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	4a61      	ldr	r2, [pc, #388]	@ (8001c6c <MX_GPIO_Init+0x1a4>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aee:	4b5f      	ldr	r3, [pc, #380]	@ (8001c6c <MX_GPIO_Init+0x1a4>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b5b      	ldr	r3, [pc, #364]	@ (8001c6c <MX_GPIO_Init+0x1a4>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a5a      	ldr	r2, [pc, #360]	@ (8001c6c <MX_GPIO_Init+0x1a4>)
 8001b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b58      	ldr	r3, [pc, #352]	@ (8001c6c <MX_GPIO_Init+0x1a4>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	4b54      	ldr	r3, [pc, #336]	@ (8001c6c <MX_GPIO_Init+0x1a4>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a53      	ldr	r2, [pc, #332]	@ (8001c6c <MX_GPIO_Init+0x1a4>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b51      	ldr	r3, [pc, #324]	@ (8001c6c <MX_GPIO_Init+0x1a4>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	4b4d      	ldr	r3, [pc, #308]	@ (8001c6c <MX_GPIO_Init+0x1a4>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	4a4c      	ldr	r2, [pc, #304]	@ (8001c6c <MX_GPIO_Init+0x1a4>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b42:	4b4a      	ldr	r3, [pc, #296]	@ (8001c6c <MX_GPIO_Init+0x1a4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, I2C_ADD0_Pin|I2C_ADD1_Pin|I2C_ADD2_Pin|PSEL_1_Pin, GPIO_PIN_SET);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8001b54:	4846      	ldr	r0, [pc, #280]	@ (8001c70 <MX_GPIO_Init+0x1a8>)
 8001b56:	f001 f81b 	bl	8002b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP4_Pin|DIR3_Pin|STEP1_Pin|STEP2_Pin
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f24e 4132 	movw	r1, #58418	@ 0xe432
 8001b60:	4844      	ldr	r0, [pc, #272]	@ (8001c74 <MX_GPIO_Init+0x1ac>)
 8001b62:	f001 f815 	bl	8002b90 <HAL_GPIO_WritePin>
                          |STEP3_Pin|DIR2_Pin|RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PSEL_0_GPIO_Port, PSEL_0_Pin, GPIO_PIN_SET);
 8001b66:	2201      	movs	r2, #1
 8001b68:	2180      	movs	r1, #128	@ 0x80
 8001b6a:	4843      	ldr	r0, [pc, #268]	@ (8001c78 <MX_GPIO_Init+0x1b0>)
 8001b6c:	f001 f810 	bl	8002b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR4_Pin|DIR1_Pin, GPIO_PIN_RESET);
 8001b70:	2200      	movs	r2, #0
 8001b72:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001b76:	483e      	ldr	r0, [pc, #248]	@ (8001c70 <MX_GPIO_Init+0x1a8>)
 8001b78:	f001 f80a 	bl	8002b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b82:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	4839      	ldr	r0, [pc, #228]	@ (8001c78 <MX_GPIO_Init+0x1b0>)
 8001b94:	f000 fe50 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_ADD0_Pin I2C_ADD1_Pin I2C_ADD2_Pin DIR4_Pin
                           PSEL_1_Pin DIR1_Pin */
  GPIO_InitStruct.Pin = I2C_ADD0_Pin|I2C_ADD1_Pin|I2C_ADD2_Pin|DIR4_Pin
 8001b98:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001b9c:	617b      	str	r3, [r7, #20]
                          |PSEL_1_Pin|DIR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4619      	mov	r1, r3
 8001bb0:	482f      	ldr	r0, [pc, #188]	@ (8001c70 <MX_GPIO_Init+0x1a8>)
 8001bb2:	f000 fe41 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP4_Pin DIR3_Pin STEP1_Pin STEP2_Pin
                           STEP3_Pin DIR2_Pin */
  GPIO_InitStruct.Pin = STEP4_Pin|DIR3_Pin|STEP1_Pin|STEP2_Pin
 8001bb6:	f24e 4312 	movw	r3, #58386	@ 0xe412
 8001bba:	617b      	str	r3, [r7, #20]
                          |STEP3_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4829      	ldr	r0, [pc, #164]	@ (8001c74 <MX_GPIO_Init+0x1ac>)
 8001bd0:	f000 fe32 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PSEL_0_Pin */
  GPIO_InitStruct.Pin = PSEL_0_Pin;
 8001bd4:	2380      	movs	r3, #128	@ 0x80
 8001bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PSEL_0_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	4823      	ldr	r0, [pc, #140]	@ (8001c78 <MX_GPIO_Init+0x1b0>)
 8001bec:	f000 fe24 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SWITCH1_Pin LIMIT_SWITCH2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH1_Pin|LIMIT_SWITCH2_Pin;
 8001bf0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bf6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	481a      	ldr	r0, [pc, #104]	@ (8001c70 <MX_GPIO_Init+0x1a8>)
 8001c08:	f000 fe16 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_READY_Pin */
  GPIO_InitStruct.Pin = DATA_READY_Pin;
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c10:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c16:	2302      	movs	r3, #2
 8001c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DATA_READY_GPIO_Port, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4814      	ldr	r0, [pc, #80]	@ (8001c74 <MX_GPIO_Init+0x1ac>)
 8001c22:	f000 fe09 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8001c26:	2320      	movs	r3, #32
 8001c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c32:	2302      	movs	r3, #2
 8001c34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	480d      	ldr	r0, [pc, #52]	@ (8001c74 <MX_GPIO_Init+0x1ac>)
 8001c3e:	f000 fdfb 	bl	8002838 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	2009      	movs	r0, #9
 8001c48:	f000 fdbf 	bl	80027ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001c4c:	2009      	movs	r0, #9
 8001c4e:	f000 fdd8 	bl	8002802 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	2028      	movs	r0, #40	@ 0x28
 8001c58:	f000 fdb7 	bl	80027ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c5c:	2028      	movs	r0, #40	@ 0x28
 8001c5e:	f000 fdd0 	bl	8002802 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c62:	bf00      	nop
 8001c64:	3728      	adds	r7, #40	@ 0x28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40020000 	.word	0x40020000
 8001c74:	40020400 	.word	0x40020400
 8001c78:	40020800 	.word	0x40020800

08001c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c80:	b672      	cpsid	i
}
 8001c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <Error_Handler+0x8>

08001c88 <_Z6doStepv>:
void doStep();
Timer motor1_timer(3, true, doStep);

static uint8_t toggleState1 = 0;
static uint8_t toggleState2 = 0;
void doStep() {
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
    if (motor1.currentPos < motor1.desiredPos) {
 8001c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	4b2e      	ldr	r3, [pc, #184]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	bfb4      	ite	lt
 8001c98:	2301      	movlt	r3, #1
 8001c9a:	2300      	movge	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d021      	beq.n	8001ce6 <_Z6doStepv+0x5e>
        // Set direction for forward motion
        motor1.dirPort->BSRR = motor1.dirPin;
 8001ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001ca4:	899a      	ldrh	r2, [r3, #12]
 8001ca6:	4b29      	ldr	r3, [pc, #164]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	619a      	str	r2, [r3, #24]
        if (toggleState1 == 0) { // rising edge: set STEP high
 8001cac:	4b28      	ldr	r3, [pc, #160]	@ (8001d50 <_Z6doStepv+0xc8>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d108      	bne.n	8001cc6 <_Z6doStepv+0x3e>
            motor1.stepPort->BSRR = motor1.stepPin;
 8001cb4:	4b25      	ldr	r3, [pc, #148]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001cb6:	889a      	ldrh	r2, [r3, #4]
 8001cb8:	4b24      	ldr	r3, [pc, #144]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	619a      	str	r2, [r3, #24]
            toggleState1 = 1;
 8001cbe:	4b24      	ldr	r3, [pc, #144]	@ (8001d50 <_Z6doStepv+0xc8>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
            motor1.stepPort->BSRR = (motor1.stepPin << 16);
            toggleState1 = 0;
            motor1.currentPos--;
        }
    }
}
 8001cc4:	e03d      	b.n	8001d42 <_Z6doStepv+0xba>
            motor1.stepPort->BSRR = (motor1.stepPin << 16);
 8001cc6:	4b21      	ldr	r3, [pc, #132]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001cc8:	889b      	ldrh	r3, [r3, #4]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0412      	lsls	r2, r2, #16
 8001cd2:	619a      	str	r2, [r3, #24]
            toggleState1 = 0;
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d50 <_Z6doStepv+0xc8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
            motor1.currentPos++;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001ce2:	6113      	str	r3, [r2, #16]
}
 8001ce4:	e02d      	b.n	8001d42 <_Z6doStepv+0xba>
    } else if (motor1.currentPos > motor1.desiredPos) {
 8001ce6:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	bfcc      	ite	gt
 8001cf2:	2301      	movgt	r3, #1
 8001cf4:	2300      	movle	r3, #0
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d022      	beq.n	8001d42 <_Z6doStepv+0xba>
        motor1.dirPort->BSRR = (motor1.dirPin << 16);
 8001cfc:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001cfe:	899b      	ldrh	r3, [r3, #12]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	0412      	lsls	r2, r2, #16
 8001d08:	619a      	str	r2, [r3, #24]
        if (toggleState1 == 0) { // rising edge: set STEP high
 8001d0a:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <_Z6doStepv+0xc8>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d108      	bne.n	8001d24 <_Z6doStepv+0x9c>
            motor1.stepPort->BSRR = motor1.stepPin;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001d14:	889a      	ldrh	r2, [r3, #4]
 8001d16:	4b0d      	ldr	r3, [pc, #52]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	619a      	str	r2, [r3, #24]
            toggleState1 = 1;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <_Z6doStepv+0xc8>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
}
 8001d22:	e00e      	b.n	8001d42 <_Z6doStepv+0xba>
            motor1.stepPort->BSRR = (motor1.stepPin << 16);
 8001d24:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001d26:	889b      	ldrh	r3, [r3, #4]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	0412      	lsls	r2, r2, #16
 8001d30:	619a      	str	r2, [r3, #24]
            toggleState1 = 0;
 8001d32:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <_Z6doStepv+0xc8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
            motor1.currentPos--;
 8001d38:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	4a03      	ldr	r2, [pc, #12]	@ (8001d4c <_Z6doStepv+0xc4>)
 8001d40:	6113      	str	r3, [r2, #16]
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	200004e0 	.word	0x200004e0
 8001d50:	20000514 	.word	0x20000514

08001d54 <stepperControl_init>:


void stepperControl_init(){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
    motor2.stepPort = STEP2_GPIO_Port;
 8001d58:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc4 <stepperControl_init+0x70>)
 8001d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc8 <stepperControl_init+0x74>)
 8001d5c:	601a      	str	r2, [r3, #0]
	motor2.stepPin  = STEP2_Pin;
 8001d5e:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <stepperControl_init+0x70>)
 8001d60:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d64:	809a      	strh	r2, [r3, #4]
	motor2.dirPort  = DIR2_GPIO_Port;
 8001d66:	4b17      	ldr	r3, [pc, #92]	@ (8001dc4 <stepperControl_init+0x70>)
 8001d68:	4a17      	ldr	r2, [pc, #92]	@ (8001dc8 <stepperControl_init+0x74>)
 8001d6a:	609a      	str	r2, [r3, #8]
	motor2.dirPin   = DIR2_Pin;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <stepperControl_init+0x70>)
 8001d6e:	2210      	movs	r2, #16
 8001d70:	819a      	strh	r2, [r3, #12]
	motor2.currentPos = 0;
 8001d72:	4b14      	ldr	r3, [pc, #80]	@ (8001dc4 <stepperControl_init+0x70>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
	motor2.desiredPos = 0;
 8001d78:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <stepperControl_init+0x70>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	615a      	str	r2, [r3, #20]
	// motor2.stepTimer = &motor2_timer;
	motor2.toggleCount = 0;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <stepperControl_init+0x70>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	739a      	strb	r2, [r3, #14]
	// control.attachTimer(&motor2_timer);

	motor1.stepPort = STEP4_GPIO_Port;
 8001d84:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <stepperControl_init+0x78>)
 8001d86:	4a10      	ldr	r2, [pc, #64]	@ (8001dc8 <stepperControl_init+0x74>)
 8001d88:	601a      	str	r2, [r3, #0]
	motor1.stepPin  = STEP4_Pin;
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <stepperControl_init+0x78>)
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	809a      	strh	r2, [r3, #4]
	motor1.dirPort  = DIR4_GPIO_Port;
 8001d90:	4b0e      	ldr	r3, [pc, #56]	@ (8001dcc <stepperControl_init+0x78>)
 8001d92:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd0 <stepperControl_init+0x7c>)
 8001d94:	609a      	str	r2, [r3, #8]
	motor1.dirPin   = DIR4_Pin;
 8001d96:	4b0d      	ldr	r3, [pc, #52]	@ (8001dcc <stepperControl_init+0x78>)
 8001d98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d9c:	819a      	strh	r2, [r3, #12]
	motor1.currentPos = 0;
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <stepperControl_init+0x78>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
	motor1.desiredPos = 0;
 8001da4:	4b09      	ldr	r3, [pc, #36]	@ (8001dcc <stepperControl_init+0x78>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	615a      	str	r2, [r3, #20]
	// motor1.stepTimer = &motor1_timer;
	motor1.toggleCount = 0;
 8001daa:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <stepperControl_init+0x78>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	739a      	strb	r2, [r3, #14]

	control.attachTimer(&motor1_timer);
 8001db0:	4908      	ldr	r1, [pc, #32]	@ (8001dd4 <stepperControl_init+0x80>)
 8001db2:	4809      	ldr	r0, [pc, #36]	@ (8001dd8 <stepperControl_init+0x84>)
 8001db4:	f7ff fc43 	bl	800163e <_ZN17TimerArrayControl11attachTimerEP5Timer>
	control.begin();
 8001db8:	4807      	ldr	r0, [pc, #28]	@ (8001dd8 <stepperControl_init+0x84>)
 8001dba:	f7ff fb43 	bl	8001444 <_ZN17TimerArrayControl5beginEv>
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200004c8 	.word	0x200004c8
 8001dc8:	40020400 	.word	0x40020400
 8001dcc:	200004e0 	.word	0x200004e0
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	200004f8 	.word	0x200004f8
 8001dd8:	20000484 	.word	0x20000484

08001ddc <HAL_GPIO_EXTI_Callback>:


extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin == LIMIT_SWITCH1_Pin) || (GPIO_Pin == LIMIT_SWITCH2_Pin)) {  // Ensure LIMIT_SWITCH_Pin is defined correctly
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_EXTI_Callback+0x1a>
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001df4:	d118      	bne.n	8001e28 <HAL_GPIO_EXTI_Callback+0x4c>
		int len = snprintf(UART_buffer2, sizeof(UART_buffer2), "Interuppt triggered\r\n");
 8001df6:	4a0f      	ldr	r2, [pc, #60]	@ (8001e34 <HAL_GPIO_EXTI_Callback+0x58>)
 8001df8:	2132      	movs	r1, #50	@ 0x32
 8001dfa:	480f      	ldr	r0, [pc, #60]	@ (8001e38 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001dfc:	f004 fdca 	bl	8006994 <sniprintf>
 8001e00:	60f8      	str	r0, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *)UART_buffer2, len, 10000);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001e0a:	490b      	ldr	r1, [pc, #44]	@ (8001e38 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001e0c:	480b      	ldr	r0, [pc, #44]	@ (8001e3c <HAL_GPIO_EXTI_Callback+0x60>)
 8001e0e:	f003 fc29 	bl	8005664 <HAL_UART_Transmit>

		control.detachTimer(&motor1_timer);
 8001e12:	490b      	ldr	r1, [pc, #44]	@ (8001e40 <HAL_GPIO_EXTI_Callback+0x64>)
 8001e14:	480b      	ldr	r0, [pc, #44]	@ (8001e44 <HAL_GPIO_EXTI_Callback+0x68>)
 8001e16:	f7ff fc46 	bl	80016a6 <_ZN17TimerArrayControl11detachTimerEP5Timer>
		// control.detachTimer(&motor2_timer);

		motor1.currentPos = 0;
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
		motor2.currentPos = 0;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <HAL_GPIO_EXTI_Callback+0x70>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
	} else {
 8001e26:	e001      	b.n	8001e2c <HAL_GPIO_EXTI_Callback+0x50>
		__NOP();
 8001e28:	bf00      	nop

	}
}
 8001e2a:	bf00      	nop
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	08008b30 	.word	0x08008b30
 8001e38:	20000450 	.word	0x20000450
 8001e3c:	20000404 	.word	0x20000404
 8001e40:	200004f8 	.word	0x200004f8
 8001e44:	20000484 	.word	0x20000484
 8001e48:	200004e0 	.word	0x200004e0
 8001e4c:	200004c8 	.word	0x200004c8

08001e50 <_Z41__static_initialization_and_destruction_0ii>:
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d11f      	bne.n	8001ea0 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d11a      	bne.n	8001ea0 <_Z41__static_initialization_and_destruction_0ii+0x50>
uint32_t frequencyDivision = timerInputFrequency/10000;
 8001e6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a15      	ldr	r2, [pc, #84]	@ (8001ec4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001e70:	fba2 2303 	umull	r2, r3, r2, r3
 8001e74:	0b5b      	lsrs	r3, r3, #13
 8001e76:	4a14      	ldr	r2, [pc, #80]	@ (8001ec8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001e78:	6013      	str	r3, [r2, #0]
TimerArrayControl control(&htim2, timerInputFrequency, frequencyDivision, timerCounterBits);
 8001e7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001e80:	6819      	ldr	r1, [r3, #0]
 8001e82:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4910      	ldr	r1, [pc, #64]	@ (8001ed0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001e8e:	4811      	ldr	r0, [pc, #68]	@ (8001ed4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001e90:	f7ff faa8 	bl	80013e4 <_ZN17TimerArrayControlC1EP17TIM_HandleTypeDefmmh>
Timer motor1_timer(3, true, doStep);
 8001e94:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	2103      	movs	r1, #3
 8001e9a:	4810      	ldr	r0, [pc, #64]	@ (8001edc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001e9c:	f7ff f904 	bl	80010a8 <_ZN5TimerC1EmbPFvvE>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d107      	bne.n	8001eb6 <_Z41__static_initialization_and_destruction_0ii+0x66>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d102      	bne.n	8001eb6 <_Z41__static_initialization_and_destruction_0ii+0x66>
TimerArrayControl control(&htim2, timerInputFrequency, frequencyDivision, timerCounterBits);
 8001eb0:	4808      	ldr	r0, [pc, #32]	@ (8001ed4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001eb2:	f7ff fc8f 	bl	80017d4 <_ZN17TimerArrayControlD1Ev>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	d1b71759 	.word	0xd1b71759
 8001ec8:	2000044c 	.word	0x2000044c
 8001ecc:	20000004 	.word	0x20000004
 8001ed0:	200003bc 	.word	0x200003bc
 8001ed4:	20000484 	.word	0x20000484
 8001ed8:	08001c89 	.word	0x08001c89
 8001edc:	200004f8 	.word	0x200004f8

08001ee0 <_GLOBAL__sub_I_timerInputFrequency>:
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f7ff ffb1 	bl	8001e50 <_Z41__static_initialization_and_destruction_0ii>
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_GLOBAL__sub_D_timerInputFrequency>:
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7ff ffa9 	bl	8001e50 <_Z41__static_initialization_and_destruction_0ii>
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <HAL_MspInit+0x4c>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001f4c <HAL_MspInit+0x4c>)
 8001f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f16:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <HAL_MspInit+0x4c>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <HAL_MspInit+0x4c>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	4a08      	ldr	r2, [pc, #32]	@ (8001f4c <HAL_MspInit+0x4c>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_MspInit+0x4c>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f3e:	2007      	movs	r0, #7
 8001f40:	f000 fc38 	bl	80027b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	@ 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a19      	ldr	r2, [pc, #100]	@ (8001fd4 <HAL_I2C_MspInit+0x84>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d12c      	bne.n	8001fcc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	4b18      	ldr	r3, [pc, #96]	@ (8001fd8 <HAL_I2C_MspInit+0x88>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	4a17      	ldr	r2, [pc, #92]	@ (8001fd8 <HAL_I2C_MspInit+0x88>)
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f82:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <HAL_I2C_MspInit+0x88>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f94:	2312      	movs	r3, #18
 8001f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	4619      	mov	r1, r3
 8001faa:	480c      	ldr	r0, [pc, #48]	@ (8001fdc <HAL_I2C_MspInit+0x8c>)
 8001fac:	f000 fc44 	bl	8002838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <HAL_I2C_MspInit+0x88>)
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb8:	4a07      	ldr	r2, [pc, #28]	@ (8001fd8 <HAL_I2C_MspInit+0x88>)
 8001fba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fc0:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <HAL_I2C_MspInit+0x88>)
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001fcc:	bf00      	nop
 8001fce:	3728      	adds	r7, #40	@ 0x28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40005400 	.word	0x40005400
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020400 	.word	0x40020400

08001fe0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ff0:	d115      	bne.n	800201e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <HAL_TIM_Base_MspInit+0x48>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8002028 <HAL_TIM_Base_MspInit+0x48>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6413      	str	r3, [r2, #64]	@ 0x40
 8002002:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <HAL_TIM_Base_MspInit+0x48>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	2100      	movs	r1, #0
 8002012:	201c      	movs	r0, #28
 8002014:	f000 fbd9 	bl	80027ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002018:	201c      	movs	r0, #28
 800201a:	f000 fbf2 	bl	8002802 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800

0800202c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	@ 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a19      	ldr	r2, [pc, #100]	@ (80020b0 <HAL_UART_MspInit+0x84>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d12b      	bne.n	80020a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	4b18      	ldr	r3, [pc, #96]	@ (80020b4 <HAL_UART_MspInit+0x88>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	4a17      	ldr	r2, [pc, #92]	@ (80020b4 <HAL_UART_MspInit+0x88>)
 8002058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800205c:	6413      	str	r3, [r2, #64]	@ 0x40
 800205e:	4b15      	ldr	r3, [pc, #84]	@ (80020b4 <HAL_UART_MspInit+0x88>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <HAL_UART_MspInit+0x88>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	4a10      	ldr	r2, [pc, #64]	@ (80020b4 <HAL_UART_MspInit+0x88>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6313      	str	r3, [r2, #48]	@ 0x30
 800207a:	4b0e      	ldr	r3, [pc, #56]	@ (80020b4 <HAL_UART_MspInit+0x88>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002086:	230c      	movs	r3, #12
 8002088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002096:	2307      	movs	r3, #7
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	4805      	ldr	r0, [pc, #20]	@ (80020b8 <HAL_UART_MspInit+0x8c>)
 80020a2:	f000 fbc9 	bl	8002838 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80020a6:	bf00      	nop
 80020a8:	3728      	adds	r7, #40	@ 0x28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40004400 	.word	0x40004400
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020000 	.word	0x40020000

080020bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <NMI_Handler+0x4>

080020c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <HardFault_Handler+0x4>

080020cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <MemManage_Handler+0x4>

080020d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <BusFault_Handler+0x4>

080020dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <UsageFault_Handler+0x4>

080020e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002112:	f000 fa3b 	bl	800258c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}

0800211a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DATA_READY_Pin);
 800211e:	2008      	movs	r0, #8
 8002120:	f000 fd50 	bl	8002bc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800212c:	4802      	ldr	r0, [pc, #8]	@ (8002138 <TIM2_IRQHandler+0x10>)
 800212e:	f002 fc61 	bl	80049f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200003bc 	.word	0x200003bc

0800213c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH1_Pin);
 8002140:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002144:	f000 fd3e 	bl	8002bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH2_Pin);
 8002148:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800214c:	f000 fd3a 	bl	8002bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002150:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002154:	f000 fd36 	bl	8002bc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}

0800215c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return 1;
 8002160:	2301      	movs	r3, #1
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_kill>:

int _kill(int pid, int sig)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002176:	f004 fce7 	bl	8006b48 <__errno>
 800217a:	4603      	mov	r3, r0
 800217c:	2216      	movs	r2, #22
 800217e:	601a      	str	r2, [r3, #0]
  return -1;
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_exit>:

void _exit (int status)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002194:	f04f 31ff 	mov.w	r1, #4294967295
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ffe7 	bl	800216c <_kill>
  while (1) {}    /* Make sure we hang here */
 800219e:	bf00      	nop
 80021a0:	e7fd      	b.n	800219e <_exit+0x12>

080021a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	e00a      	b.n	80021ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021b4:	f3af 8000 	nop.w
 80021b8:	4601      	mov	r1, r0
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	60ba      	str	r2, [r7, #8]
 80021c0:	b2ca      	uxtb	r2, r1
 80021c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3301      	adds	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	dbf0      	blt.n	80021b4 <_read+0x12>
  }

  return len;
 80021d2:	687b      	ldr	r3, [r7, #4]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e009      	b.n	8002202 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	60ba      	str	r2, [r7, #8]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3301      	adds	r3, #1
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	429a      	cmp	r2, r3
 8002208:	dbf1      	blt.n	80021ee <_write+0x12>
  }
  return len;
 800220a:	687b      	ldr	r3, [r7, #4]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <_close>:

int _close(int file)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800221c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800223c:	605a      	str	r2, [r3, #4]
  return 0;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <_isatty>:

int _isatty(int file)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002254:	2301      	movs	r3, #1
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002284:	4a14      	ldr	r2, [pc, #80]	@ (80022d8 <_sbrk+0x5c>)
 8002286:	4b15      	ldr	r3, [pc, #84]	@ (80022dc <_sbrk+0x60>)
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002290:	4b13      	ldr	r3, [pc, #76]	@ (80022e0 <_sbrk+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002298:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <_sbrk+0x64>)
 800229a:	4a12      	ldr	r2, [pc, #72]	@ (80022e4 <_sbrk+0x68>)
 800229c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d207      	bcs.n	80022bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022ac:	f004 fc4c 	bl	8006b48 <__errno>
 80022b0:	4603      	mov	r3, r0
 80022b2:	220c      	movs	r2, #12
 80022b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	e009      	b.n	80022d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022bc:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <_sbrk+0x64>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c2:	4b07      	ldr	r3, [pc, #28]	@ (80022e0 <_sbrk+0x64>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	4a05      	ldr	r2, [pc, #20]	@ (80022e0 <_sbrk+0x64>)
 80022cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20020000 	.word	0x20020000
 80022dc:	00000400 	.word	0x00000400
 80022e0:	20000518 	.word	0x20000518
 80022e4:	20000670 	.word	0x20000670

080022e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <SystemInit+0x20>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f2:	4a05      	ldr	r2, [pc, #20]	@ (8002308 <SystemInit+0x20>)
 80022f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <Xbus_getMessageId>:
}

/*! \brief Returns xbus Message identifier
*/
int Xbus_getMessageId(const uint8_t* xbusMessage)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	return (xbusMessage[OFFSET_TO_MID] & 0xff);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3302      	adds	r3, #2
 8002318:	781b      	ldrb	r3, [r3, #0]
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <checkDataReadyLineMain>:
	checksum &= 0xff;
	return (checksum == 0);
}

bool checkDataReadyLineMain()
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(DATA_READY_PORT, DATA_READY_PIN) == GPIO_PIN_SET;
 800232c:	2108      	movs	r1, #8
 800232e:	4805      	ldr	r0, [pc, #20]	@ (8002344 <checkDataReadyLineMain+0x1c>)
 8002330:	f000 fc16 	bl	8002b60 <HAL_GPIO_ReadPin>
 8002334:	4603      	mov	r3, r0
 8002336:	2b01      	cmp	r3, #1
 8002338:	bf0c      	ite	eq
 800233a:	2301      	moveq	r3, #1
 800233c:	2300      	movne	r3, #0
 800233e:	b2db      	uxtb	r3, r3
}
 8002340:	4618      	mov	r0, r3
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40020400 	.word	0x40020400

08002348 <extractUint8>:
	*dptr++ = checksum;

	return dptr - dest;
}

uint8_t extractUint8(const uint8_t *data, int *index) {
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
    uint8_t result = data[*index];
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4413      	add	r3, r2
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	73fb      	strb	r3, [r7, #15]
    (*index)++;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	601a      	str	r2, [r3, #0]
    return result;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <extractUint16>:

/* Extract a 16-bit unsigned integer from data in big-endian order.
   The first byte becomes the high 8 bits and the second byte the low 8 bits. */
uint16_t extractUint16(const uint8_t *data, int *index) {
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
    uint16_t result = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	81fb      	strh	r3, [r7, #14]
    result |= ((uint16_t)data[*index]) << 8;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4413      	add	r3, r2
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	b21a      	sxth	r2, r3
 8002396:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800239a:	4313      	orrs	r3, r2
 800239c:	b21b      	sxth	r3, r3
 800239e:	81fb      	strh	r3, [r7, #14]
    (*index)++;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	601a      	str	r2, [r3, #0]
    result |= ((uint16_t)data[*index]);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4413      	add	r3, r2
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	89fb      	ldrh	r3, [r7, #14]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	81fb      	strh	r3, [r7, #14]
    (*index)++;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	601a      	str	r2, [r3, #0]
    return result;
 80023c8:	89fb      	ldrh	r3, [r7, #14]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <extractUint32>:

/* Extract a 32-bit unsigned integer from data in big-endian order.
   The first byte is shifted to the most significant position, etc. */
uint32_t extractUint32(const uint8_t *data, int *index) {
 80023d6:	b480      	push	{r7}
 80023d8:	b085      	sub	sp, #20
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
    uint32_t result = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
    result |= ((uint32_t)data[*index]) << 24;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	061b      	lsls	r3, r3, #24
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
    (*index)++;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	601a      	str	r2, [r3, #0]
    result |= ((uint32_t)data[*index]) << 16;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	041b      	lsls	r3, r3, #16
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
    (*index)++;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	601a      	str	r2, [r3, #0]
    result |= ((uint32_t)data[*index]) << 8;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
    (*index)++;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	601a      	str	r2, [r3, #0]
    result |= ((uint32_t)data[*index]);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4413      	add	r3, r2
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
    (*index)++;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	601a      	str	r2, [r3, #0]
    return result;
 800245c:	68fb      	ldr	r3, [r7, #12]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <extractFloat>:

/* Extract a float by first reading 4 bytes as a 32-bit unsigned integer
   and then copying them into a float. */
float extractFloat(const uint8_t *data, int *index) {
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]
    uint32_t temp = extractUint32(data, index);
 8002474:	6839      	ldr	r1, [r7, #0]
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ffad 	bl	80023d6 <extractUint32>
 800247c:	4603      	mov	r3, r0
 800247e:	60fb      	str	r3, [r7, #12]
    float result;
    memcpy(&result, &temp, sizeof(result));
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	60bb      	str	r3, [r7, #8]
    return result;
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	ee07 3a90 	vmov	s15, r3
}
 800248a:	eeb0 0a67 	vmov.f32	s0, s15
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002494:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002498:	f7ff ff26 	bl	80022e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800249c:	480c      	ldr	r0, [pc, #48]	@ (80024d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800249e:	490d      	ldr	r1, [pc, #52]	@ (80024d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024a0:	4a0d      	ldr	r2, [pc, #52]	@ (80024d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a4:	e002      	b.n	80024ac <LoopCopyDataInit>

080024a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024aa:	3304      	adds	r3, #4

080024ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b0:	d3f9      	bcc.n	80024a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b2:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024b4:	4c0a      	ldr	r4, [pc, #40]	@ (80024e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b8:	e001      	b.n	80024be <LoopFillZerobss>

080024ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024bc:	3204      	adds	r2, #4

080024be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c0:	d3fb      	bcc.n	80024ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80024c2:	f004 fb47 	bl	8006b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024c6:	f7ff f9a7 	bl	8001818 <main>
  bx  lr    
 80024ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80024d8:	08008f20 	.word	0x08008f20
  ldr r2, =_sbss
 80024dc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80024e0:	2000066c 	.word	0x2000066c

080024e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e4:	e7fe      	b.n	80024e4 <ADC_IRQHandler>
	...

080024e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <HAL_Init+0x40>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002528 <HAL_Init+0x40>)
 80024f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <HAL_Init+0x40>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002528 <HAL_Init+0x40>)
 80024fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002504:	4b08      	ldr	r3, [pc, #32]	@ (8002528 <HAL_Init+0x40>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a07      	ldr	r2, [pc, #28]	@ (8002528 <HAL_Init+0x40>)
 800250a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800250e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002510:	2003      	movs	r0, #3
 8002512:	f000 f94f 	bl	80027b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002516:	2000      	movs	r0, #0
 8002518:	f000 f808 	bl	800252c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800251c:	f7ff fcf0 	bl	8001f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023c00 	.word	0x40023c00

0800252c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002534:	4b12      	ldr	r3, [pc, #72]	@ (8002580 <HAL_InitTick+0x54>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b12      	ldr	r3, [pc, #72]	@ (8002584 <HAL_InitTick+0x58>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4619      	mov	r1, r3
 800253e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002542:	fbb3 f3f1 	udiv	r3, r3, r1
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f967 	bl	800281e <HAL_SYSTICK_Config>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e00e      	b.n	8002578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b0f      	cmp	r3, #15
 800255e:	d80a      	bhi.n	8002576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002560:	2200      	movs	r2, #0
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	f000 f92f 	bl	80027ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800256c:	4a06      	ldr	r2, [pc, #24]	@ (8002588 <HAL_InitTick+0x5c>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e000      	b.n	8002578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000008 	.word	0x20000008
 8002584:	20000010 	.word	0x20000010
 8002588:	2000000c 	.word	0x2000000c

0800258c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002590:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <HAL_IncTick+0x20>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <HAL_IncTick+0x24>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4413      	add	r3, r2
 800259c:	4a04      	ldr	r2, [pc, #16]	@ (80025b0 <HAL_IncTick+0x24>)
 800259e:	6013      	str	r3, [r2, #0]
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000010 	.word	0x20000010
 80025b0:	2000051c 	.word	0x2000051c

080025b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return uwTick;
 80025b8:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <HAL_GetTick+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	2000051c 	.word	0x2000051c

080025cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d4:	f7ff ffee 	bl	80025b4 <HAL_GetTick>
 80025d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d005      	beq.n	80025f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <HAL_Delay+0x44>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4413      	add	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025f2:	bf00      	nop
 80025f4:	f7ff ffde 	bl	80025b4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	429a      	cmp	r2, r3
 8002602:	d8f7      	bhi.n	80025f4 <HAL_Delay+0x28>
  {
  }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000010 	.word	0x20000010

08002614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800263c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002646:	4a04      	ldr	r2, [pc, #16]	@ (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	60d3      	str	r3, [r2, #12]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002660:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <__NVIC_GetPriorityGrouping+0x18>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	f003 0307 	and.w	r3, r3, #7
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	2b00      	cmp	r3, #0
 8002688:	db0b      	blt.n	80026a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	4907      	ldr	r1, [pc, #28]	@ (80026b0 <__NVIC_EnableIRQ+0x38>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2001      	movs	r0, #1
 800269a:	fa00 f202 	lsl.w	r2, r0, r2
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000e100 	.word	0xe000e100

080026b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db0a      	blt.n	80026de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	490c      	ldr	r1, [pc, #48]	@ (8002700 <__NVIC_SetPriority+0x4c>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	0112      	lsls	r2, r2, #4
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	440b      	add	r3, r1
 80026d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026dc:	e00a      	b.n	80026f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4908      	ldr	r1, [pc, #32]	@ (8002704 <__NVIC_SetPriority+0x50>)
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	3b04      	subs	r3, #4
 80026ec:	0112      	lsls	r2, r2, #4
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	440b      	add	r3, r1
 80026f2:	761a      	strb	r2, [r3, #24]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000e100 	.word	0xe000e100
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	@ 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f1c3 0307 	rsb	r3, r3, #7
 8002722:	2b04      	cmp	r3, #4
 8002724:	bf28      	it	cs
 8002726:	2304      	movcs	r3, #4
 8002728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3304      	adds	r3, #4
 800272e:	2b06      	cmp	r3, #6
 8002730:	d902      	bls.n	8002738 <NVIC_EncodePriority+0x30>
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3b03      	subs	r3, #3
 8002736:	e000      	b.n	800273a <NVIC_EncodePriority+0x32>
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	f04f 32ff 	mov.w	r2, #4294967295
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	401a      	ands	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002750:	f04f 31ff 	mov.w	r1, #4294967295
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	43d9      	mvns	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	4313      	orrs	r3, r2
         );
}
 8002762:	4618      	mov	r0, r3
 8002764:	3724      	adds	r7, #36	@ 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002780:	d301      	bcc.n	8002786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002782:	2301      	movs	r3, #1
 8002784:	e00f      	b.n	80027a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002786:	4a0a      	ldr	r2, [pc, #40]	@ (80027b0 <SysTick_Config+0x40>)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3b01      	subs	r3, #1
 800278c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278e:	210f      	movs	r1, #15
 8002790:	f04f 30ff 	mov.w	r0, #4294967295
 8002794:	f7ff ff8e 	bl	80026b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <SysTick_Config+0x40>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279e:	4b04      	ldr	r3, [pc, #16]	@ (80027b0 <SysTick_Config+0x40>)
 80027a0:	2207      	movs	r2, #7
 80027a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	e000e010 	.word	0xe000e010

080027b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ff29 	bl	8002614 <__NVIC_SetPriorityGrouping>
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b086      	sub	sp, #24
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4603      	mov	r3, r0
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027dc:	f7ff ff3e 	bl	800265c <__NVIC_GetPriorityGrouping>
 80027e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	6978      	ldr	r0, [r7, #20]
 80027e8:	f7ff ff8e 	bl	8002708 <NVIC_EncodePriority>
 80027ec:	4602      	mov	r2, r0
 80027ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff5d 	bl	80026b4 <__NVIC_SetPriority>
}
 80027fa:	bf00      	nop
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff31 	bl	8002678 <__NVIC_EnableIRQ>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff ffa2 	bl	8002770 <SysTick_Config>
 800282c:	4603      	mov	r3, r0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	@ 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	e165      	b.n	8002b20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002854:	2201      	movs	r2, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	429a      	cmp	r2, r3
 800286e:	f040 8154 	bne.w	8002b1a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d005      	beq.n	800288a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002886:	2b02      	cmp	r3, #2
 8002888:	d130      	bne.n	80028ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c0:	2201      	movs	r2, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 0201 	and.w	r2, r3, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d017      	beq.n	8002928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d123      	bne.n	800297c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	08da      	lsrs	r2, r3, #3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3208      	adds	r2, #8
 800293c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	220f      	movs	r2, #15
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	08da      	lsrs	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3208      	adds	r2, #8
 8002976:	69b9      	ldr	r1, [r7, #24]
 8002978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0203 	and.w	r2, r3, #3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80ae 	beq.w	8002b1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002b38 <HAL_GPIO_Init+0x300>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002b38 <HAL_GPIO_Init+0x300>)
 80029c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002b38 <HAL_GPIO_Init+0x300>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029da:	4a58      	ldr	r2, [pc, #352]	@ (8002b3c <HAL_GPIO_Init+0x304>)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	3302      	adds	r3, #2
 80029e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	220f      	movs	r2, #15
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4f      	ldr	r2, [pc, #316]	@ (8002b40 <HAL_GPIO_Init+0x308>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d025      	beq.n	8002a52 <HAL_GPIO_Init+0x21a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4e      	ldr	r2, [pc, #312]	@ (8002b44 <HAL_GPIO_Init+0x30c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d01f      	beq.n	8002a4e <HAL_GPIO_Init+0x216>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4d      	ldr	r2, [pc, #308]	@ (8002b48 <HAL_GPIO_Init+0x310>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d019      	beq.n	8002a4a <HAL_GPIO_Init+0x212>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4c      	ldr	r2, [pc, #304]	@ (8002b4c <HAL_GPIO_Init+0x314>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d013      	beq.n	8002a46 <HAL_GPIO_Init+0x20e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4b      	ldr	r2, [pc, #300]	@ (8002b50 <HAL_GPIO_Init+0x318>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00d      	beq.n	8002a42 <HAL_GPIO_Init+0x20a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4a      	ldr	r2, [pc, #296]	@ (8002b54 <HAL_GPIO_Init+0x31c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <HAL_GPIO_Init+0x206>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a49      	ldr	r2, [pc, #292]	@ (8002b58 <HAL_GPIO_Init+0x320>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d101      	bne.n	8002a3a <HAL_GPIO_Init+0x202>
 8002a36:	2306      	movs	r3, #6
 8002a38:	e00c      	b.n	8002a54 <HAL_GPIO_Init+0x21c>
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	e00a      	b.n	8002a54 <HAL_GPIO_Init+0x21c>
 8002a3e:	2305      	movs	r3, #5
 8002a40:	e008      	b.n	8002a54 <HAL_GPIO_Init+0x21c>
 8002a42:	2304      	movs	r3, #4
 8002a44:	e006      	b.n	8002a54 <HAL_GPIO_Init+0x21c>
 8002a46:	2303      	movs	r3, #3
 8002a48:	e004      	b.n	8002a54 <HAL_GPIO_Init+0x21c>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e002      	b.n	8002a54 <HAL_GPIO_Init+0x21c>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_GPIO_Init+0x21c>
 8002a52:	2300      	movs	r3, #0
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	f002 0203 	and.w	r2, r2, #3
 8002a5a:	0092      	lsls	r2, r2, #2
 8002a5c:	4093      	lsls	r3, r2
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a64:	4935      	ldr	r1, [pc, #212]	@ (8002b3c <HAL_GPIO_Init+0x304>)
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	089b      	lsrs	r3, r3, #2
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a72:	4b3a      	ldr	r3, [pc, #232]	@ (8002b5c <HAL_GPIO_Init+0x324>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a96:	4a31      	ldr	r2, [pc, #196]	@ (8002b5c <HAL_GPIO_Init+0x324>)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b5c <HAL_GPIO_Init+0x324>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ac0:	4a26      	ldr	r2, [pc, #152]	@ (8002b5c <HAL_GPIO_Init+0x324>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ac6:	4b25      	ldr	r3, [pc, #148]	@ (8002b5c <HAL_GPIO_Init+0x324>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aea:	4a1c      	ldr	r2, [pc, #112]	@ (8002b5c <HAL_GPIO_Init+0x324>)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b5c <HAL_GPIO_Init+0x324>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b14:	4a11      	ldr	r2, [pc, #68]	@ (8002b5c <HAL_GPIO_Init+0x324>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	2b0f      	cmp	r3, #15
 8002b24:	f67f ae96 	bls.w	8002854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	3724      	adds	r7, #36	@ 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40013800 	.word	0x40013800
 8002b40:	40020000 	.word	0x40020000
 8002b44:	40020400 	.word	0x40020400
 8002b48:	40020800 	.word	0x40020800
 8002b4c:	40020c00 	.word	0x40020c00
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40021400 	.word	0x40021400
 8002b58:	40021800 	.word	0x40021800
 8002b5c:	40013c00 	.word	0x40013c00

08002b60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	887b      	ldrh	r3, [r7, #2]
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
 8002b7c:	e001      	b.n	8002b82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	807b      	strh	r3, [r7, #2]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ba0:	787b      	ldrb	r3, [r7, #1]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ba6:	887a      	ldrh	r2, [r7, #2]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bac:	e003      	b.n	8002bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bae:	887b      	ldrh	r3, [r7, #2]
 8002bb0:	041a      	lsls	r2, r3, #16
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	619a      	str	r2, [r3, #24]
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bce:	4b08      	ldr	r3, [pc, #32]	@ (8002bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d006      	beq.n	8002be8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bda:	4a05      	ldr	r2, [pc, #20]	@ (8002bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff f8fa 	bl	8001ddc <HAL_GPIO_EXTI_Callback>
  }
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40013c00 	.word	0x40013c00

08002bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e12b      	b.n	8002e5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff f998 	bl	8001f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2224      	movs	r2, #36	@ 0x24
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c58:	f000 ff5a 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 8002c5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4a81      	ldr	r2, [pc, #516]	@ (8002e68 <HAL_I2C_Init+0x274>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d807      	bhi.n	8002c78 <HAL_I2C_Init+0x84>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4a80      	ldr	r2, [pc, #512]	@ (8002e6c <HAL_I2C_Init+0x278>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	bf94      	ite	ls
 8002c70:	2301      	movls	r3, #1
 8002c72:	2300      	movhi	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e006      	b.n	8002c86 <HAL_I2C_Init+0x92>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a7d      	ldr	r2, [pc, #500]	@ (8002e70 <HAL_I2C_Init+0x27c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	bf94      	ite	ls
 8002c80:	2301      	movls	r3, #1
 8002c82:	2300      	movhi	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e0e7      	b.n	8002e5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4a78      	ldr	r2, [pc, #480]	@ (8002e74 <HAL_I2C_Init+0x280>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	0c9b      	lsrs	r3, r3, #18
 8002c98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	4a6a      	ldr	r2, [pc, #424]	@ (8002e68 <HAL_I2C_Init+0x274>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d802      	bhi.n	8002cc8 <HAL_I2C_Init+0xd4>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	e009      	b.n	8002cdc <HAL_I2C_Init+0xe8>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002cce:	fb02 f303 	mul.w	r3, r2, r3
 8002cd2:	4a69      	ldr	r2, [pc, #420]	@ (8002e78 <HAL_I2C_Init+0x284>)
 8002cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd8:	099b      	lsrs	r3, r3, #6
 8002cda:	3301      	adds	r3, #1
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002cee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	495c      	ldr	r1, [pc, #368]	@ (8002e68 <HAL_I2C_Init+0x274>)
 8002cf8:	428b      	cmp	r3, r1
 8002cfa:	d819      	bhi.n	8002d30 <HAL_I2C_Init+0x13c>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1e59      	subs	r1, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d0a:	1c59      	adds	r1, r3, #1
 8002d0c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d10:	400b      	ands	r3, r1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_I2C_Init+0x138>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1e59      	subs	r1, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d24:	3301      	adds	r3, #1
 8002d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2a:	e051      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002d2c:	2304      	movs	r3, #4
 8002d2e:	e04f      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d111      	bne.n	8002d5c <HAL_I2C_Init+0x168>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e58      	subs	r0, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	440b      	add	r3, r1
 8002d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf0c      	ite	eq
 8002d54:	2301      	moveq	r3, #1
 8002d56:	2300      	movne	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	e012      	b.n	8002d82 <HAL_I2C_Init+0x18e>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e58      	subs	r0, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6859      	ldr	r1, [r3, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	0099      	lsls	r1, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Init+0x196>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e022      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10e      	bne.n	8002db0 <HAL_I2C_Init+0x1bc>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1e58      	subs	r0, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6859      	ldr	r1, [r3, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	440b      	add	r3, r1
 8002da0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da4:	3301      	adds	r3, #1
 8002da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002daa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dae:	e00f      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	1e58      	subs	r0, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6859      	ldr	r1, [r3, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	0099      	lsls	r1, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	6809      	ldr	r1, [r1, #0]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002dfe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6911      	ldr	r1, [r2, #16]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68d2      	ldr	r2, [r2, #12]
 8002e0a:	4311      	orrs	r1, r2
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	000186a0 	.word	0x000186a0
 8002e6c:	001e847f 	.word	0x001e847f
 8002e70:	003d08ff 	.word	0x003d08ff
 8002e74:	431bde83 	.word	0x431bde83
 8002e78:	10624dd3 	.word	0x10624dd3

08002e7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08c      	sub	sp, #48	@ 0x30
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	4608      	mov	r0, r1
 8002e86:	4611      	mov	r1, r2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	817b      	strh	r3, [r7, #10]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	813b      	strh	r3, [r7, #8]
 8002e92:	4613      	mov	r3, r2
 8002e94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e96:	f7ff fb8d 	bl	80025b4 <HAL_GetTick>
 8002e9a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	f040 8214 	bne.w	80032d2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	2319      	movs	r3, #25
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	497b      	ldr	r1, [pc, #492]	@ (80030a0 <HAL_I2C_Mem_Read+0x224>)
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 fafb 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e207      	b.n	80032d4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_I2C_Mem_Read+0x56>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e200      	b.n	80032d4 <HAL_I2C_Mem_Read+0x458>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d007      	beq.n	8002ef8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2222      	movs	r2, #34	@ 0x22
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2240      	movs	r2, #64	@ 0x40
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4a5b      	ldr	r2, [pc, #364]	@ (80030a4 <HAL_I2C_Mem_Read+0x228>)
 8002f38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f3a:	88f8      	ldrh	r0, [r7, #6]
 8002f3c:	893a      	ldrh	r2, [r7, #8]
 8002f3e:	8979      	ldrh	r1, [r7, #10]
 8002f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f42:	9301      	str	r3, [sp, #4]
 8002f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	4603      	mov	r3, r0
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f9c8 	bl	80032e0 <I2C_RequestMemoryRead>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e1bc      	b.n	80032d4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d113      	bne.n	8002f8a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f62:	2300      	movs	r3, #0
 8002f64:	623b      	str	r3, [r7, #32]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	623b      	str	r3, [r7, #32]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	623b      	str	r3, [r7, #32]
 8002f76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	e190      	b.n	80032ac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d11b      	bne.n	8002fca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	e170      	b.n	80032ac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d11b      	bne.n	800300a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fe0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ff0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	e150      	b.n	80032ac <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003020:	e144      	b.n	80032ac <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003026:	2b03      	cmp	r3, #3
 8003028:	f200 80f1 	bhi.w	800320e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003030:	2b01      	cmp	r3, #1
 8003032:	d123      	bne.n	800307c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003036:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 fb9b 	bl	8003774 <I2C_WaitOnRXNEFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e145      	b.n	80032d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800307a:	e117      	b.n	80032ac <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003080:	2b02      	cmp	r3, #2
 8003082:	d14e      	bne.n	8003122 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800308a:	2200      	movs	r2, #0
 800308c:	4906      	ldr	r1, [pc, #24]	@ (80030a8 <HAL_I2C_Mem_Read+0x22c>)
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fa0e 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d008      	beq.n	80030ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e11a      	b.n	80032d4 <HAL_I2C_Mem_Read+0x458>
 800309e:	bf00      	nop
 80030a0:	00100002 	.word	0x00100002
 80030a4:	ffff0000 	.word	0xffff0000
 80030a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003120:	e0c4      	b.n	80032ac <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003128:	2200      	movs	r2, #0
 800312a:	496c      	ldr	r1, [pc, #432]	@ (80032dc <HAL_I2C_Mem_Read+0x460>)
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f9bf 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0cb      	b.n	80032d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800314a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003184:	2200      	movs	r2, #0
 8003186:	4955      	ldr	r1, [pc, #340]	@ (80032dc <HAL_I2C_Mem_Read+0x460>)
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f991 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e09d      	b.n	80032d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691a      	ldr	r2, [r3, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800320c:	e04e      	b.n	80032ac <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003210:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 faae 	bl	8003774 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e058      	b.n	80032d4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b04      	cmp	r3, #4
 8003260:	d124      	bne.n	80032ac <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003266:	2b03      	cmp	r3, #3
 8003268:	d107      	bne.n	800327a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003278:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f47f aeb6 	bne.w	8003022 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e000      	b.n	80032d4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
  }
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3728      	adds	r7, #40	@ 0x28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	00010004 	.word	0x00010004

080032e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	4608      	mov	r0, r1
 80032ea:	4611      	mov	r1, r2
 80032ec:	461a      	mov	r2, r3
 80032ee:	4603      	mov	r3, r0
 80032f0:	817b      	strh	r3, [r7, #10]
 80032f2:	460b      	mov	r3, r1
 80032f4:	813b      	strh	r3, [r7, #8]
 80032f6:	4613      	mov	r3, r2
 80032f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003308:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003318:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	2200      	movs	r2, #0
 8003322:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f8c2 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00d      	beq.n	800334e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003340:	d103      	bne.n	800334a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003348:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e0aa      	b.n	80034a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800334e:	897b      	ldrh	r3, [r7, #10]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800335c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	6a3a      	ldr	r2, [r7, #32]
 8003362:	4952      	ldr	r1, [pc, #328]	@ (80034ac <I2C_RequestMemoryRead+0x1cc>)
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 f91d 	bl	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e097      	b.n	80034a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800338a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800338c:	6a39      	ldr	r1, [r7, #32]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f9a8 	bl	80036e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00d      	beq.n	80033b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d107      	bne.n	80033b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e076      	b.n	80034a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d105      	bne.n	80033c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033bc:	893b      	ldrh	r3, [r7, #8]
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	611a      	str	r2, [r3, #16]
 80033c6:	e021      	b.n	800340c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033c8:	893b      	ldrh	r3, [r7, #8]
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033d8:	6a39      	ldr	r1, [r7, #32]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f982 	bl	80036e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00d      	beq.n	8003402 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d107      	bne.n	80033fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e050      	b.n	80034a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003402:	893b      	ldrh	r3, [r7, #8]
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800340c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800340e:	6a39      	ldr	r1, [r7, #32]
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 f967 	bl	80036e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00d      	beq.n	8003438 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	2b04      	cmp	r3, #4
 8003422:	d107      	bne.n	8003434 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003432:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e035      	b.n	80034a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003446:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	2200      	movs	r2, #0
 8003450:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f82b 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00d      	beq.n	800347c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800346e:	d103      	bne.n	8003478 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003476:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e013      	b.n	80034a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800347c:	897b      	ldrh	r3, [r7, #10]
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	b2da      	uxtb	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	6a3a      	ldr	r2, [r7, #32]
 8003490:	4906      	ldr	r1, [pc, #24]	@ (80034ac <I2C_RequestMemoryRead+0x1cc>)
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f886 	bl	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	00010002 	.word	0x00010002

080034b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	4613      	mov	r3, r2
 80034be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034c0:	e048      	b.n	8003554 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c8:	d044      	beq.n	8003554 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ca:	f7ff f873 	bl	80025b4 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d302      	bcc.n	80034e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d139      	bne.n	8003554 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	0c1b      	lsrs	r3, r3, #16
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d10d      	bne.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x56>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	43da      	mvns	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	4013      	ands	r3, r2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	e00c      	b.n	8003520 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	43da      	mvns	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4013      	ands	r3, r2
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	bf0c      	ite	eq
 8003518:	2301      	moveq	r3, #1
 800351a:	2300      	movne	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	461a      	mov	r2, r3
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	429a      	cmp	r2, r3
 8003524:	d116      	bne.n	8003554 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	f043 0220 	orr.w	r2, r3, #32
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e023      	b.n	800359c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	0c1b      	lsrs	r3, r3, #16
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d10d      	bne.n	800357a <I2C_WaitOnFlagUntilTimeout+0xca>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	43da      	mvns	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4013      	ands	r3, r2
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	e00c      	b.n	8003594 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	43da      	mvns	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	4013      	ands	r3, r2
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf0c      	ite	eq
 800358c:	2301      	moveq	r3, #1
 800358e:	2300      	movne	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	429a      	cmp	r2, r3
 8003598:	d093      	beq.n	80034c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035b2:	e071      	b.n	8003698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c2:	d123      	bne.n	800360c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f8:	f043 0204 	orr.w	r2, r3, #4
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e067      	b.n	80036dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003612:	d041      	beq.n	8003698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003614:	f7fe ffce 	bl	80025b4 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	429a      	cmp	r2, r3
 8003622:	d302      	bcc.n	800362a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d136      	bne.n	8003698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	d10c      	bne.n	800364e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	43da      	mvns	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4013      	ands	r3, r2
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	bf14      	ite	ne
 8003646:	2301      	movne	r3, #1
 8003648:	2300      	moveq	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	e00b      	b.n	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	43da      	mvns	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4013      	ands	r3, r2
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf14      	ite	ne
 8003660:	2301      	movne	r3, #1
 8003662:	2300      	moveq	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d016      	beq.n	8003698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	f043 0220 	orr.w	r2, r3, #32
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e021      	b.n	80036dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	0c1b      	lsrs	r3, r3, #16
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d10c      	bne.n	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	43da      	mvns	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4013      	ands	r3, r2
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bf14      	ite	ne
 80036b4:	2301      	movne	r3, #1
 80036b6:	2300      	moveq	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	e00b      	b.n	80036d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4013      	ands	r3, r2
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf14      	ite	ne
 80036ce:	2301      	movne	r3, #1
 80036d0:	2300      	moveq	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f47f af6d 	bne.w	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036f0:	e034      	b.n	800375c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f89b 	bl	800382e <I2C_IsAcknowledgeFailed>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e034      	b.n	800376c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003708:	d028      	beq.n	800375c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370a:	f7fe ff53 	bl	80025b4 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	429a      	cmp	r2, r3
 8003718:	d302      	bcc.n	8003720 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d11d      	bne.n	800375c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372a:	2b80      	cmp	r3, #128	@ 0x80
 800372c:	d016      	beq.n	800375c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	f043 0220 	orr.w	r2, r3, #32
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e007      	b.n	800376c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003766:	2b80      	cmp	r3, #128	@ 0x80
 8003768:	d1c3      	bne.n	80036f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003780:	e049      	b.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b10      	cmp	r3, #16
 800378e:	d119      	bne.n	80037c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0210 	mvn.w	r2, #16
 8003798:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e030      	b.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c4:	f7fe fef6 	bl	80025b4 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d302      	bcc.n	80037da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d11d      	bne.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e4:	2b40      	cmp	r3, #64	@ 0x40
 80037e6:	d016      	beq.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	f043 0220 	orr.w	r2, r3, #32
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e007      	b.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003820:	2b40      	cmp	r3, #64	@ 0x40
 8003822:	d1ae      	bne.n	8003782 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003844:	d11b      	bne.n	800387e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800384e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386a:	f043 0204 	orr.w	r2, r3, #4
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	4b20      	ldr	r3, [pc, #128]	@ (800391c <HAL_PWREx_EnableOverDrive+0x90>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	4a1f      	ldr	r2, [pc, #124]	@ (800391c <HAL_PWREx_EnableOverDrive+0x90>)
 80038a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038a6:	4b1d      	ldr	r3, [pc, #116]	@ (800391c <HAL_PWREx_EnableOverDrive+0x90>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003920 <HAL_PWREx_EnableOverDrive+0x94>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038b8:	f7fe fe7c 	bl	80025b4 <HAL_GetTick>
 80038bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038be:	e009      	b.n	80038d4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038c0:	f7fe fe78 	bl	80025b4 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038ce:	d901      	bls.n	80038d4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e01f      	b.n	8003914 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038d4:	4b13      	ldr	r3, [pc, #76]	@ (8003924 <HAL_PWREx_EnableOverDrive+0x98>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038e0:	d1ee      	bne.n	80038c0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80038e2:	4b11      	ldr	r3, [pc, #68]	@ (8003928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038e8:	f7fe fe64 	bl	80025b4 <HAL_GetTick>
 80038ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038ee:	e009      	b.n	8003904 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038f0:	f7fe fe60 	bl	80025b4 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038fe:	d901      	bls.n	8003904 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e007      	b.n	8003914 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003904:	4b07      	ldr	r3, [pc, #28]	@ (8003924 <HAL_PWREx_EnableOverDrive+0x98>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003910:	d1ee      	bne.n	80038f0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40023800 	.word	0x40023800
 8003920:	420e0040 	.word	0x420e0040
 8003924:	40007000 	.word	0x40007000
 8003928:	420e0044 	.word	0x420e0044

0800392c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0cc      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003940:	4b68      	ldr	r3, [pc, #416]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d90c      	bls.n	8003968 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b65      	ldr	r3, [pc, #404]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003956:	4b63      	ldr	r3, [pc, #396]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0b8      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d020      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003980:	4b59      	ldr	r3, [pc, #356]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a58      	ldr	r2, [pc, #352]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800398a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003998:	4b53      	ldr	r3, [pc, #332]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	4a52      	ldr	r2, [pc, #328]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a4:	4b50      	ldr	r3, [pc, #320]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	494d      	ldr	r1, [pc, #308]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d044      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d107      	bne.n	80039da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	4b47      	ldr	r3, [pc, #284]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d119      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e07f      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d003      	beq.n	80039ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d107      	bne.n	80039fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ea:	4b3f      	ldr	r3, [pc, #252]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d109      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e06f      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fa:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e067      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a0a:	4b37      	ldr	r3, [pc, #220]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f023 0203 	bic.w	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	4934      	ldr	r1, [pc, #208]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a1c:	f7fe fdca 	bl	80025b4 <HAL_GetTick>
 8003a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	e00a      	b.n	8003a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a24:	f7fe fdc6 	bl	80025b4 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e04f      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 020c 	and.w	r2, r3, #12
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d1eb      	bne.n	8003a24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a4c:	4b25      	ldr	r3, [pc, #148]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d20c      	bcs.n	8003a74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5a:	4b22      	ldr	r3, [pc, #136]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a62:	4b20      	ldr	r3, [pc, #128]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e032      	b.n	8003ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a80:	4b19      	ldr	r3, [pc, #100]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4916      	ldr	r1, [pc, #88]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a9e:	4b12      	ldr	r3, [pc, #72]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	490e      	ldr	r1, [pc, #56]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ab2:	f000 f855 	bl	8003b60 <HAL_RCC_GetSysClockFreq>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	490a      	ldr	r1, [pc, #40]	@ (8003aec <HAL_RCC_ClockConfig+0x1c0>)
 8003ac4:	5ccb      	ldrb	r3, [r1, r3]
 8003ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aca:	4a09      	ldr	r2, [pc, #36]	@ (8003af0 <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ace:	4b09      	ldr	r3, [pc, #36]	@ (8003af4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe fd2a 	bl	800252c <HAL_InitTick>

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023c00 	.word	0x40023c00
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	08008b7c 	.word	0x08008b7c
 8003af0:	20000008 	.word	0x20000008
 8003af4:	2000000c 	.word	0x2000000c

08003af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003afc:	4b03      	ldr	r3, [pc, #12]	@ (8003b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003afe:	681b      	ldr	r3, [r3, #0]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	20000008 	.word	0x20000008

08003b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b14:	f7ff fff0 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	0a9b      	lsrs	r3, r3, #10
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	4903      	ldr	r1, [pc, #12]	@ (8003b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b26:	5ccb      	ldrb	r3, [r1, r3]
 8003b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40023800 	.word	0x40023800
 8003b34:	08008b8c 	.word	0x08008b8c

08003b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b3c:	f7ff ffdc 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b05      	ldr	r3, [pc, #20]	@ (8003b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	0b5b      	lsrs	r3, r3, #13
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4903      	ldr	r1, [pc, #12]	@ (8003b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	08008b8c 	.word	0x08008b8c

08003b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b64:	b0ae      	sub	sp, #184	@ 0xb8
 8003b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b86:	4bcb      	ldr	r3, [pc, #812]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b0c      	cmp	r3, #12
 8003b90:	f200 8206 	bhi.w	8003fa0 <HAL_RCC_GetSysClockFreq+0x440>
 8003b94:	a201      	add	r2, pc, #4	@ (adr r2, 8003b9c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9a:	bf00      	nop
 8003b9c:	08003bd1 	.word	0x08003bd1
 8003ba0:	08003fa1 	.word	0x08003fa1
 8003ba4:	08003fa1 	.word	0x08003fa1
 8003ba8:	08003fa1 	.word	0x08003fa1
 8003bac:	08003bd9 	.word	0x08003bd9
 8003bb0:	08003fa1 	.word	0x08003fa1
 8003bb4:	08003fa1 	.word	0x08003fa1
 8003bb8:	08003fa1 	.word	0x08003fa1
 8003bbc:	08003be1 	.word	0x08003be1
 8003bc0:	08003fa1 	.word	0x08003fa1
 8003bc4:	08003fa1 	.word	0x08003fa1
 8003bc8:	08003fa1 	.word	0x08003fa1
 8003bcc:	08003dd1 	.word	0x08003dd1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd0:	4bb9      	ldr	r3, [pc, #740]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003bd6:	e1e7      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bd8:	4bb8      	ldr	r3, [pc, #736]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x35c>)
 8003bda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003bde:	e1e3      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be0:	4bb4      	ldr	r3, [pc, #720]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003be8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bec:	4bb1      	ldr	r3, [pc, #708]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d071      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf8:	4bae      	ldr	r3, [pc, #696]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	099b      	lsrs	r3, r3, #6
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c04:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c14:	2300      	movs	r3, #0
 8003c16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c1e:	4622      	mov	r2, r4
 8003c20:	462b      	mov	r3, r5
 8003c22:	f04f 0000 	mov.w	r0, #0
 8003c26:	f04f 0100 	mov.w	r1, #0
 8003c2a:	0159      	lsls	r1, r3, #5
 8003c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c30:	0150      	lsls	r0, r2, #5
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4621      	mov	r1, r4
 8003c38:	1a51      	subs	r1, r2, r1
 8003c3a:	6439      	str	r1, [r7, #64]	@ 0x40
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003c50:	4649      	mov	r1, r9
 8003c52:	018b      	lsls	r3, r1, #6
 8003c54:	4641      	mov	r1, r8
 8003c56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c5a:	4641      	mov	r1, r8
 8003c5c:	018a      	lsls	r2, r1, #6
 8003c5e:	4641      	mov	r1, r8
 8003c60:	1a51      	subs	r1, r2, r1
 8003c62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c64:	4649      	mov	r1, r9
 8003c66:	eb63 0301 	sbc.w	r3, r3, r1
 8003c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003c78:	4649      	mov	r1, r9
 8003c7a:	00cb      	lsls	r3, r1, #3
 8003c7c:	4641      	mov	r1, r8
 8003c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c82:	4641      	mov	r1, r8
 8003c84:	00ca      	lsls	r2, r1, #3
 8003c86:	4610      	mov	r0, r2
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4622      	mov	r2, r4
 8003c8e:	189b      	adds	r3, r3, r2
 8003c90:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c92:	462b      	mov	r3, r5
 8003c94:	460a      	mov	r2, r1
 8003c96:	eb42 0303 	adc.w	r3, r2, r3
 8003c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ca8:	4629      	mov	r1, r5
 8003caa:	024b      	lsls	r3, r1, #9
 8003cac:	4621      	mov	r1, r4
 8003cae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	024a      	lsls	r2, r1, #9
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003cc8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003ccc:	f7fc ff8c 	bl	8000be8 <__aeabi_uldivmod>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cda:	e067      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cdc:	4b75      	ldr	r3, [pc, #468]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	099b      	lsrs	r3, r3, #6
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ce8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cfa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003cfe:	4622      	mov	r2, r4
 8003d00:	462b      	mov	r3, r5
 8003d02:	f04f 0000 	mov.w	r0, #0
 8003d06:	f04f 0100 	mov.w	r1, #0
 8003d0a:	0159      	lsls	r1, r3, #5
 8003d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d10:	0150      	lsls	r0, r2, #5
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4621      	mov	r1, r4
 8003d18:	1a51      	subs	r1, r2, r1
 8003d1a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d1c:	4629      	mov	r1, r5
 8003d1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003d30:	4649      	mov	r1, r9
 8003d32:	018b      	lsls	r3, r1, #6
 8003d34:	4641      	mov	r1, r8
 8003d36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d3a:	4641      	mov	r1, r8
 8003d3c:	018a      	lsls	r2, r1, #6
 8003d3e:	4641      	mov	r1, r8
 8003d40:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d44:	4649      	mov	r1, r9
 8003d46:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d56:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d5e:	4692      	mov	sl, r2
 8003d60:	469b      	mov	fp, r3
 8003d62:	4623      	mov	r3, r4
 8003d64:	eb1a 0303 	adds.w	r3, sl, r3
 8003d68:	623b      	str	r3, [r7, #32]
 8003d6a:	462b      	mov	r3, r5
 8003d6c:	eb4b 0303 	adc.w	r3, fp, r3
 8003d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003d7e:	4629      	mov	r1, r5
 8003d80:	028b      	lsls	r3, r1, #10
 8003d82:	4621      	mov	r1, r4
 8003d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d88:	4621      	mov	r1, r4
 8003d8a:	028a      	lsls	r2, r1, #10
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	4619      	mov	r1, r3
 8003d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d94:	2200      	movs	r2, #0
 8003d96:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d98:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d9a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003d9e:	f7fc ff23 	bl	8000be8 <__aeabi_uldivmod>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4613      	mov	r3, r2
 8003da8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003dac:	4b41      	ldr	r3, [pc, #260]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	0c1b      	lsrs	r3, r3, #16
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	3301      	adds	r3, #1
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003dbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003dc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003dce:	e0eb      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dd0:	4b38      	ldr	r3, [pc, #224]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ddc:	4b35      	ldr	r3, [pc, #212]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d06b      	beq.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de8:	4b32      	ldr	r3, [pc, #200]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	099b      	lsrs	r3, r3, #6
 8003dee:	2200      	movs	r2, #0
 8003df0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003df2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003df4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dfa:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e00:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003e04:	4622      	mov	r2, r4
 8003e06:	462b      	mov	r3, r5
 8003e08:	f04f 0000 	mov.w	r0, #0
 8003e0c:	f04f 0100 	mov.w	r1, #0
 8003e10:	0159      	lsls	r1, r3, #5
 8003e12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e16:	0150      	lsls	r0, r2, #5
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	1a51      	subs	r1, r2, r1
 8003e20:	61b9      	str	r1, [r7, #24]
 8003e22:	4629      	mov	r1, r5
 8003e24:	eb63 0301 	sbc.w	r3, r3, r1
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003e36:	4659      	mov	r1, fp
 8003e38:	018b      	lsls	r3, r1, #6
 8003e3a:	4651      	mov	r1, sl
 8003e3c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e40:	4651      	mov	r1, sl
 8003e42:	018a      	lsls	r2, r1, #6
 8003e44:	4651      	mov	r1, sl
 8003e46:	ebb2 0801 	subs.w	r8, r2, r1
 8003e4a:	4659      	mov	r1, fp
 8003e4c:	eb63 0901 	sbc.w	r9, r3, r1
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e64:	4690      	mov	r8, r2
 8003e66:	4699      	mov	r9, r3
 8003e68:	4623      	mov	r3, r4
 8003e6a:	eb18 0303 	adds.w	r3, r8, r3
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	462b      	mov	r3, r5
 8003e72:	eb49 0303 	adc.w	r3, r9, r3
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003e84:	4629      	mov	r1, r5
 8003e86:	024b      	lsls	r3, r1, #9
 8003e88:	4621      	mov	r1, r4
 8003e8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e8e:	4621      	mov	r1, r4
 8003e90:	024a      	lsls	r2, r1, #9
 8003e92:	4610      	mov	r0, r2
 8003e94:	4619      	mov	r1, r3
 8003e96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e9e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ea0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ea4:	f7fc fea0 	bl	8000be8 <__aeabi_uldivmod>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4613      	mov	r3, r2
 8003eae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003eb2:	e065      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0x420>
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	00f42400 	.word	0x00f42400
 8003ebc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec0:	4b3d      	ldr	r3, [pc, #244]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	099b      	lsrs	r3, r3, #6
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	4618      	mov	r0, r3
 8003eca:	4611      	mov	r1, r2
 8003ecc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ed0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ed6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003eda:	4642      	mov	r2, r8
 8003edc:	464b      	mov	r3, r9
 8003ede:	f04f 0000 	mov.w	r0, #0
 8003ee2:	f04f 0100 	mov.w	r1, #0
 8003ee6:	0159      	lsls	r1, r3, #5
 8003ee8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eec:	0150      	lsls	r0, r2, #5
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	1a51      	subs	r1, r2, r1
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	4649      	mov	r1, r9
 8003efa:	eb63 0301 	sbc.w	r3, r3, r1
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f0c:	4659      	mov	r1, fp
 8003f0e:	018b      	lsls	r3, r1, #6
 8003f10:	4651      	mov	r1, sl
 8003f12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f16:	4651      	mov	r1, sl
 8003f18:	018a      	lsls	r2, r1, #6
 8003f1a:	4651      	mov	r1, sl
 8003f1c:	1a54      	subs	r4, r2, r1
 8003f1e:	4659      	mov	r1, fp
 8003f20:	eb63 0501 	sbc.w	r5, r3, r1
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	00eb      	lsls	r3, r5, #3
 8003f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f32:	00e2      	lsls	r2, r4, #3
 8003f34:	4614      	mov	r4, r2
 8003f36:	461d      	mov	r5, r3
 8003f38:	4643      	mov	r3, r8
 8003f3a:	18e3      	adds	r3, r4, r3
 8003f3c:	603b      	str	r3, [r7, #0]
 8003f3e:	464b      	mov	r3, r9
 8003f40:	eb45 0303 	adc.w	r3, r5, r3
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f52:	4629      	mov	r1, r5
 8003f54:	028b      	lsls	r3, r1, #10
 8003f56:	4621      	mov	r1, r4
 8003f58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	028a      	lsls	r2, r1, #10
 8003f60:	4610      	mov	r0, r2
 8003f62:	4619      	mov	r1, r3
 8003f64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f68:	2200      	movs	r2, #0
 8003f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f6c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003f6e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f72:	f7fc fe39 	bl	8000be8 <__aeabi_uldivmod>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f80:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	0f1b      	lsrs	r3, r3, #28
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003f8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f9e:	e003      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fa0:	4b06      	ldr	r3, [pc, #24]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0x45c>)
 8003fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fa6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fa8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	37b8      	adds	r7, #184	@ 0xb8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	00f42400 	.word	0x00f42400

08003fc0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e28d      	b.n	80044ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 8083 	beq.w	80040e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003fe0:	4b94      	ldr	r3, [pc, #592]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 030c 	and.w	r3, r3, #12
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d019      	beq.n	8004020 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fec:	4b91      	ldr	r3, [pc, #580]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 030c 	and.w	r3, r3, #12
        || \
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d106      	bne.n	8004006 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ff8:	4b8e      	ldr	r3, [pc, #568]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004000:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004004:	d00c      	beq.n	8004020 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004006:	4b8b      	ldr	r3, [pc, #556]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800400e:	2b0c      	cmp	r3, #12
 8004010:	d112      	bne.n	8004038 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004012:	4b88      	ldr	r3, [pc, #544]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800401a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800401e:	d10b      	bne.n	8004038 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004020:	4b84      	ldr	r3, [pc, #528]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d05b      	beq.n	80040e4 <HAL_RCC_OscConfig+0x124>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d157      	bne.n	80040e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e25a      	b.n	80044ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004040:	d106      	bne.n	8004050 <HAL_RCC_OscConfig+0x90>
 8004042:	4b7c      	ldr	r3, [pc, #496]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a7b      	ldr	r2, [pc, #492]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	e01d      	b.n	800408c <HAL_RCC_OscConfig+0xcc>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004058:	d10c      	bne.n	8004074 <HAL_RCC_OscConfig+0xb4>
 800405a:	4b76      	ldr	r3, [pc, #472]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a75      	ldr	r2, [pc, #468]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	4b73      	ldr	r3, [pc, #460]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a72      	ldr	r2, [pc, #456]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 800406c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	e00b      	b.n	800408c <HAL_RCC_OscConfig+0xcc>
 8004074:	4b6f      	ldr	r3, [pc, #444]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a6e      	ldr	r2, [pc, #440]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 800407a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	4b6c      	ldr	r3, [pc, #432]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a6b      	ldr	r2, [pc, #428]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004086:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800408a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d013      	beq.n	80040bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fe fa8e 	bl	80025b4 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800409c:	f7fe fa8a 	bl	80025b4 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	@ 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e21f      	b.n	80044ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ae:	4b61      	ldr	r3, [pc, #388]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0xdc>
 80040ba:	e014      	b.n	80040e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fe fa7a 	bl	80025b4 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c4:	f7fe fa76 	bl	80025b4 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b64      	cmp	r3, #100	@ 0x64
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e20b      	b.n	80044ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d6:	4b57      	ldr	r3, [pc, #348]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x104>
 80040e2:	e000      	b.n	80040e6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d06f      	beq.n	80041d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80040f2:	4b50      	ldr	r3, [pc, #320]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d017      	beq.n	800412e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040fe:	4b4d      	ldr	r3, [pc, #308]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 030c 	and.w	r3, r3, #12
        || \
 8004106:	2b08      	cmp	r3, #8
 8004108:	d105      	bne.n	8004116 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800410a:	4b4a      	ldr	r3, [pc, #296]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004116:	4b47      	ldr	r3, [pc, #284]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800411e:	2b0c      	cmp	r3, #12
 8004120:	d11c      	bne.n	800415c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004122:	4b44      	ldr	r3, [pc, #272]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d116      	bne.n	800415c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412e:	4b41      	ldr	r3, [pc, #260]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <HAL_RCC_OscConfig+0x186>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d001      	beq.n	8004146 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e1d3      	b.n	80044ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004146:	4b3b      	ldr	r3, [pc, #236]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4937      	ldr	r1, [pc, #220]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004156:	4313      	orrs	r3, r2
 8004158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800415a:	e03a      	b.n	80041d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d020      	beq.n	80041a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004164:	4b34      	ldr	r3, [pc, #208]	@ (8004238 <HAL_RCC_OscConfig+0x278>)
 8004166:	2201      	movs	r2, #1
 8004168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7fe fa23 	bl	80025b4 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004172:	f7fe fa1f 	bl	80025b4 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e1b4      	b.n	80044ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004184:	4b2b      	ldr	r3, [pc, #172]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004190:	4b28      	ldr	r3, [pc, #160]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	4925      	ldr	r1, [pc, #148]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	600b      	str	r3, [r1, #0]
 80041a4:	e015      	b.n	80041d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041a6:	4b24      	ldr	r3, [pc, #144]	@ (8004238 <HAL_RCC_OscConfig+0x278>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fe fa02 	bl	80025b4 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b4:	f7fe f9fe 	bl	80025b4 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e193      	b.n	80044ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d036      	beq.n	800424c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d016      	beq.n	8004214 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041e6:	4b15      	ldr	r3, [pc, #84]	@ (800423c <HAL_RCC_OscConfig+0x27c>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ec:	f7fe f9e2 	bl	80025b4 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f4:	f7fe f9de 	bl	80025b4 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e173      	b.n	80044ee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004206:	4b0b      	ldr	r3, [pc, #44]	@ (8004234 <HAL_RCC_OscConfig+0x274>)
 8004208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x234>
 8004212:	e01b      	b.n	800424c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004214:	4b09      	ldr	r3, [pc, #36]	@ (800423c <HAL_RCC_OscConfig+0x27c>)
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421a:	f7fe f9cb 	bl	80025b4 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004220:	e00e      	b.n	8004240 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004222:	f7fe f9c7 	bl	80025b4 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d907      	bls.n	8004240 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e15c      	b.n	80044ee <HAL_RCC_OscConfig+0x52e>
 8004234:	40023800 	.word	0x40023800
 8004238:	42470000 	.word	0x42470000
 800423c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004240:	4b8a      	ldr	r3, [pc, #552]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 8004242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1ea      	bne.n	8004222 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 8097 	beq.w	8004388 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800425a:	2300      	movs	r3, #0
 800425c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800425e:	4b83      	ldr	r3, [pc, #524]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10f      	bne.n	800428a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	4b7f      	ldr	r3, [pc, #508]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004272:	4a7e      	ldr	r2, [pc, #504]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 8004274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004278:	6413      	str	r3, [r2, #64]	@ 0x40
 800427a:	4b7c      	ldr	r3, [pc, #496]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004286:	2301      	movs	r3, #1
 8004288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428a:	4b79      	ldr	r3, [pc, #484]	@ (8004470 <HAL_RCC_OscConfig+0x4b0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d118      	bne.n	80042c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004296:	4b76      	ldr	r3, [pc, #472]	@ (8004470 <HAL_RCC_OscConfig+0x4b0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a75      	ldr	r2, [pc, #468]	@ (8004470 <HAL_RCC_OscConfig+0x4b0>)
 800429c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a2:	f7fe f987 	bl	80025b4 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042aa:	f7fe f983 	bl	80025b4 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e118      	b.n	80044ee <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004470 <HAL_RCC_OscConfig+0x4b0>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f0      	beq.n	80042aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d106      	bne.n	80042de <HAL_RCC_OscConfig+0x31e>
 80042d0:	4b66      	ldr	r3, [pc, #408]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d4:	4a65      	ldr	r2, [pc, #404]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	6713      	str	r3, [r2, #112]	@ 0x70
 80042dc:	e01c      	b.n	8004318 <HAL_RCC_OscConfig+0x358>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b05      	cmp	r3, #5
 80042e4:	d10c      	bne.n	8004300 <HAL_RCC_OscConfig+0x340>
 80042e6:	4b61      	ldr	r3, [pc, #388]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ea:	4a60      	ldr	r2, [pc, #384]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 80042ec:	f043 0304 	orr.w	r3, r3, #4
 80042f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80042f2:	4b5e      	ldr	r3, [pc, #376]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f6:	4a5d      	ldr	r2, [pc, #372]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80042fe:	e00b      	b.n	8004318 <HAL_RCC_OscConfig+0x358>
 8004300:	4b5a      	ldr	r3, [pc, #360]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 8004302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004304:	4a59      	ldr	r2, [pc, #356]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 8004306:	f023 0301 	bic.w	r3, r3, #1
 800430a:	6713      	str	r3, [r2, #112]	@ 0x70
 800430c:	4b57      	ldr	r3, [pc, #348]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 800430e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004310:	4a56      	ldr	r2, [pc, #344]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 8004312:	f023 0304 	bic.w	r3, r3, #4
 8004316:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d015      	beq.n	800434c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004320:	f7fe f948 	bl	80025b4 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004326:	e00a      	b.n	800433e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004328:	f7fe f944 	bl	80025b4 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e0d7      	b.n	80044ee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433e:	4b4b      	ldr	r3, [pc, #300]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0ee      	beq.n	8004328 <HAL_RCC_OscConfig+0x368>
 800434a:	e014      	b.n	8004376 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434c:	f7fe f932 	bl	80025b4 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004352:	e00a      	b.n	800436a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004354:	f7fe f92e 	bl	80025b4 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e0c1      	b.n	80044ee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800436a:	4b40      	ldr	r3, [pc, #256]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1ee      	bne.n	8004354 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004376:	7dfb      	ldrb	r3, [r7, #23]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d105      	bne.n	8004388 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800437c:	4b3b      	ldr	r3, [pc, #236]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 800437e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004380:	4a3a      	ldr	r2, [pc, #232]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 8004382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004386:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80ad 	beq.w	80044ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004392:	4b36      	ldr	r3, [pc, #216]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b08      	cmp	r3, #8
 800439c:	d060      	beq.n	8004460 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d145      	bne.n	8004432 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a6:	4b33      	ldr	r3, [pc, #204]	@ (8004474 <HAL_RCC_OscConfig+0x4b4>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ac:	f7fe f902 	bl	80025b4 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b4:	f7fe f8fe 	bl	80025b4 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e093      	b.n	80044ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c6:	4b29      	ldr	r3, [pc, #164]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69da      	ldr	r2, [r3, #28]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	019b      	lsls	r3, r3, #6
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e8:	085b      	lsrs	r3, r3, #1
 80043ea:	3b01      	subs	r3, #1
 80043ec:	041b      	lsls	r3, r3, #16
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fc:	071b      	lsls	r3, r3, #28
 80043fe:	491b      	ldr	r1, [pc, #108]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 8004400:	4313      	orrs	r3, r2
 8004402:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004404:	4b1b      	ldr	r3, [pc, #108]	@ (8004474 <HAL_RCC_OscConfig+0x4b4>)
 8004406:	2201      	movs	r2, #1
 8004408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440a:	f7fe f8d3 	bl	80025b4 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004412:	f7fe f8cf 	bl	80025b4 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e064      	b.n	80044ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004424:	4b11      	ldr	r3, [pc, #68]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <HAL_RCC_OscConfig+0x452>
 8004430:	e05c      	b.n	80044ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004432:	4b10      	ldr	r3, [pc, #64]	@ (8004474 <HAL_RCC_OscConfig+0x4b4>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fe f8bc 	bl	80025b4 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004440:	f7fe f8b8 	bl	80025b4 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e04d      	b.n	80044ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004452:	4b06      	ldr	r3, [pc, #24]	@ (800446c <HAL_RCC_OscConfig+0x4ac>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x480>
 800445e:	e045      	b.n	80044ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d107      	bne.n	8004478 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e040      	b.n	80044ee <HAL_RCC_OscConfig+0x52e>
 800446c:	40023800 	.word	0x40023800
 8004470:	40007000 	.word	0x40007000
 8004474:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004478:	4b1f      	ldr	r3, [pc, #124]	@ (80044f8 <HAL_RCC_OscConfig+0x538>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d030      	beq.n	80044e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d129      	bne.n	80044e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449e:	429a      	cmp	r2, r3
 80044a0:	d122      	bne.n	80044e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044a8:	4013      	ands	r3, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d119      	bne.n	80044e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044be:	085b      	lsrs	r3, r3, #1
 80044c0:	3b01      	subs	r3, #1
 80044c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d10f      	bne.n	80044e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d107      	bne.n	80044e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d001      	beq.n	80044ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40023800 	.word	0x40023800

080044fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e041      	b.n	8004592 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fd fd5c 	bl	8001fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3304      	adds	r3, #4
 8004538:	4619      	mov	r1, r3
 800453a:	4610      	mov	r0, r2
 800453c:	f000 fc96 	bl	8004e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e041      	b.n	8004630 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d106      	bne.n	80045c6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f839 	bl	8004638 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2202      	movs	r2, #2
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3304      	adds	r3, #4
 80045d6:	4619      	mov	r1, r3
 80045d8:	4610      	mov	r0, r2
 80045da:	f000 fc47 	bl	8004e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d109      	bne.n	8004674 <HAL_TIM_OC_Start_IT+0x28>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	bf14      	ite	ne
 800466c:	2301      	movne	r3, #1
 800466e:	2300      	moveq	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	e022      	b.n	80046ba <HAL_TIM_OC_Start_IT+0x6e>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b04      	cmp	r3, #4
 8004678:	d109      	bne.n	800468e <HAL_TIM_OC_Start_IT+0x42>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b01      	cmp	r3, #1
 8004684:	bf14      	ite	ne
 8004686:	2301      	movne	r3, #1
 8004688:	2300      	moveq	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	e015      	b.n	80046ba <HAL_TIM_OC_Start_IT+0x6e>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d109      	bne.n	80046a8 <HAL_TIM_OC_Start_IT+0x5c>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b01      	cmp	r3, #1
 800469e:	bf14      	ite	ne
 80046a0:	2301      	movne	r3, #1
 80046a2:	2300      	moveq	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	e008      	b.n	80046ba <HAL_TIM_OC_Start_IT+0x6e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	bf14      	ite	ne
 80046b4:	2301      	movne	r3, #1
 80046b6:	2300      	moveq	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e0c7      	b.n	8004852 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d104      	bne.n	80046d2 <HAL_TIM_OC_Start_IT+0x86>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046d0:	e013      	b.n	80046fa <HAL_TIM_OC_Start_IT+0xae>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d104      	bne.n	80046e2 <HAL_TIM_OC_Start_IT+0x96>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046e0:	e00b      	b.n	80046fa <HAL_TIM_OC_Start_IT+0xae>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d104      	bne.n	80046f2 <HAL_TIM_OC_Start_IT+0xa6>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046f0:	e003      	b.n	80046fa <HAL_TIM_OC_Start_IT+0xae>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2202      	movs	r2, #2
 80046f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b0c      	cmp	r3, #12
 80046fe:	d841      	bhi.n	8004784 <HAL_TIM_OC_Start_IT+0x138>
 8004700:	a201      	add	r2, pc, #4	@ (adr r2, 8004708 <HAL_TIM_OC_Start_IT+0xbc>)
 8004702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004706:	bf00      	nop
 8004708:	0800473d 	.word	0x0800473d
 800470c:	08004785 	.word	0x08004785
 8004710:	08004785 	.word	0x08004785
 8004714:	08004785 	.word	0x08004785
 8004718:	0800474f 	.word	0x0800474f
 800471c:	08004785 	.word	0x08004785
 8004720:	08004785 	.word	0x08004785
 8004724:	08004785 	.word	0x08004785
 8004728:	08004761 	.word	0x08004761
 800472c:	08004785 	.word	0x08004785
 8004730:	08004785 	.word	0x08004785
 8004734:	08004785 	.word	0x08004785
 8004738:	08004773 	.word	0x08004773
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0202 	orr.w	r2, r2, #2
 800474a:	60da      	str	r2, [r3, #12]
      break;
 800474c:	e01d      	b.n	800478a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0204 	orr.w	r2, r2, #4
 800475c:	60da      	str	r2, [r3, #12]
      break;
 800475e:	e014      	b.n	800478a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0208 	orr.w	r2, r2, #8
 800476e:	60da      	str	r2, [r3, #12]
      break;
 8004770:	e00b      	b.n	800478a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0210 	orr.w	r2, r2, #16
 8004780:	60da      	str	r2, [r3, #12]
      break;
 8004782:	e002      	b.n	800478a <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
      break;
 8004788:	bf00      	nop
  }

  if (status == HAL_OK)
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d15f      	bne.n	8004850 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2201      	movs	r2, #1
 8004796:	6839      	ldr	r1, [r7, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fe5d 	bl	8005458 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a2e      	ldr	r2, [pc, #184]	@ (800485c <HAL_TIM_OC_Start_IT+0x210>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d004      	beq.n	80047b2 <HAL_TIM_OC_Start_IT+0x166>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004860 <HAL_TIM_OC_Start_IT+0x214>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d101      	bne.n	80047b6 <HAL_TIM_OC_Start_IT+0x16a>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <HAL_TIM_OC_Start_IT+0x16c>
 80047b6:	2300      	movs	r3, #0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d007      	beq.n	80047cc <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a22      	ldr	r2, [pc, #136]	@ (800485c <HAL_TIM_OC_Start_IT+0x210>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d022      	beq.n	800481c <HAL_TIM_OC_Start_IT+0x1d0>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047de:	d01d      	beq.n	800481c <HAL_TIM_OC_Start_IT+0x1d0>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004864 <HAL_TIM_OC_Start_IT+0x218>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d018      	beq.n	800481c <HAL_TIM_OC_Start_IT+0x1d0>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004868 <HAL_TIM_OC_Start_IT+0x21c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d013      	beq.n	800481c <HAL_TIM_OC_Start_IT+0x1d0>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a1c      	ldr	r2, [pc, #112]	@ (800486c <HAL_TIM_OC_Start_IT+0x220>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00e      	beq.n	800481c <HAL_TIM_OC_Start_IT+0x1d0>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a17      	ldr	r2, [pc, #92]	@ (8004860 <HAL_TIM_OC_Start_IT+0x214>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d009      	beq.n	800481c <HAL_TIM_OC_Start_IT+0x1d0>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a18      	ldr	r2, [pc, #96]	@ (8004870 <HAL_TIM_OC_Start_IT+0x224>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d004      	beq.n	800481c <HAL_TIM_OC_Start_IT+0x1d0>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a17      	ldr	r2, [pc, #92]	@ (8004874 <HAL_TIM_OC_Start_IT+0x228>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d111      	bne.n	8004840 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b06      	cmp	r3, #6
 800482c:	d010      	beq.n	8004850 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0201 	orr.w	r2, r2, #1
 800483c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483e:	e007      	b.n	8004850 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004850:	7bfb      	ldrb	r3, [r7, #15]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40010000 	.word	0x40010000
 8004860:	40010400 	.word	0x40010400
 8004864:	40000400 	.word	0x40000400
 8004868:	40000800 	.word	0x40000800
 800486c:	40000c00 	.word	0x40000c00
 8004870:	40014000 	.word	0x40014000
 8004874:	40001800 	.word	0x40001800

08004878 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b0c      	cmp	r3, #12
 800488a:	d841      	bhi.n	8004910 <HAL_TIM_OC_Stop_IT+0x98>
 800488c:	a201      	add	r2, pc, #4	@ (adr r2, 8004894 <HAL_TIM_OC_Stop_IT+0x1c>)
 800488e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004892:	bf00      	nop
 8004894:	080048c9 	.word	0x080048c9
 8004898:	08004911 	.word	0x08004911
 800489c:	08004911 	.word	0x08004911
 80048a0:	08004911 	.word	0x08004911
 80048a4:	080048db 	.word	0x080048db
 80048a8:	08004911 	.word	0x08004911
 80048ac:	08004911 	.word	0x08004911
 80048b0:	08004911 	.word	0x08004911
 80048b4:	080048ed 	.word	0x080048ed
 80048b8:	08004911 	.word	0x08004911
 80048bc:	08004911 	.word	0x08004911
 80048c0:	08004911 	.word	0x08004911
 80048c4:	080048ff 	.word	0x080048ff
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0202 	bic.w	r2, r2, #2
 80048d6:	60da      	str	r2, [r3, #12]
      break;
 80048d8:	e01d      	b.n	8004916 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0204 	bic.w	r2, r2, #4
 80048e8:	60da      	str	r2, [r3, #12]
      break;
 80048ea:	e014      	b.n	8004916 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0208 	bic.w	r2, r2, #8
 80048fa:	60da      	str	r2, [r3, #12]
      break;
 80048fc:	e00b      	b.n	8004916 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0210 	bic.w	r2, r2, #16
 800490c:	60da      	str	r2, [r3, #12]
      break;
 800490e:	e002      	b.n	8004916 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
      break;
 8004914:	bf00      	nop
  }

  if (status == HAL_OK)
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d161      	bne.n	80049e0 <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2200      	movs	r2, #0
 8004922:	6839      	ldr	r1, [r7, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fd97 	bl	8005458 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a2f      	ldr	r2, [pc, #188]	@ (80049ec <HAL_TIM_OC_Stop_IT+0x174>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d004      	beq.n	800493e <HAL_TIM_OC_Stop_IT+0xc6>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a2d      	ldr	r2, [pc, #180]	@ (80049f0 <HAL_TIM_OC_Stop_IT+0x178>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d101      	bne.n	8004942 <HAL_TIM_OC_Stop_IT+0xca>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <HAL_TIM_OC_Stop_IT+0xcc>
 8004942:	2300      	movs	r3, #0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d017      	beq.n	8004978 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6a1a      	ldr	r2, [r3, #32]
 800494e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10f      	bne.n	8004978 <HAL_TIM_OC_Stop_IT+0x100>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6a1a      	ldr	r2, [r3, #32]
 800495e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004962:	4013      	ands	r3, r2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d107      	bne.n	8004978 <HAL_TIM_OC_Stop_IT+0x100>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004976:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6a1a      	ldr	r2, [r3, #32]
 800497e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004982:	4013      	ands	r3, r2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10f      	bne.n	80049a8 <HAL_TIM_OC_Stop_IT+0x130>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6a1a      	ldr	r2, [r3, #32]
 800498e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004992:	4013      	ands	r3, r2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d107      	bne.n	80049a8 <HAL_TIM_OC_Stop_IT+0x130>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0201 	bic.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d104      	bne.n	80049b8 <HAL_TIM_OC_Stop_IT+0x140>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049b6:	e013      	b.n	80049e0 <HAL_TIM_OC_Stop_IT+0x168>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d104      	bne.n	80049c8 <HAL_TIM_OC_Stop_IT+0x150>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049c6:	e00b      	b.n	80049e0 <HAL_TIM_OC_Stop_IT+0x168>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d104      	bne.n	80049d8 <HAL_TIM_OC_Stop_IT+0x160>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049d6:	e003      	b.n	80049e0 <HAL_TIM_OC_Stop_IT+0x168>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40010000 	.word	0x40010000
 80049f0:	40010400 	.word	0x40010400

080049f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d020      	beq.n	8004a58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01b      	beq.n	8004a58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0202 	mvn.w	r2, #2
 8004a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f9f5 	bl	8004e2e <HAL_TIM_IC_CaptureCallback>
 8004a44:	e005      	b.n	8004a52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fc fb5d 	bl	8001106 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f9f8 	bl	8004e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d020      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01b      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0204 	mvn.w	r2, #4
 8004a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f9cf 	bl	8004e2e <HAL_TIM_IC_CaptureCallback>
 8004a90:	e005      	b.n	8004a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fc fb37 	bl	8001106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f9d2 	bl	8004e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d020      	beq.n	8004af0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f003 0308 	and.w	r3, r3, #8
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01b      	beq.n	8004af0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0208 	mvn.w	r2, #8
 8004ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f9a9 	bl	8004e2e <HAL_TIM_IC_CaptureCallback>
 8004adc:	e005      	b.n	8004aea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fc fb11 	bl	8001106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f9ac 	bl	8004e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f003 0310 	and.w	r3, r3, #16
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d020      	beq.n	8004b3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01b      	beq.n	8004b3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0210 	mvn.w	r2, #16
 8004b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2208      	movs	r2, #8
 8004b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f983 	bl	8004e2e <HAL_TIM_IC_CaptureCallback>
 8004b28:	e005      	b.n	8004b36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fc faeb 	bl	8001106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f986 	bl	8004e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00c      	beq.n	8004b60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d007      	beq.n	8004b60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0201 	mvn.w	r2, #1
 8004b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f95d 	bl	8004e1a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00c      	beq.n	8004b84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d007      	beq.n	8004b84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fd16 	bl	80055b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00c      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d007      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f957 	bl	8004e56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00c      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0220 	mvn.w	r2, #32
 8004bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fce8 	bl	800559c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e048      	b.n	8004c84 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b0c      	cmp	r3, #12
 8004bfe:	d839      	bhi.n	8004c74 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004c00:	a201      	add	r2, pc, #4	@ (adr r2, 8004c08 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c06:	bf00      	nop
 8004c08:	08004c3d 	.word	0x08004c3d
 8004c0c:	08004c75 	.word	0x08004c75
 8004c10:	08004c75 	.word	0x08004c75
 8004c14:	08004c75 	.word	0x08004c75
 8004c18:	08004c4b 	.word	0x08004c4b
 8004c1c:	08004c75 	.word	0x08004c75
 8004c20:	08004c75 	.word	0x08004c75
 8004c24:	08004c75 	.word	0x08004c75
 8004c28:	08004c59 	.word	0x08004c59
 8004c2c:	08004c75 	.word	0x08004c75
 8004c30:	08004c75 	.word	0x08004c75
 8004c34:	08004c75 	.word	0x08004c75
 8004c38:	08004c67 	.word	0x08004c67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 f9be 	bl	8004fc4 <TIM_OC1_SetConfig>
      break;
 8004c48:	e017      	b.n	8004c7a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fa27 	bl	80050a4 <TIM_OC2_SetConfig>
      break;
 8004c56:	e010      	b.n	8004c7a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68b9      	ldr	r1, [r7, #8]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fa96 	bl	8005190 <TIM_OC3_SetConfig>
      break;
 8004c64:	e009      	b.n	8004c7a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fb03 	bl	8005278 <TIM_OC4_SetConfig>
      break;
 8004c72:	e002      	b.n	8004c7a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	75fb      	strb	r3, [r7, #23]
      break;
 8004c78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e0b4      	b.n	8004e12 <HAL_TIM_ConfigClockSource+0x186>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce0:	d03e      	beq.n	8004d60 <HAL_TIM_ConfigClockSource+0xd4>
 8004ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce6:	f200 8087 	bhi.w	8004df8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cee:	f000 8086 	beq.w	8004dfe <HAL_TIM_ConfigClockSource+0x172>
 8004cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf6:	d87f      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf8:	2b70      	cmp	r3, #112	@ 0x70
 8004cfa:	d01a      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0xa6>
 8004cfc:	2b70      	cmp	r3, #112	@ 0x70
 8004cfe:	d87b      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d00:	2b60      	cmp	r3, #96	@ 0x60
 8004d02:	d050      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x11a>
 8004d04:	2b60      	cmp	r3, #96	@ 0x60
 8004d06:	d877      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d08:	2b50      	cmp	r3, #80	@ 0x50
 8004d0a:	d03c      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0xfa>
 8004d0c:	2b50      	cmp	r3, #80	@ 0x50
 8004d0e:	d873      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d10:	2b40      	cmp	r3, #64	@ 0x40
 8004d12:	d058      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x13a>
 8004d14:	2b40      	cmp	r3, #64	@ 0x40
 8004d16:	d86f      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d18:	2b30      	cmp	r3, #48	@ 0x30
 8004d1a:	d064      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d1c:	2b30      	cmp	r3, #48	@ 0x30
 8004d1e:	d86b      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	d060      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d867      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d05c      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d2c:	2b10      	cmp	r3, #16
 8004d2e:	d05a      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d30:	e062      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d42:	f000 fb69 	bl	8005418 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	609a      	str	r2, [r3, #8]
      break;
 8004d5e:	e04f      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d70:	f000 fb52 	bl	8005418 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d82:	609a      	str	r2, [r3, #8]
      break;
 8004d84:	e03c      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d92:	461a      	mov	r2, r3
 8004d94:	f000 fac6 	bl	8005324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2150      	movs	r1, #80	@ 0x50
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fb1f 	bl	80053e2 <TIM_ITRx_SetConfig>
      break;
 8004da4:	e02c      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004db2:	461a      	mov	r2, r3
 8004db4:	f000 fae5 	bl	8005382 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2160      	movs	r1, #96	@ 0x60
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fb0f 	bl	80053e2 <TIM_ITRx_SetConfig>
      break;
 8004dc4:	e01c      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f000 faa6 	bl	8005324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2140      	movs	r1, #64	@ 0x40
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 faff 	bl	80053e2 <TIM_ITRx_SetConfig>
      break;
 8004de4:	e00c      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4619      	mov	r1, r3
 8004df0:	4610      	mov	r0, r2
 8004df2:	f000 faf6 	bl	80053e2 <TIM_ITRx_SetConfig>
      break;
 8004df6:	e003      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004dfc:	e000      	b.n	8004e00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
	...

08004e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a46      	ldr	r2, [pc, #280]	@ (8004f98 <TIM_Base_SetConfig+0x12c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d013      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e8a:	d00f      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a43      	ldr	r2, [pc, #268]	@ (8004f9c <TIM_Base_SetConfig+0x130>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00b      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a42      	ldr	r2, [pc, #264]	@ (8004fa0 <TIM_Base_SetConfig+0x134>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d007      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a41      	ldr	r2, [pc, #260]	@ (8004fa4 <TIM_Base_SetConfig+0x138>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d003      	beq.n	8004eac <TIM_Base_SetConfig+0x40>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a40      	ldr	r2, [pc, #256]	@ (8004fa8 <TIM_Base_SetConfig+0x13c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d108      	bne.n	8004ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a35      	ldr	r2, [pc, #212]	@ (8004f98 <TIM_Base_SetConfig+0x12c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d02b      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ecc:	d027      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a32      	ldr	r2, [pc, #200]	@ (8004f9c <TIM_Base_SetConfig+0x130>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d023      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a31      	ldr	r2, [pc, #196]	@ (8004fa0 <TIM_Base_SetConfig+0x134>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d01f      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a30      	ldr	r2, [pc, #192]	@ (8004fa4 <TIM_Base_SetConfig+0x138>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d01b      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8004fa8 <TIM_Base_SetConfig+0x13c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d017      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8004fac <TIM_Base_SetConfig+0x140>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d013      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8004fb0 <TIM_Base_SetConfig+0x144>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00f      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a2c      	ldr	r2, [pc, #176]	@ (8004fb4 <TIM_Base_SetConfig+0x148>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00b      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a2b      	ldr	r2, [pc, #172]	@ (8004fb8 <TIM_Base_SetConfig+0x14c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d007      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a2a      	ldr	r2, [pc, #168]	@ (8004fbc <TIM_Base_SetConfig+0x150>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d003      	beq.n	8004f1e <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a29      	ldr	r2, [pc, #164]	@ (8004fc0 <TIM_Base_SetConfig+0x154>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d108      	bne.n	8004f30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a10      	ldr	r2, [pc, #64]	@ (8004f98 <TIM_Base_SetConfig+0x12c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d003      	beq.n	8004f64 <TIM_Base_SetConfig+0xf8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a12      	ldr	r2, [pc, #72]	@ (8004fa8 <TIM_Base_SetConfig+0x13c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d103      	bne.n	8004f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d105      	bne.n	8004f8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f023 0201 	bic.w	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	611a      	str	r2, [r3, #16]
  }
}
 8004f8a:	bf00      	nop
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40010000 	.word	0x40010000
 8004f9c:	40000400 	.word	0x40000400
 8004fa0:	40000800 	.word	0x40000800
 8004fa4:	40000c00 	.word	0x40000c00
 8004fa8:	40010400 	.word	0x40010400
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40014400 	.word	0x40014400
 8004fb4:	40014800 	.word	0x40014800
 8004fb8:	40001800 	.word	0x40001800
 8004fbc:	40001c00 	.word	0x40001c00
 8004fc0:	40002000 	.word	0x40002000

08004fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	f023 0201 	bic.w	r2, r3, #1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f023 0302 	bic.w	r3, r3, #2
 800500c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a20      	ldr	r2, [pc, #128]	@ (800509c <TIM_OC1_SetConfig+0xd8>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_OC1_SetConfig+0x64>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a1f      	ldr	r2, [pc, #124]	@ (80050a0 <TIM_OC1_SetConfig+0xdc>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d10c      	bne.n	8005042 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f023 0308 	bic.w	r3, r3, #8
 800502e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f023 0304 	bic.w	r3, r3, #4
 8005040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a15      	ldr	r2, [pc, #84]	@ (800509c <TIM_OC1_SetConfig+0xd8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d003      	beq.n	8005052 <TIM_OC1_SetConfig+0x8e>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a14      	ldr	r2, [pc, #80]	@ (80050a0 <TIM_OC1_SetConfig+0xdc>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d111      	bne.n	8005076 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	621a      	str	r2, [r3, #32]
}
 8005090:	bf00      	nop
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	40010000 	.word	0x40010000
 80050a0:	40010400 	.word	0x40010400

080050a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	f023 0210 	bic.w	r2, r3, #16
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f023 0320 	bic.w	r3, r3, #32
 80050ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a22      	ldr	r2, [pc, #136]	@ (8005188 <TIM_OC2_SetConfig+0xe4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d003      	beq.n	800510c <TIM_OC2_SetConfig+0x68>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a21      	ldr	r2, [pc, #132]	@ (800518c <TIM_OC2_SetConfig+0xe8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d10d      	bne.n	8005128 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005126:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a17      	ldr	r2, [pc, #92]	@ (8005188 <TIM_OC2_SetConfig+0xe4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_OC2_SetConfig+0x94>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a16      	ldr	r2, [pc, #88]	@ (800518c <TIM_OC2_SetConfig+0xe8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d113      	bne.n	8005160 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800513e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	621a      	str	r2, [r3, #32]
}
 800517a:	bf00      	nop
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40010000 	.word	0x40010000
 800518c:	40010400 	.word	0x40010400

08005190 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0303 	bic.w	r3, r3, #3
 80051c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a21      	ldr	r2, [pc, #132]	@ (8005270 <TIM_OC3_SetConfig+0xe0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d003      	beq.n	80051f6 <TIM_OC3_SetConfig+0x66>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a20      	ldr	r2, [pc, #128]	@ (8005274 <TIM_OC3_SetConfig+0xe4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d10d      	bne.n	8005212 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a16      	ldr	r2, [pc, #88]	@ (8005270 <TIM_OC3_SetConfig+0xe0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d003      	beq.n	8005222 <TIM_OC3_SetConfig+0x92>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a15      	ldr	r2, [pc, #84]	@ (8005274 <TIM_OC3_SetConfig+0xe4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d113      	bne.n	800524a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	621a      	str	r2, [r3, #32]
}
 8005264:	bf00      	nop
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	40010000 	.word	0x40010000
 8005274:	40010400 	.word	0x40010400

08005278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	031b      	lsls	r3, r3, #12
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a12      	ldr	r2, [pc, #72]	@ (800531c <TIM_OC4_SetConfig+0xa4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <TIM_OC4_SetConfig+0x68>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a11      	ldr	r2, [pc, #68]	@ (8005320 <TIM_OC4_SetConfig+0xa8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d109      	bne.n	80052f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	019b      	lsls	r3, r3, #6
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40010000 	.word	0x40010000
 8005320:	40010400 	.word	0x40010400

08005324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f023 0201 	bic.w	r2, r3, #1
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800534e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f023 030a 	bic.w	r3, r3, #10
 8005360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	621a      	str	r2, [r3, #32]
}
 8005376:	bf00      	nop
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005382:	b480      	push	{r7}
 8005384:	b087      	sub	sp, #28
 8005386:	af00      	add	r7, sp, #0
 8005388:	60f8      	str	r0, [r7, #12]
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	f023 0210 	bic.w	r2, r3, #16
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	031b      	lsls	r3, r3, #12
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	621a      	str	r2, [r3, #32]
}
 80053d6:	bf00      	nop
 80053d8:	371c      	adds	r7, #28
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	f043 0307 	orr.w	r3, r3, #7
 8005404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	609a      	str	r2, [r3, #8]
}
 800540c:	bf00      	nop
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005432:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	021a      	lsls	r2, r3, #8
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	431a      	orrs	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4313      	orrs	r3, r2
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	609a      	str	r2, [r3, #8]
}
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f003 031f 	and.w	r3, r3, #31
 800546a:	2201      	movs	r2, #1
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a1a      	ldr	r2, [r3, #32]
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	43db      	mvns	r3, r3
 800547a:	401a      	ands	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a1a      	ldr	r2, [r3, #32]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f003 031f 	and.w	r3, r3, #31
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	fa01 f303 	lsl.w	r3, r1, r3
 8005490:	431a      	orrs	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	621a      	str	r2, [r3, #32]
}
 8005496:	bf00      	nop
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e05a      	b.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a21      	ldr	r2, [pc, #132]	@ (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d022      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005508:	d01d      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1d      	ldr	r2, [pc, #116]	@ (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d018      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1b      	ldr	r2, [pc, #108]	@ (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d013      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1a      	ldr	r2, [pc, #104]	@ (800558c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00e      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a18      	ldr	r2, [pc, #96]	@ (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d009      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a17      	ldr	r2, [pc, #92]	@ (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d004      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a15      	ldr	r2, [pc, #84]	@ (8005598 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d10c      	bne.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800554c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	4313      	orrs	r3, r2
 8005556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40010000 	.word	0x40010000
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800
 800558c:	40000c00 	.word	0x40000c00
 8005590:	40010400 	.word	0x40010400
 8005594:	40014000 	.word	0x40014000
 8005598:	40001800 	.word	0x40001800

0800559c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e042      	b.n	800565c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7fc fd1e 	bl	800202c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2224      	movs	r2, #36	@ 0x24
 80055f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005606:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f973 	bl	80058f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800561c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695a      	ldr	r2, [r3, #20]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800562c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800563c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08a      	sub	sp, #40	@ 0x28
 8005668:	af02      	add	r7, sp, #8
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	4613      	mov	r3, r2
 8005672:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b20      	cmp	r3, #32
 8005682:	d175      	bne.n	8005770 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <HAL_UART_Transmit+0x2c>
 800568a:	88fb      	ldrh	r3, [r7, #6]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e06e      	b.n	8005772 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2221      	movs	r2, #33	@ 0x21
 800569e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056a2:	f7fc ff87 	bl	80025b4 <HAL_GetTick>
 80056a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	88fa      	ldrh	r2, [r7, #6]
 80056ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	88fa      	ldrh	r2, [r7, #6]
 80056b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056bc:	d108      	bne.n	80056d0 <HAL_UART_Transmit+0x6c>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d104      	bne.n	80056d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	61bb      	str	r3, [r7, #24]
 80056ce:	e003      	b.n	80056d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056d4:	2300      	movs	r3, #0
 80056d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056d8:	e02e      	b.n	8005738 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2200      	movs	r2, #0
 80056e2:	2180      	movs	r1, #128	@ 0x80
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 f848 	bl	800577a <UART_WaitOnFlagUntilTimeout>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e03a      	b.n	8005772 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10b      	bne.n	800571a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005710:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	3302      	adds	r3, #2
 8005716:	61bb      	str	r3, [r7, #24]
 8005718:	e007      	b.n	800572a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	781a      	ldrb	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	3301      	adds	r3, #1
 8005728:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800572e:	b29b      	uxth	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	b29a      	uxth	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1cb      	bne.n	80056da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2200      	movs	r2, #0
 800574a:	2140      	movs	r1, #64	@ 0x40
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 f814 	bl	800577a <UART_WaitOnFlagUntilTimeout>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e006      	b.n	8005772 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	e000      	b.n	8005772 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005770:	2302      	movs	r3, #2
  }
}
 8005772:	4618      	mov	r0, r3
 8005774:	3720      	adds	r7, #32
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b086      	sub	sp, #24
 800577e:	af00      	add	r7, sp, #0
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	603b      	str	r3, [r7, #0]
 8005786:	4613      	mov	r3, r2
 8005788:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578a:	e03b      	b.n	8005804 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d037      	beq.n	8005804 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005794:	f7fc ff0e 	bl	80025b4 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	6a3a      	ldr	r2, [r7, #32]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d302      	bcc.n	80057aa <UART_WaitOnFlagUntilTimeout+0x30>
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e03a      	b.n	8005824 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d023      	beq.n	8005804 <UART_WaitOnFlagUntilTimeout+0x8a>
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b80      	cmp	r3, #128	@ 0x80
 80057c0:	d020      	beq.n	8005804 <UART_WaitOnFlagUntilTimeout+0x8a>
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b40      	cmp	r3, #64	@ 0x40
 80057c6:	d01d      	beq.n	8005804 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d116      	bne.n	8005804 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 f81d 	bl	800582c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2208      	movs	r2, #8
 80057f6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e00f      	b.n	8005824 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	4013      	ands	r3, r2
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	429a      	cmp	r2, r3
 8005812:	bf0c      	ite	eq
 8005814:	2301      	moveq	r3, #1
 8005816:	2300      	movne	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	79fb      	ldrb	r3, [r7, #7]
 800581e:	429a      	cmp	r2, r3
 8005820:	d0b4      	beq.n	800578c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b095      	sub	sp, #84	@ 0x54
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005846:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800584a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	330c      	adds	r3, #12
 8005852:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005854:	643a      	str	r2, [r7, #64]	@ 0x40
 8005856:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800585a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e5      	bne.n	8005834 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3314      	adds	r3, #20
 800586e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	e853 3f00 	ldrex	r3, [r3]
 8005876:	61fb      	str	r3, [r7, #28]
   return(result);
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	f023 0301 	bic.w	r3, r3, #1
 800587e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3314      	adds	r3, #20
 8005886:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005888:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800588a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800588e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e5      	bne.n	8005868 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d119      	bne.n	80058d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	e853 3f00 	ldrex	r3, [r3]
 80058b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f023 0310 	bic.w	r3, r3, #16
 80058ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	330c      	adds	r3, #12
 80058c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058c4:	61ba      	str	r2, [r7, #24]
 80058c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c8:	6979      	ldr	r1, [r7, #20]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	e841 2300 	strex	r3, r2, [r1]
 80058d0:	613b      	str	r3, [r7, #16]
   return(result);
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1e5      	bne.n	80058a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058e6:	bf00      	nop
 80058e8:	3754      	adds	r7, #84	@ 0x54
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
	...

080058f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058f8:	b0c0      	sub	sp, #256	@ 0x100
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005910:	68d9      	ldr	r1, [r3, #12]
 8005912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	ea40 0301 	orr.w	r3, r0, r1
 800591c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	431a      	orrs	r2, r3
 800592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	431a      	orrs	r2, r3
 8005934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	4313      	orrs	r3, r2
 800593c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800594c:	f021 010c 	bic.w	r1, r1, #12
 8005950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800595a:	430b      	orrs	r3, r1
 800595c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800595e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800596a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800596e:	6999      	ldr	r1, [r3, #24]
 8005970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	ea40 0301 	orr.w	r3, r0, r1
 800597a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4b8f      	ldr	r3, [pc, #572]	@ (8005bc0 <UART_SetConfig+0x2cc>)
 8005984:	429a      	cmp	r2, r3
 8005986:	d005      	beq.n	8005994 <UART_SetConfig+0xa0>
 8005988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	4b8d      	ldr	r3, [pc, #564]	@ (8005bc4 <UART_SetConfig+0x2d0>)
 8005990:	429a      	cmp	r2, r3
 8005992:	d104      	bne.n	800599e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005994:	f7fe f8d0 	bl	8003b38 <HAL_RCC_GetPCLK2Freq>
 8005998:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800599c:	e003      	b.n	80059a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800599e:	f7fe f8b7 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 80059a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059b0:	f040 810c 	bne.w	8005bcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059b8:	2200      	movs	r2, #0
 80059ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80059c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80059c6:	4622      	mov	r2, r4
 80059c8:	462b      	mov	r3, r5
 80059ca:	1891      	adds	r1, r2, r2
 80059cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059ce:	415b      	adcs	r3, r3
 80059d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059d6:	4621      	mov	r1, r4
 80059d8:	eb12 0801 	adds.w	r8, r2, r1
 80059dc:	4629      	mov	r1, r5
 80059de:	eb43 0901 	adc.w	r9, r3, r1
 80059e2:	f04f 0200 	mov.w	r2, #0
 80059e6:	f04f 0300 	mov.w	r3, #0
 80059ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059f6:	4690      	mov	r8, r2
 80059f8:	4699      	mov	r9, r3
 80059fa:	4623      	mov	r3, r4
 80059fc:	eb18 0303 	adds.w	r3, r8, r3
 8005a00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a04:	462b      	mov	r3, r5
 8005a06:	eb49 0303 	adc.w	r3, r9, r3
 8005a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a22:	460b      	mov	r3, r1
 8005a24:	18db      	adds	r3, r3, r3
 8005a26:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a28:	4613      	mov	r3, r2
 8005a2a:	eb42 0303 	adc.w	r3, r2, r3
 8005a2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a38:	f7fb f8d6 	bl	8000be8 <__aeabi_uldivmod>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4b61      	ldr	r3, [pc, #388]	@ (8005bc8 <UART_SetConfig+0x2d4>)
 8005a42:	fba3 2302 	umull	r2, r3, r3, r2
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	011c      	lsls	r4, r3, #4
 8005a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a5c:	4642      	mov	r2, r8
 8005a5e:	464b      	mov	r3, r9
 8005a60:	1891      	adds	r1, r2, r2
 8005a62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a64:	415b      	adcs	r3, r3
 8005a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a6c:	4641      	mov	r1, r8
 8005a6e:	eb12 0a01 	adds.w	sl, r2, r1
 8005a72:	4649      	mov	r1, r9
 8005a74:	eb43 0b01 	adc.w	fp, r3, r1
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a8c:	4692      	mov	sl, r2
 8005a8e:	469b      	mov	fp, r3
 8005a90:	4643      	mov	r3, r8
 8005a92:	eb1a 0303 	adds.w	r3, sl, r3
 8005a96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a9a:	464b      	mov	r3, r9
 8005a9c:	eb4b 0303 	adc.w	r3, fp, r3
 8005aa0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ab0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ab4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	18db      	adds	r3, r3, r3
 8005abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005abe:	4613      	mov	r3, r2
 8005ac0:	eb42 0303 	adc.w	r3, r2, r3
 8005ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ac6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005aca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ace:	f7fb f88b 	bl	8000be8 <__aeabi_uldivmod>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8005bc8 <UART_SetConfig+0x2d4>)
 8005ada:	fba3 2301 	umull	r2, r3, r3, r1
 8005ade:	095b      	lsrs	r3, r3, #5
 8005ae0:	2264      	movs	r2, #100	@ 0x64
 8005ae2:	fb02 f303 	mul.w	r3, r2, r3
 8005ae6:	1acb      	subs	r3, r1, r3
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005aee:	4b36      	ldr	r3, [pc, #216]	@ (8005bc8 <UART_SetConfig+0x2d4>)
 8005af0:	fba3 2302 	umull	r2, r3, r3, r2
 8005af4:	095b      	lsrs	r3, r3, #5
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005afc:	441c      	add	r4, r3
 8005afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b10:	4642      	mov	r2, r8
 8005b12:	464b      	mov	r3, r9
 8005b14:	1891      	adds	r1, r2, r2
 8005b16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b18:	415b      	adcs	r3, r3
 8005b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b20:	4641      	mov	r1, r8
 8005b22:	1851      	adds	r1, r2, r1
 8005b24:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b26:	4649      	mov	r1, r9
 8005b28:	414b      	adcs	r3, r1
 8005b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	f04f 0300 	mov.w	r3, #0
 8005b34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b38:	4659      	mov	r1, fp
 8005b3a:	00cb      	lsls	r3, r1, #3
 8005b3c:	4651      	mov	r1, sl
 8005b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b42:	4651      	mov	r1, sl
 8005b44:	00ca      	lsls	r2, r1, #3
 8005b46:	4610      	mov	r0, r2
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	4642      	mov	r2, r8
 8005b4e:	189b      	adds	r3, r3, r2
 8005b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b54:	464b      	mov	r3, r9
 8005b56:	460a      	mov	r2, r1
 8005b58:	eb42 0303 	adc.w	r3, r2, r3
 8005b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b74:	460b      	mov	r3, r1
 8005b76:	18db      	adds	r3, r3, r3
 8005b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	eb42 0303 	adc.w	r3, r2, r3
 8005b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b8a:	f7fb f82d 	bl	8000be8 <__aeabi_uldivmod>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc8 <UART_SetConfig+0x2d4>)
 8005b94:	fba3 1302 	umull	r1, r3, r3, r2
 8005b98:	095b      	lsrs	r3, r3, #5
 8005b9a:	2164      	movs	r1, #100	@ 0x64
 8005b9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	3332      	adds	r3, #50	@ 0x32
 8005ba6:	4a08      	ldr	r2, [pc, #32]	@ (8005bc8 <UART_SetConfig+0x2d4>)
 8005ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bac:	095b      	lsrs	r3, r3, #5
 8005bae:	f003 0207 	and.w	r2, r3, #7
 8005bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4422      	add	r2, r4
 8005bba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bbc:	e106      	b.n	8005dcc <UART_SetConfig+0x4d8>
 8005bbe:	bf00      	nop
 8005bc0:	40011000 	.word	0x40011000
 8005bc4:	40011400 	.word	0x40011400
 8005bc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005bd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005bda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005bde:	4642      	mov	r2, r8
 8005be0:	464b      	mov	r3, r9
 8005be2:	1891      	adds	r1, r2, r2
 8005be4:	6239      	str	r1, [r7, #32]
 8005be6:	415b      	adcs	r3, r3
 8005be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bee:	4641      	mov	r1, r8
 8005bf0:	1854      	adds	r4, r2, r1
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	eb43 0501 	adc.w	r5, r3, r1
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	f04f 0300 	mov.w	r3, #0
 8005c00:	00eb      	lsls	r3, r5, #3
 8005c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c06:	00e2      	lsls	r2, r4, #3
 8005c08:	4614      	mov	r4, r2
 8005c0a:	461d      	mov	r5, r3
 8005c0c:	4643      	mov	r3, r8
 8005c0e:	18e3      	adds	r3, r4, r3
 8005c10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c14:	464b      	mov	r3, r9
 8005c16:	eb45 0303 	adc.w	r3, r5, r3
 8005c1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c2e:	f04f 0200 	mov.w	r2, #0
 8005c32:	f04f 0300 	mov.w	r3, #0
 8005c36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	008b      	lsls	r3, r1, #2
 8005c3e:	4621      	mov	r1, r4
 8005c40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c44:	4621      	mov	r1, r4
 8005c46:	008a      	lsls	r2, r1, #2
 8005c48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c4c:	f7fa ffcc 	bl	8000be8 <__aeabi_uldivmod>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4b60      	ldr	r3, [pc, #384]	@ (8005dd8 <UART_SetConfig+0x4e4>)
 8005c56:	fba3 2302 	umull	r2, r3, r3, r2
 8005c5a:	095b      	lsrs	r3, r3, #5
 8005c5c:	011c      	lsls	r4, r3, #4
 8005c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c70:	4642      	mov	r2, r8
 8005c72:	464b      	mov	r3, r9
 8005c74:	1891      	adds	r1, r2, r2
 8005c76:	61b9      	str	r1, [r7, #24]
 8005c78:	415b      	adcs	r3, r3
 8005c7a:	61fb      	str	r3, [r7, #28]
 8005c7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c80:	4641      	mov	r1, r8
 8005c82:	1851      	adds	r1, r2, r1
 8005c84:	6139      	str	r1, [r7, #16]
 8005c86:	4649      	mov	r1, r9
 8005c88:	414b      	adcs	r3, r1
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c98:	4659      	mov	r1, fp
 8005c9a:	00cb      	lsls	r3, r1, #3
 8005c9c:	4651      	mov	r1, sl
 8005c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ca2:	4651      	mov	r1, sl
 8005ca4:	00ca      	lsls	r2, r1, #3
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4603      	mov	r3, r0
 8005cac:	4642      	mov	r2, r8
 8005cae:	189b      	adds	r3, r3, r2
 8005cb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cb4:	464b      	mov	r3, r9
 8005cb6:	460a      	mov	r2, r1
 8005cb8:	eb42 0303 	adc.w	r3, r2, r3
 8005cbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ccc:	f04f 0200 	mov.w	r2, #0
 8005cd0:	f04f 0300 	mov.w	r3, #0
 8005cd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005cd8:	4649      	mov	r1, r9
 8005cda:	008b      	lsls	r3, r1, #2
 8005cdc:	4641      	mov	r1, r8
 8005cde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ce2:	4641      	mov	r1, r8
 8005ce4:	008a      	lsls	r2, r1, #2
 8005ce6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005cea:	f7fa ff7d 	bl	8000be8 <__aeabi_uldivmod>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	4b38      	ldr	r3, [pc, #224]	@ (8005dd8 <UART_SetConfig+0x4e4>)
 8005cf6:	fba3 2301 	umull	r2, r3, r3, r1
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	2264      	movs	r2, #100	@ 0x64
 8005cfe:	fb02 f303 	mul.w	r3, r2, r3
 8005d02:	1acb      	subs	r3, r1, r3
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	3332      	adds	r3, #50	@ 0x32
 8005d08:	4a33      	ldr	r2, [pc, #204]	@ (8005dd8 <UART_SetConfig+0x4e4>)
 8005d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0e:	095b      	lsrs	r3, r3, #5
 8005d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d14:	441c      	add	r4, r3
 8005d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d24:	4642      	mov	r2, r8
 8005d26:	464b      	mov	r3, r9
 8005d28:	1891      	adds	r1, r2, r2
 8005d2a:	60b9      	str	r1, [r7, #8]
 8005d2c:	415b      	adcs	r3, r3
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d34:	4641      	mov	r1, r8
 8005d36:	1851      	adds	r1, r2, r1
 8005d38:	6039      	str	r1, [r7, #0]
 8005d3a:	4649      	mov	r1, r9
 8005d3c:	414b      	adcs	r3, r1
 8005d3e:	607b      	str	r3, [r7, #4]
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	f04f 0300 	mov.w	r3, #0
 8005d48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d4c:	4659      	mov	r1, fp
 8005d4e:	00cb      	lsls	r3, r1, #3
 8005d50:	4651      	mov	r1, sl
 8005d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d56:	4651      	mov	r1, sl
 8005d58:	00ca      	lsls	r2, r1, #3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4603      	mov	r3, r0
 8005d60:	4642      	mov	r2, r8
 8005d62:	189b      	adds	r3, r3, r2
 8005d64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d66:	464b      	mov	r3, r9
 8005d68:	460a      	mov	r2, r1
 8005d6a:	eb42 0303 	adc.w	r3, r2, r3
 8005d6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d88:	4649      	mov	r1, r9
 8005d8a:	008b      	lsls	r3, r1, #2
 8005d8c:	4641      	mov	r1, r8
 8005d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d92:	4641      	mov	r1, r8
 8005d94:	008a      	lsls	r2, r1, #2
 8005d96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d9a:	f7fa ff25 	bl	8000be8 <__aeabi_uldivmod>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd8 <UART_SetConfig+0x4e4>)
 8005da4:	fba3 1302 	umull	r1, r3, r3, r2
 8005da8:	095b      	lsrs	r3, r3, #5
 8005daa:	2164      	movs	r1, #100	@ 0x64
 8005dac:	fb01 f303 	mul.w	r3, r1, r3
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	3332      	adds	r3, #50	@ 0x32
 8005db6:	4a08      	ldr	r2, [pc, #32]	@ (8005dd8 <UART_SetConfig+0x4e4>)
 8005db8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	f003 020f 	and.w	r2, r3, #15
 8005dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4422      	add	r2, r4
 8005dca:	609a      	str	r2, [r3, #8]
}
 8005dcc:	bf00      	nop
 8005dce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dd8:	51eb851f 	.word	0x51eb851f

08005ddc <_ZdlPvj>:
 8005ddc:	f000 b800 	b.w	8005de0 <_ZdlPv>

08005de0 <_ZdlPv>:
 8005de0:	f000 b808 	b.w	8005df4 <free>

08005de4 <malloc>:
 8005de4:	4b02      	ldr	r3, [pc, #8]	@ (8005df0 <malloc+0xc>)
 8005de6:	4601      	mov	r1, r0
 8005de8:	6818      	ldr	r0, [r3, #0]
 8005dea:	f000 b82d 	b.w	8005e48 <_malloc_r>
 8005dee:	bf00      	nop
 8005df0:	20000020 	.word	0x20000020

08005df4 <free>:
 8005df4:	4b02      	ldr	r3, [pc, #8]	@ (8005e00 <free+0xc>)
 8005df6:	4601      	mov	r1, r0
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	f001 bd21 	b.w	8007840 <_free_r>
 8005dfe:	bf00      	nop
 8005e00:	20000020 	.word	0x20000020

08005e04 <sbrk_aligned>:
 8005e04:	b570      	push	{r4, r5, r6, lr}
 8005e06:	4e0f      	ldr	r6, [pc, #60]	@ (8005e44 <sbrk_aligned+0x40>)
 8005e08:	460c      	mov	r4, r1
 8005e0a:	6831      	ldr	r1, [r6, #0]
 8005e0c:	4605      	mov	r5, r0
 8005e0e:	b911      	cbnz	r1, 8005e16 <sbrk_aligned+0x12>
 8005e10:	f000 fe78 	bl	8006b04 <_sbrk_r>
 8005e14:	6030      	str	r0, [r6, #0]
 8005e16:	4621      	mov	r1, r4
 8005e18:	4628      	mov	r0, r5
 8005e1a:	f000 fe73 	bl	8006b04 <_sbrk_r>
 8005e1e:	1c43      	adds	r3, r0, #1
 8005e20:	d103      	bne.n	8005e2a <sbrk_aligned+0x26>
 8005e22:	f04f 34ff 	mov.w	r4, #4294967295
 8005e26:	4620      	mov	r0, r4
 8005e28:	bd70      	pop	{r4, r5, r6, pc}
 8005e2a:	1cc4      	adds	r4, r0, #3
 8005e2c:	f024 0403 	bic.w	r4, r4, #3
 8005e30:	42a0      	cmp	r0, r4
 8005e32:	d0f8      	beq.n	8005e26 <sbrk_aligned+0x22>
 8005e34:	1a21      	subs	r1, r4, r0
 8005e36:	4628      	mov	r0, r5
 8005e38:	f000 fe64 	bl	8006b04 <_sbrk_r>
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d1f2      	bne.n	8005e26 <sbrk_aligned+0x22>
 8005e40:	e7ef      	b.n	8005e22 <sbrk_aligned+0x1e>
 8005e42:	bf00      	nop
 8005e44:	20000520 	.word	0x20000520

08005e48 <_malloc_r>:
 8005e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e4c:	1ccd      	adds	r5, r1, #3
 8005e4e:	f025 0503 	bic.w	r5, r5, #3
 8005e52:	3508      	adds	r5, #8
 8005e54:	2d0c      	cmp	r5, #12
 8005e56:	bf38      	it	cc
 8005e58:	250c      	movcc	r5, #12
 8005e5a:	2d00      	cmp	r5, #0
 8005e5c:	4606      	mov	r6, r0
 8005e5e:	db01      	blt.n	8005e64 <_malloc_r+0x1c>
 8005e60:	42a9      	cmp	r1, r5
 8005e62:	d904      	bls.n	8005e6e <_malloc_r+0x26>
 8005e64:	230c      	movs	r3, #12
 8005e66:	6033      	str	r3, [r6, #0]
 8005e68:	2000      	movs	r0, #0
 8005e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f44 <_malloc_r+0xfc>
 8005e72:	f000 f869 	bl	8005f48 <__malloc_lock>
 8005e76:	f8d8 3000 	ldr.w	r3, [r8]
 8005e7a:	461c      	mov	r4, r3
 8005e7c:	bb44      	cbnz	r4, 8005ed0 <_malloc_r+0x88>
 8005e7e:	4629      	mov	r1, r5
 8005e80:	4630      	mov	r0, r6
 8005e82:	f7ff ffbf 	bl	8005e04 <sbrk_aligned>
 8005e86:	1c43      	adds	r3, r0, #1
 8005e88:	4604      	mov	r4, r0
 8005e8a:	d158      	bne.n	8005f3e <_malloc_r+0xf6>
 8005e8c:	f8d8 4000 	ldr.w	r4, [r8]
 8005e90:	4627      	mov	r7, r4
 8005e92:	2f00      	cmp	r7, #0
 8005e94:	d143      	bne.n	8005f1e <_malloc_r+0xd6>
 8005e96:	2c00      	cmp	r4, #0
 8005e98:	d04b      	beq.n	8005f32 <_malloc_r+0xea>
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	4639      	mov	r1, r7
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	eb04 0903 	add.w	r9, r4, r3
 8005ea4:	f000 fe2e 	bl	8006b04 <_sbrk_r>
 8005ea8:	4581      	cmp	r9, r0
 8005eaa:	d142      	bne.n	8005f32 <_malloc_r+0xea>
 8005eac:	6821      	ldr	r1, [r4, #0]
 8005eae:	1a6d      	subs	r5, r5, r1
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	f7ff ffa6 	bl	8005e04 <sbrk_aligned>
 8005eb8:	3001      	adds	r0, #1
 8005eba:	d03a      	beq.n	8005f32 <_malloc_r+0xea>
 8005ebc:	6823      	ldr	r3, [r4, #0]
 8005ebe:	442b      	add	r3, r5
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	bb62      	cbnz	r2, 8005f24 <_malloc_r+0xdc>
 8005eca:	f8c8 7000 	str.w	r7, [r8]
 8005ece:	e00f      	b.n	8005ef0 <_malloc_r+0xa8>
 8005ed0:	6822      	ldr	r2, [r4, #0]
 8005ed2:	1b52      	subs	r2, r2, r5
 8005ed4:	d420      	bmi.n	8005f18 <_malloc_r+0xd0>
 8005ed6:	2a0b      	cmp	r2, #11
 8005ed8:	d917      	bls.n	8005f0a <_malloc_r+0xc2>
 8005eda:	1961      	adds	r1, r4, r5
 8005edc:	42a3      	cmp	r3, r4
 8005ede:	6025      	str	r5, [r4, #0]
 8005ee0:	bf18      	it	ne
 8005ee2:	6059      	strne	r1, [r3, #4]
 8005ee4:	6863      	ldr	r3, [r4, #4]
 8005ee6:	bf08      	it	eq
 8005ee8:	f8c8 1000 	streq.w	r1, [r8]
 8005eec:	5162      	str	r2, [r4, r5]
 8005eee:	604b      	str	r3, [r1, #4]
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	f000 f82f 	bl	8005f54 <__malloc_unlock>
 8005ef6:	f104 000b 	add.w	r0, r4, #11
 8005efa:	1d23      	adds	r3, r4, #4
 8005efc:	f020 0007 	bic.w	r0, r0, #7
 8005f00:	1ac2      	subs	r2, r0, r3
 8005f02:	bf1c      	itt	ne
 8005f04:	1a1b      	subne	r3, r3, r0
 8005f06:	50a3      	strne	r3, [r4, r2]
 8005f08:	e7af      	b.n	8005e6a <_malloc_r+0x22>
 8005f0a:	6862      	ldr	r2, [r4, #4]
 8005f0c:	42a3      	cmp	r3, r4
 8005f0e:	bf0c      	ite	eq
 8005f10:	f8c8 2000 	streq.w	r2, [r8]
 8005f14:	605a      	strne	r2, [r3, #4]
 8005f16:	e7eb      	b.n	8005ef0 <_malloc_r+0xa8>
 8005f18:	4623      	mov	r3, r4
 8005f1a:	6864      	ldr	r4, [r4, #4]
 8005f1c:	e7ae      	b.n	8005e7c <_malloc_r+0x34>
 8005f1e:	463c      	mov	r4, r7
 8005f20:	687f      	ldr	r7, [r7, #4]
 8005f22:	e7b6      	b.n	8005e92 <_malloc_r+0x4a>
 8005f24:	461a      	mov	r2, r3
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	42a3      	cmp	r3, r4
 8005f2a:	d1fb      	bne.n	8005f24 <_malloc_r+0xdc>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	6053      	str	r3, [r2, #4]
 8005f30:	e7de      	b.n	8005ef0 <_malloc_r+0xa8>
 8005f32:	230c      	movs	r3, #12
 8005f34:	6033      	str	r3, [r6, #0]
 8005f36:	4630      	mov	r0, r6
 8005f38:	f000 f80c 	bl	8005f54 <__malloc_unlock>
 8005f3c:	e794      	b.n	8005e68 <_malloc_r+0x20>
 8005f3e:	6005      	str	r5, [r0, #0]
 8005f40:	e7d6      	b.n	8005ef0 <_malloc_r+0xa8>
 8005f42:	bf00      	nop
 8005f44:	20000524 	.word	0x20000524

08005f48 <__malloc_lock>:
 8005f48:	4801      	ldr	r0, [pc, #4]	@ (8005f50 <__malloc_lock+0x8>)
 8005f4a:	f000 be28 	b.w	8006b9e <__retarget_lock_acquire_recursive>
 8005f4e:	bf00      	nop
 8005f50:	20000668 	.word	0x20000668

08005f54 <__malloc_unlock>:
 8005f54:	4801      	ldr	r0, [pc, #4]	@ (8005f5c <__malloc_unlock+0x8>)
 8005f56:	f000 be23 	b.w	8006ba0 <__retarget_lock_release_recursive>
 8005f5a:	bf00      	nop
 8005f5c:	20000668 	.word	0x20000668

08005f60 <__cvt>:
 8005f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f64:	ec57 6b10 	vmov	r6, r7, d0
 8005f68:	2f00      	cmp	r7, #0
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	463b      	mov	r3, r7
 8005f70:	bfbb      	ittet	lt
 8005f72:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005f76:	461f      	movlt	r7, r3
 8005f78:	2300      	movge	r3, #0
 8005f7a:	232d      	movlt	r3, #45	@ 0x2d
 8005f7c:	700b      	strb	r3, [r1, #0]
 8005f7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f80:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005f84:	4691      	mov	r9, r2
 8005f86:	f023 0820 	bic.w	r8, r3, #32
 8005f8a:	bfbc      	itt	lt
 8005f8c:	4632      	movlt	r2, r6
 8005f8e:	4616      	movlt	r6, r2
 8005f90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f94:	d005      	beq.n	8005fa2 <__cvt+0x42>
 8005f96:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005f9a:	d100      	bne.n	8005f9e <__cvt+0x3e>
 8005f9c:	3401      	adds	r4, #1
 8005f9e:	2102      	movs	r1, #2
 8005fa0:	e000      	b.n	8005fa4 <__cvt+0x44>
 8005fa2:	2103      	movs	r1, #3
 8005fa4:	ab03      	add	r3, sp, #12
 8005fa6:	9301      	str	r3, [sp, #4]
 8005fa8:	ab02      	add	r3, sp, #8
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	ec47 6b10 	vmov	d0, r6, r7
 8005fb0:	4653      	mov	r3, sl
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	f000 fe80 	bl	8006cb8 <_dtoa_r>
 8005fb8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005fbc:	4605      	mov	r5, r0
 8005fbe:	d119      	bne.n	8005ff4 <__cvt+0x94>
 8005fc0:	f019 0f01 	tst.w	r9, #1
 8005fc4:	d00e      	beq.n	8005fe4 <__cvt+0x84>
 8005fc6:	eb00 0904 	add.w	r9, r0, r4
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4630      	mov	r0, r6
 8005fd0:	4639      	mov	r1, r7
 8005fd2:	f7fa fd99 	bl	8000b08 <__aeabi_dcmpeq>
 8005fd6:	b108      	cbz	r0, 8005fdc <__cvt+0x7c>
 8005fd8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005fdc:	2230      	movs	r2, #48	@ 0x30
 8005fde:	9b03      	ldr	r3, [sp, #12]
 8005fe0:	454b      	cmp	r3, r9
 8005fe2:	d31e      	bcc.n	8006022 <__cvt+0xc2>
 8005fe4:	9b03      	ldr	r3, [sp, #12]
 8005fe6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005fe8:	1b5b      	subs	r3, r3, r5
 8005fea:	4628      	mov	r0, r5
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	b004      	add	sp, #16
 8005ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ff8:	eb00 0904 	add.w	r9, r0, r4
 8005ffc:	d1e5      	bne.n	8005fca <__cvt+0x6a>
 8005ffe:	7803      	ldrb	r3, [r0, #0]
 8006000:	2b30      	cmp	r3, #48	@ 0x30
 8006002:	d10a      	bne.n	800601a <__cvt+0xba>
 8006004:	2200      	movs	r2, #0
 8006006:	2300      	movs	r3, #0
 8006008:	4630      	mov	r0, r6
 800600a:	4639      	mov	r1, r7
 800600c:	f7fa fd7c 	bl	8000b08 <__aeabi_dcmpeq>
 8006010:	b918      	cbnz	r0, 800601a <__cvt+0xba>
 8006012:	f1c4 0401 	rsb	r4, r4, #1
 8006016:	f8ca 4000 	str.w	r4, [sl]
 800601a:	f8da 3000 	ldr.w	r3, [sl]
 800601e:	4499      	add	r9, r3
 8006020:	e7d3      	b.n	8005fca <__cvt+0x6a>
 8006022:	1c59      	adds	r1, r3, #1
 8006024:	9103      	str	r1, [sp, #12]
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	e7d9      	b.n	8005fde <__cvt+0x7e>

0800602a <__exponent>:
 800602a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800602c:	2900      	cmp	r1, #0
 800602e:	bfba      	itte	lt
 8006030:	4249      	neglt	r1, r1
 8006032:	232d      	movlt	r3, #45	@ 0x2d
 8006034:	232b      	movge	r3, #43	@ 0x2b
 8006036:	2909      	cmp	r1, #9
 8006038:	7002      	strb	r2, [r0, #0]
 800603a:	7043      	strb	r3, [r0, #1]
 800603c:	dd29      	ble.n	8006092 <__exponent+0x68>
 800603e:	f10d 0307 	add.w	r3, sp, #7
 8006042:	461d      	mov	r5, r3
 8006044:	270a      	movs	r7, #10
 8006046:	461a      	mov	r2, r3
 8006048:	fbb1 f6f7 	udiv	r6, r1, r7
 800604c:	fb07 1416 	mls	r4, r7, r6, r1
 8006050:	3430      	adds	r4, #48	@ 0x30
 8006052:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006056:	460c      	mov	r4, r1
 8006058:	2c63      	cmp	r4, #99	@ 0x63
 800605a:	f103 33ff 	add.w	r3, r3, #4294967295
 800605e:	4631      	mov	r1, r6
 8006060:	dcf1      	bgt.n	8006046 <__exponent+0x1c>
 8006062:	3130      	adds	r1, #48	@ 0x30
 8006064:	1e94      	subs	r4, r2, #2
 8006066:	f803 1c01 	strb.w	r1, [r3, #-1]
 800606a:	1c41      	adds	r1, r0, #1
 800606c:	4623      	mov	r3, r4
 800606e:	42ab      	cmp	r3, r5
 8006070:	d30a      	bcc.n	8006088 <__exponent+0x5e>
 8006072:	f10d 0309 	add.w	r3, sp, #9
 8006076:	1a9b      	subs	r3, r3, r2
 8006078:	42ac      	cmp	r4, r5
 800607a:	bf88      	it	hi
 800607c:	2300      	movhi	r3, #0
 800607e:	3302      	adds	r3, #2
 8006080:	4403      	add	r3, r0
 8006082:	1a18      	subs	r0, r3, r0
 8006084:	b003      	add	sp, #12
 8006086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006088:	f813 6b01 	ldrb.w	r6, [r3], #1
 800608c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006090:	e7ed      	b.n	800606e <__exponent+0x44>
 8006092:	2330      	movs	r3, #48	@ 0x30
 8006094:	3130      	adds	r1, #48	@ 0x30
 8006096:	7083      	strb	r3, [r0, #2]
 8006098:	70c1      	strb	r1, [r0, #3]
 800609a:	1d03      	adds	r3, r0, #4
 800609c:	e7f1      	b.n	8006082 <__exponent+0x58>
	...

080060a0 <_printf_float>:
 80060a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a4:	b08d      	sub	sp, #52	@ 0x34
 80060a6:	460c      	mov	r4, r1
 80060a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80060ac:	4616      	mov	r6, r2
 80060ae:	461f      	mov	r7, r3
 80060b0:	4605      	mov	r5, r0
 80060b2:	f000 fcef 	bl	8006a94 <_localeconv_r>
 80060b6:	6803      	ldr	r3, [r0, #0]
 80060b8:	9304      	str	r3, [sp, #16]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fa f8f8 	bl	80002b0 <strlen>
 80060c0:	2300      	movs	r3, #0
 80060c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80060c4:	f8d8 3000 	ldr.w	r3, [r8]
 80060c8:	9005      	str	r0, [sp, #20]
 80060ca:	3307      	adds	r3, #7
 80060cc:	f023 0307 	bic.w	r3, r3, #7
 80060d0:	f103 0208 	add.w	r2, r3, #8
 80060d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80060d8:	f8d4 b000 	ldr.w	fp, [r4]
 80060dc:	f8c8 2000 	str.w	r2, [r8]
 80060e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80060e8:	9307      	str	r3, [sp, #28]
 80060ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80060ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80060f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060f6:	4b9c      	ldr	r3, [pc, #624]	@ (8006368 <_printf_float+0x2c8>)
 80060f8:	f04f 32ff 	mov.w	r2, #4294967295
 80060fc:	f7fa fd36 	bl	8000b6c <__aeabi_dcmpun>
 8006100:	bb70      	cbnz	r0, 8006160 <_printf_float+0xc0>
 8006102:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006106:	4b98      	ldr	r3, [pc, #608]	@ (8006368 <_printf_float+0x2c8>)
 8006108:	f04f 32ff 	mov.w	r2, #4294967295
 800610c:	f7fa fd10 	bl	8000b30 <__aeabi_dcmple>
 8006110:	bb30      	cbnz	r0, 8006160 <_printf_float+0xc0>
 8006112:	2200      	movs	r2, #0
 8006114:	2300      	movs	r3, #0
 8006116:	4640      	mov	r0, r8
 8006118:	4649      	mov	r1, r9
 800611a:	f7fa fcff 	bl	8000b1c <__aeabi_dcmplt>
 800611e:	b110      	cbz	r0, 8006126 <_printf_float+0x86>
 8006120:	232d      	movs	r3, #45	@ 0x2d
 8006122:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006126:	4a91      	ldr	r2, [pc, #580]	@ (800636c <_printf_float+0x2cc>)
 8006128:	4b91      	ldr	r3, [pc, #580]	@ (8006370 <_printf_float+0x2d0>)
 800612a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800612e:	bf94      	ite	ls
 8006130:	4690      	movls	r8, r2
 8006132:	4698      	movhi	r8, r3
 8006134:	2303      	movs	r3, #3
 8006136:	6123      	str	r3, [r4, #16]
 8006138:	f02b 0304 	bic.w	r3, fp, #4
 800613c:	6023      	str	r3, [r4, #0]
 800613e:	f04f 0900 	mov.w	r9, #0
 8006142:	9700      	str	r7, [sp, #0]
 8006144:	4633      	mov	r3, r6
 8006146:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006148:	4621      	mov	r1, r4
 800614a:	4628      	mov	r0, r5
 800614c:	f000 f9d2 	bl	80064f4 <_printf_common>
 8006150:	3001      	adds	r0, #1
 8006152:	f040 808d 	bne.w	8006270 <_printf_float+0x1d0>
 8006156:	f04f 30ff 	mov.w	r0, #4294967295
 800615a:	b00d      	add	sp, #52	@ 0x34
 800615c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006160:	4642      	mov	r2, r8
 8006162:	464b      	mov	r3, r9
 8006164:	4640      	mov	r0, r8
 8006166:	4649      	mov	r1, r9
 8006168:	f7fa fd00 	bl	8000b6c <__aeabi_dcmpun>
 800616c:	b140      	cbz	r0, 8006180 <_printf_float+0xe0>
 800616e:	464b      	mov	r3, r9
 8006170:	2b00      	cmp	r3, #0
 8006172:	bfbc      	itt	lt
 8006174:	232d      	movlt	r3, #45	@ 0x2d
 8006176:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800617a:	4a7e      	ldr	r2, [pc, #504]	@ (8006374 <_printf_float+0x2d4>)
 800617c:	4b7e      	ldr	r3, [pc, #504]	@ (8006378 <_printf_float+0x2d8>)
 800617e:	e7d4      	b.n	800612a <_printf_float+0x8a>
 8006180:	6863      	ldr	r3, [r4, #4]
 8006182:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006186:	9206      	str	r2, [sp, #24]
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	d13b      	bne.n	8006204 <_printf_float+0x164>
 800618c:	2306      	movs	r3, #6
 800618e:	6063      	str	r3, [r4, #4]
 8006190:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006194:	2300      	movs	r3, #0
 8006196:	6022      	str	r2, [r4, #0]
 8006198:	9303      	str	r3, [sp, #12]
 800619a:	ab0a      	add	r3, sp, #40	@ 0x28
 800619c:	e9cd a301 	strd	sl, r3, [sp, #4]
 80061a0:	ab09      	add	r3, sp, #36	@ 0x24
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	6861      	ldr	r1, [r4, #4]
 80061a6:	ec49 8b10 	vmov	d0, r8, r9
 80061aa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80061ae:	4628      	mov	r0, r5
 80061b0:	f7ff fed6 	bl	8005f60 <__cvt>
 80061b4:	9b06      	ldr	r3, [sp, #24]
 80061b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061b8:	2b47      	cmp	r3, #71	@ 0x47
 80061ba:	4680      	mov	r8, r0
 80061bc:	d129      	bne.n	8006212 <_printf_float+0x172>
 80061be:	1cc8      	adds	r0, r1, #3
 80061c0:	db02      	blt.n	80061c8 <_printf_float+0x128>
 80061c2:	6863      	ldr	r3, [r4, #4]
 80061c4:	4299      	cmp	r1, r3
 80061c6:	dd41      	ble.n	800624c <_printf_float+0x1ac>
 80061c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80061cc:	fa5f fa8a 	uxtb.w	sl, sl
 80061d0:	3901      	subs	r1, #1
 80061d2:	4652      	mov	r2, sl
 80061d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80061d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80061da:	f7ff ff26 	bl	800602a <__exponent>
 80061de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061e0:	1813      	adds	r3, r2, r0
 80061e2:	2a01      	cmp	r2, #1
 80061e4:	4681      	mov	r9, r0
 80061e6:	6123      	str	r3, [r4, #16]
 80061e8:	dc02      	bgt.n	80061f0 <_printf_float+0x150>
 80061ea:	6822      	ldr	r2, [r4, #0]
 80061ec:	07d2      	lsls	r2, r2, #31
 80061ee:	d501      	bpl.n	80061f4 <_printf_float+0x154>
 80061f0:	3301      	adds	r3, #1
 80061f2:	6123      	str	r3, [r4, #16]
 80061f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0a2      	beq.n	8006142 <_printf_float+0xa2>
 80061fc:	232d      	movs	r3, #45	@ 0x2d
 80061fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006202:	e79e      	b.n	8006142 <_printf_float+0xa2>
 8006204:	9a06      	ldr	r2, [sp, #24]
 8006206:	2a47      	cmp	r2, #71	@ 0x47
 8006208:	d1c2      	bne.n	8006190 <_printf_float+0xf0>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1c0      	bne.n	8006190 <_printf_float+0xf0>
 800620e:	2301      	movs	r3, #1
 8006210:	e7bd      	b.n	800618e <_printf_float+0xee>
 8006212:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006216:	d9db      	bls.n	80061d0 <_printf_float+0x130>
 8006218:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800621c:	d118      	bne.n	8006250 <_printf_float+0x1b0>
 800621e:	2900      	cmp	r1, #0
 8006220:	6863      	ldr	r3, [r4, #4]
 8006222:	dd0b      	ble.n	800623c <_printf_float+0x19c>
 8006224:	6121      	str	r1, [r4, #16]
 8006226:	b913      	cbnz	r3, 800622e <_printf_float+0x18e>
 8006228:	6822      	ldr	r2, [r4, #0]
 800622a:	07d0      	lsls	r0, r2, #31
 800622c:	d502      	bpl.n	8006234 <_printf_float+0x194>
 800622e:	3301      	adds	r3, #1
 8006230:	440b      	add	r3, r1
 8006232:	6123      	str	r3, [r4, #16]
 8006234:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006236:	f04f 0900 	mov.w	r9, #0
 800623a:	e7db      	b.n	80061f4 <_printf_float+0x154>
 800623c:	b913      	cbnz	r3, 8006244 <_printf_float+0x1a4>
 800623e:	6822      	ldr	r2, [r4, #0]
 8006240:	07d2      	lsls	r2, r2, #31
 8006242:	d501      	bpl.n	8006248 <_printf_float+0x1a8>
 8006244:	3302      	adds	r3, #2
 8006246:	e7f4      	b.n	8006232 <_printf_float+0x192>
 8006248:	2301      	movs	r3, #1
 800624a:	e7f2      	b.n	8006232 <_printf_float+0x192>
 800624c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006250:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006252:	4299      	cmp	r1, r3
 8006254:	db05      	blt.n	8006262 <_printf_float+0x1c2>
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	6121      	str	r1, [r4, #16]
 800625a:	07d8      	lsls	r0, r3, #31
 800625c:	d5ea      	bpl.n	8006234 <_printf_float+0x194>
 800625e:	1c4b      	adds	r3, r1, #1
 8006260:	e7e7      	b.n	8006232 <_printf_float+0x192>
 8006262:	2900      	cmp	r1, #0
 8006264:	bfd4      	ite	le
 8006266:	f1c1 0202 	rsble	r2, r1, #2
 800626a:	2201      	movgt	r2, #1
 800626c:	4413      	add	r3, r2
 800626e:	e7e0      	b.n	8006232 <_printf_float+0x192>
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	055a      	lsls	r2, r3, #21
 8006274:	d407      	bmi.n	8006286 <_printf_float+0x1e6>
 8006276:	6923      	ldr	r3, [r4, #16]
 8006278:	4642      	mov	r2, r8
 800627a:	4631      	mov	r1, r6
 800627c:	4628      	mov	r0, r5
 800627e:	47b8      	blx	r7
 8006280:	3001      	adds	r0, #1
 8006282:	d12b      	bne.n	80062dc <_printf_float+0x23c>
 8006284:	e767      	b.n	8006156 <_printf_float+0xb6>
 8006286:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800628a:	f240 80dd 	bls.w	8006448 <_printf_float+0x3a8>
 800628e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006292:	2200      	movs	r2, #0
 8006294:	2300      	movs	r3, #0
 8006296:	f7fa fc37 	bl	8000b08 <__aeabi_dcmpeq>
 800629a:	2800      	cmp	r0, #0
 800629c:	d033      	beq.n	8006306 <_printf_float+0x266>
 800629e:	4a37      	ldr	r2, [pc, #220]	@ (800637c <_printf_float+0x2dc>)
 80062a0:	2301      	movs	r3, #1
 80062a2:	4631      	mov	r1, r6
 80062a4:	4628      	mov	r0, r5
 80062a6:	47b8      	blx	r7
 80062a8:	3001      	adds	r0, #1
 80062aa:	f43f af54 	beq.w	8006156 <_printf_float+0xb6>
 80062ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80062b2:	4543      	cmp	r3, r8
 80062b4:	db02      	blt.n	80062bc <_printf_float+0x21c>
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	07d8      	lsls	r0, r3, #31
 80062ba:	d50f      	bpl.n	80062dc <_printf_float+0x23c>
 80062bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062c0:	4631      	mov	r1, r6
 80062c2:	4628      	mov	r0, r5
 80062c4:	47b8      	blx	r7
 80062c6:	3001      	adds	r0, #1
 80062c8:	f43f af45 	beq.w	8006156 <_printf_float+0xb6>
 80062cc:	f04f 0900 	mov.w	r9, #0
 80062d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80062d4:	f104 0a1a 	add.w	sl, r4, #26
 80062d8:	45c8      	cmp	r8, r9
 80062da:	dc09      	bgt.n	80062f0 <_printf_float+0x250>
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	079b      	lsls	r3, r3, #30
 80062e0:	f100 8103 	bmi.w	80064ea <_printf_float+0x44a>
 80062e4:	68e0      	ldr	r0, [r4, #12]
 80062e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062e8:	4298      	cmp	r0, r3
 80062ea:	bfb8      	it	lt
 80062ec:	4618      	movlt	r0, r3
 80062ee:	e734      	b.n	800615a <_printf_float+0xba>
 80062f0:	2301      	movs	r3, #1
 80062f2:	4652      	mov	r2, sl
 80062f4:	4631      	mov	r1, r6
 80062f6:	4628      	mov	r0, r5
 80062f8:	47b8      	blx	r7
 80062fa:	3001      	adds	r0, #1
 80062fc:	f43f af2b 	beq.w	8006156 <_printf_float+0xb6>
 8006300:	f109 0901 	add.w	r9, r9, #1
 8006304:	e7e8      	b.n	80062d8 <_printf_float+0x238>
 8006306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006308:	2b00      	cmp	r3, #0
 800630a:	dc39      	bgt.n	8006380 <_printf_float+0x2e0>
 800630c:	4a1b      	ldr	r2, [pc, #108]	@ (800637c <_printf_float+0x2dc>)
 800630e:	2301      	movs	r3, #1
 8006310:	4631      	mov	r1, r6
 8006312:	4628      	mov	r0, r5
 8006314:	47b8      	blx	r7
 8006316:	3001      	adds	r0, #1
 8006318:	f43f af1d 	beq.w	8006156 <_printf_float+0xb6>
 800631c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006320:	ea59 0303 	orrs.w	r3, r9, r3
 8006324:	d102      	bne.n	800632c <_printf_float+0x28c>
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	07d9      	lsls	r1, r3, #31
 800632a:	d5d7      	bpl.n	80062dc <_printf_float+0x23c>
 800632c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006330:	4631      	mov	r1, r6
 8006332:	4628      	mov	r0, r5
 8006334:	47b8      	blx	r7
 8006336:	3001      	adds	r0, #1
 8006338:	f43f af0d 	beq.w	8006156 <_printf_float+0xb6>
 800633c:	f04f 0a00 	mov.w	sl, #0
 8006340:	f104 0b1a 	add.w	fp, r4, #26
 8006344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006346:	425b      	negs	r3, r3
 8006348:	4553      	cmp	r3, sl
 800634a:	dc01      	bgt.n	8006350 <_printf_float+0x2b0>
 800634c:	464b      	mov	r3, r9
 800634e:	e793      	b.n	8006278 <_printf_float+0x1d8>
 8006350:	2301      	movs	r3, #1
 8006352:	465a      	mov	r2, fp
 8006354:	4631      	mov	r1, r6
 8006356:	4628      	mov	r0, r5
 8006358:	47b8      	blx	r7
 800635a:	3001      	adds	r0, #1
 800635c:	f43f aefb 	beq.w	8006156 <_printf_float+0xb6>
 8006360:	f10a 0a01 	add.w	sl, sl, #1
 8006364:	e7ee      	b.n	8006344 <_printf_float+0x2a4>
 8006366:	bf00      	nop
 8006368:	7fefffff 	.word	0x7fefffff
 800636c:	08008b94 	.word	0x08008b94
 8006370:	08008b98 	.word	0x08008b98
 8006374:	08008b9c 	.word	0x08008b9c
 8006378:	08008ba0 	.word	0x08008ba0
 800637c:	08008ba4 	.word	0x08008ba4
 8006380:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006382:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006386:	4553      	cmp	r3, sl
 8006388:	bfa8      	it	ge
 800638a:	4653      	movge	r3, sl
 800638c:	2b00      	cmp	r3, #0
 800638e:	4699      	mov	r9, r3
 8006390:	dc36      	bgt.n	8006400 <_printf_float+0x360>
 8006392:	f04f 0b00 	mov.w	fp, #0
 8006396:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800639a:	f104 021a 	add.w	r2, r4, #26
 800639e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063a0:	9306      	str	r3, [sp, #24]
 80063a2:	eba3 0309 	sub.w	r3, r3, r9
 80063a6:	455b      	cmp	r3, fp
 80063a8:	dc31      	bgt.n	800640e <_printf_float+0x36e>
 80063aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ac:	459a      	cmp	sl, r3
 80063ae:	dc3a      	bgt.n	8006426 <_printf_float+0x386>
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	07da      	lsls	r2, r3, #31
 80063b4:	d437      	bmi.n	8006426 <_printf_float+0x386>
 80063b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063b8:	ebaa 0903 	sub.w	r9, sl, r3
 80063bc:	9b06      	ldr	r3, [sp, #24]
 80063be:	ebaa 0303 	sub.w	r3, sl, r3
 80063c2:	4599      	cmp	r9, r3
 80063c4:	bfa8      	it	ge
 80063c6:	4699      	movge	r9, r3
 80063c8:	f1b9 0f00 	cmp.w	r9, #0
 80063cc:	dc33      	bgt.n	8006436 <_printf_float+0x396>
 80063ce:	f04f 0800 	mov.w	r8, #0
 80063d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063d6:	f104 0b1a 	add.w	fp, r4, #26
 80063da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063dc:	ebaa 0303 	sub.w	r3, sl, r3
 80063e0:	eba3 0309 	sub.w	r3, r3, r9
 80063e4:	4543      	cmp	r3, r8
 80063e6:	f77f af79 	ble.w	80062dc <_printf_float+0x23c>
 80063ea:	2301      	movs	r3, #1
 80063ec:	465a      	mov	r2, fp
 80063ee:	4631      	mov	r1, r6
 80063f0:	4628      	mov	r0, r5
 80063f2:	47b8      	blx	r7
 80063f4:	3001      	adds	r0, #1
 80063f6:	f43f aeae 	beq.w	8006156 <_printf_float+0xb6>
 80063fa:	f108 0801 	add.w	r8, r8, #1
 80063fe:	e7ec      	b.n	80063da <_printf_float+0x33a>
 8006400:	4642      	mov	r2, r8
 8006402:	4631      	mov	r1, r6
 8006404:	4628      	mov	r0, r5
 8006406:	47b8      	blx	r7
 8006408:	3001      	adds	r0, #1
 800640a:	d1c2      	bne.n	8006392 <_printf_float+0x2f2>
 800640c:	e6a3      	b.n	8006156 <_printf_float+0xb6>
 800640e:	2301      	movs	r3, #1
 8006410:	4631      	mov	r1, r6
 8006412:	4628      	mov	r0, r5
 8006414:	9206      	str	r2, [sp, #24]
 8006416:	47b8      	blx	r7
 8006418:	3001      	adds	r0, #1
 800641a:	f43f ae9c 	beq.w	8006156 <_printf_float+0xb6>
 800641e:	9a06      	ldr	r2, [sp, #24]
 8006420:	f10b 0b01 	add.w	fp, fp, #1
 8006424:	e7bb      	b.n	800639e <_printf_float+0x2fe>
 8006426:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800642a:	4631      	mov	r1, r6
 800642c:	4628      	mov	r0, r5
 800642e:	47b8      	blx	r7
 8006430:	3001      	adds	r0, #1
 8006432:	d1c0      	bne.n	80063b6 <_printf_float+0x316>
 8006434:	e68f      	b.n	8006156 <_printf_float+0xb6>
 8006436:	9a06      	ldr	r2, [sp, #24]
 8006438:	464b      	mov	r3, r9
 800643a:	4442      	add	r2, r8
 800643c:	4631      	mov	r1, r6
 800643e:	4628      	mov	r0, r5
 8006440:	47b8      	blx	r7
 8006442:	3001      	adds	r0, #1
 8006444:	d1c3      	bne.n	80063ce <_printf_float+0x32e>
 8006446:	e686      	b.n	8006156 <_printf_float+0xb6>
 8006448:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800644c:	f1ba 0f01 	cmp.w	sl, #1
 8006450:	dc01      	bgt.n	8006456 <_printf_float+0x3b6>
 8006452:	07db      	lsls	r3, r3, #31
 8006454:	d536      	bpl.n	80064c4 <_printf_float+0x424>
 8006456:	2301      	movs	r3, #1
 8006458:	4642      	mov	r2, r8
 800645a:	4631      	mov	r1, r6
 800645c:	4628      	mov	r0, r5
 800645e:	47b8      	blx	r7
 8006460:	3001      	adds	r0, #1
 8006462:	f43f ae78 	beq.w	8006156 <_printf_float+0xb6>
 8006466:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800646a:	4631      	mov	r1, r6
 800646c:	4628      	mov	r0, r5
 800646e:	47b8      	blx	r7
 8006470:	3001      	adds	r0, #1
 8006472:	f43f ae70 	beq.w	8006156 <_printf_float+0xb6>
 8006476:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800647a:	2200      	movs	r2, #0
 800647c:	2300      	movs	r3, #0
 800647e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006482:	f7fa fb41 	bl	8000b08 <__aeabi_dcmpeq>
 8006486:	b9c0      	cbnz	r0, 80064ba <_printf_float+0x41a>
 8006488:	4653      	mov	r3, sl
 800648a:	f108 0201 	add.w	r2, r8, #1
 800648e:	4631      	mov	r1, r6
 8006490:	4628      	mov	r0, r5
 8006492:	47b8      	blx	r7
 8006494:	3001      	adds	r0, #1
 8006496:	d10c      	bne.n	80064b2 <_printf_float+0x412>
 8006498:	e65d      	b.n	8006156 <_printf_float+0xb6>
 800649a:	2301      	movs	r3, #1
 800649c:	465a      	mov	r2, fp
 800649e:	4631      	mov	r1, r6
 80064a0:	4628      	mov	r0, r5
 80064a2:	47b8      	blx	r7
 80064a4:	3001      	adds	r0, #1
 80064a6:	f43f ae56 	beq.w	8006156 <_printf_float+0xb6>
 80064aa:	f108 0801 	add.w	r8, r8, #1
 80064ae:	45d0      	cmp	r8, sl
 80064b0:	dbf3      	blt.n	800649a <_printf_float+0x3fa>
 80064b2:	464b      	mov	r3, r9
 80064b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80064b8:	e6df      	b.n	800627a <_printf_float+0x1da>
 80064ba:	f04f 0800 	mov.w	r8, #0
 80064be:	f104 0b1a 	add.w	fp, r4, #26
 80064c2:	e7f4      	b.n	80064ae <_printf_float+0x40e>
 80064c4:	2301      	movs	r3, #1
 80064c6:	4642      	mov	r2, r8
 80064c8:	e7e1      	b.n	800648e <_printf_float+0x3ee>
 80064ca:	2301      	movs	r3, #1
 80064cc:	464a      	mov	r2, r9
 80064ce:	4631      	mov	r1, r6
 80064d0:	4628      	mov	r0, r5
 80064d2:	47b8      	blx	r7
 80064d4:	3001      	adds	r0, #1
 80064d6:	f43f ae3e 	beq.w	8006156 <_printf_float+0xb6>
 80064da:	f108 0801 	add.w	r8, r8, #1
 80064de:	68e3      	ldr	r3, [r4, #12]
 80064e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80064e2:	1a5b      	subs	r3, r3, r1
 80064e4:	4543      	cmp	r3, r8
 80064e6:	dcf0      	bgt.n	80064ca <_printf_float+0x42a>
 80064e8:	e6fc      	b.n	80062e4 <_printf_float+0x244>
 80064ea:	f04f 0800 	mov.w	r8, #0
 80064ee:	f104 0919 	add.w	r9, r4, #25
 80064f2:	e7f4      	b.n	80064de <_printf_float+0x43e>

080064f4 <_printf_common>:
 80064f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f8:	4616      	mov	r6, r2
 80064fa:	4698      	mov	r8, r3
 80064fc:	688a      	ldr	r2, [r1, #8]
 80064fe:	690b      	ldr	r3, [r1, #16]
 8006500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006504:	4293      	cmp	r3, r2
 8006506:	bfb8      	it	lt
 8006508:	4613      	movlt	r3, r2
 800650a:	6033      	str	r3, [r6, #0]
 800650c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006510:	4607      	mov	r7, r0
 8006512:	460c      	mov	r4, r1
 8006514:	b10a      	cbz	r2, 800651a <_printf_common+0x26>
 8006516:	3301      	adds	r3, #1
 8006518:	6033      	str	r3, [r6, #0]
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	0699      	lsls	r1, r3, #26
 800651e:	bf42      	ittt	mi
 8006520:	6833      	ldrmi	r3, [r6, #0]
 8006522:	3302      	addmi	r3, #2
 8006524:	6033      	strmi	r3, [r6, #0]
 8006526:	6825      	ldr	r5, [r4, #0]
 8006528:	f015 0506 	ands.w	r5, r5, #6
 800652c:	d106      	bne.n	800653c <_printf_common+0x48>
 800652e:	f104 0a19 	add.w	sl, r4, #25
 8006532:	68e3      	ldr	r3, [r4, #12]
 8006534:	6832      	ldr	r2, [r6, #0]
 8006536:	1a9b      	subs	r3, r3, r2
 8006538:	42ab      	cmp	r3, r5
 800653a:	dc26      	bgt.n	800658a <_printf_common+0x96>
 800653c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006540:	6822      	ldr	r2, [r4, #0]
 8006542:	3b00      	subs	r3, #0
 8006544:	bf18      	it	ne
 8006546:	2301      	movne	r3, #1
 8006548:	0692      	lsls	r2, r2, #26
 800654a:	d42b      	bmi.n	80065a4 <_printf_common+0xb0>
 800654c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006550:	4641      	mov	r1, r8
 8006552:	4638      	mov	r0, r7
 8006554:	47c8      	blx	r9
 8006556:	3001      	adds	r0, #1
 8006558:	d01e      	beq.n	8006598 <_printf_common+0xa4>
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	6922      	ldr	r2, [r4, #16]
 800655e:	f003 0306 	and.w	r3, r3, #6
 8006562:	2b04      	cmp	r3, #4
 8006564:	bf02      	ittt	eq
 8006566:	68e5      	ldreq	r5, [r4, #12]
 8006568:	6833      	ldreq	r3, [r6, #0]
 800656a:	1aed      	subeq	r5, r5, r3
 800656c:	68a3      	ldr	r3, [r4, #8]
 800656e:	bf0c      	ite	eq
 8006570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006574:	2500      	movne	r5, #0
 8006576:	4293      	cmp	r3, r2
 8006578:	bfc4      	itt	gt
 800657a:	1a9b      	subgt	r3, r3, r2
 800657c:	18ed      	addgt	r5, r5, r3
 800657e:	2600      	movs	r6, #0
 8006580:	341a      	adds	r4, #26
 8006582:	42b5      	cmp	r5, r6
 8006584:	d11a      	bne.n	80065bc <_printf_common+0xc8>
 8006586:	2000      	movs	r0, #0
 8006588:	e008      	b.n	800659c <_printf_common+0xa8>
 800658a:	2301      	movs	r3, #1
 800658c:	4652      	mov	r2, sl
 800658e:	4641      	mov	r1, r8
 8006590:	4638      	mov	r0, r7
 8006592:	47c8      	blx	r9
 8006594:	3001      	adds	r0, #1
 8006596:	d103      	bne.n	80065a0 <_printf_common+0xac>
 8006598:	f04f 30ff 	mov.w	r0, #4294967295
 800659c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a0:	3501      	adds	r5, #1
 80065a2:	e7c6      	b.n	8006532 <_printf_common+0x3e>
 80065a4:	18e1      	adds	r1, r4, r3
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	2030      	movs	r0, #48	@ 0x30
 80065aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065ae:	4422      	add	r2, r4
 80065b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065b8:	3302      	adds	r3, #2
 80065ba:	e7c7      	b.n	800654c <_printf_common+0x58>
 80065bc:	2301      	movs	r3, #1
 80065be:	4622      	mov	r2, r4
 80065c0:	4641      	mov	r1, r8
 80065c2:	4638      	mov	r0, r7
 80065c4:	47c8      	blx	r9
 80065c6:	3001      	adds	r0, #1
 80065c8:	d0e6      	beq.n	8006598 <_printf_common+0xa4>
 80065ca:	3601      	adds	r6, #1
 80065cc:	e7d9      	b.n	8006582 <_printf_common+0x8e>
	...

080065d0 <_printf_i>:
 80065d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065d4:	7e0f      	ldrb	r7, [r1, #24]
 80065d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065d8:	2f78      	cmp	r7, #120	@ 0x78
 80065da:	4691      	mov	r9, r2
 80065dc:	4680      	mov	r8, r0
 80065de:	460c      	mov	r4, r1
 80065e0:	469a      	mov	sl, r3
 80065e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065e6:	d807      	bhi.n	80065f8 <_printf_i+0x28>
 80065e8:	2f62      	cmp	r7, #98	@ 0x62
 80065ea:	d80a      	bhi.n	8006602 <_printf_i+0x32>
 80065ec:	2f00      	cmp	r7, #0
 80065ee:	f000 80d2 	beq.w	8006796 <_printf_i+0x1c6>
 80065f2:	2f58      	cmp	r7, #88	@ 0x58
 80065f4:	f000 80b9 	beq.w	800676a <_printf_i+0x19a>
 80065f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006600:	e03a      	b.n	8006678 <_printf_i+0xa8>
 8006602:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006606:	2b15      	cmp	r3, #21
 8006608:	d8f6      	bhi.n	80065f8 <_printf_i+0x28>
 800660a:	a101      	add	r1, pc, #4	@ (adr r1, 8006610 <_printf_i+0x40>)
 800660c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006610:	08006669 	.word	0x08006669
 8006614:	0800667d 	.word	0x0800667d
 8006618:	080065f9 	.word	0x080065f9
 800661c:	080065f9 	.word	0x080065f9
 8006620:	080065f9 	.word	0x080065f9
 8006624:	080065f9 	.word	0x080065f9
 8006628:	0800667d 	.word	0x0800667d
 800662c:	080065f9 	.word	0x080065f9
 8006630:	080065f9 	.word	0x080065f9
 8006634:	080065f9 	.word	0x080065f9
 8006638:	080065f9 	.word	0x080065f9
 800663c:	0800677d 	.word	0x0800677d
 8006640:	080066a7 	.word	0x080066a7
 8006644:	08006737 	.word	0x08006737
 8006648:	080065f9 	.word	0x080065f9
 800664c:	080065f9 	.word	0x080065f9
 8006650:	0800679f 	.word	0x0800679f
 8006654:	080065f9 	.word	0x080065f9
 8006658:	080066a7 	.word	0x080066a7
 800665c:	080065f9 	.word	0x080065f9
 8006660:	080065f9 	.word	0x080065f9
 8006664:	0800673f 	.word	0x0800673f
 8006668:	6833      	ldr	r3, [r6, #0]
 800666a:	1d1a      	adds	r2, r3, #4
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6032      	str	r2, [r6, #0]
 8006670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006674:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006678:	2301      	movs	r3, #1
 800667a:	e09d      	b.n	80067b8 <_printf_i+0x1e8>
 800667c:	6833      	ldr	r3, [r6, #0]
 800667e:	6820      	ldr	r0, [r4, #0]
 8006680:	1d19      	adds	r1, r3, #4
 8006682:	6031      	str	r1, [r6, #0]
 8006684:	0606      	lsls	r6, r0, #24
 8006686:	d501      	bpl.n	800668c <_printf_i+0xbc>
 8006688:	681d      	ldr	r5, [r3, #0]
 800668a:	e003      	b.n	8006694 <_printf_i+0xc4>
 800668c:	0645      	lsls	r5, r0, #25
 800668e:	d5fb      	bpl.n	8006688 <_printf_i+0xb8>
 8006690:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006694:	2d00      	cmp	r5, #0
 8006696:	da03      	bge.n	80066a0 <_printf_i+0xd0>
 8006698:	232d      	movs	r3, #45	@ 0x2d
 800669a:	426d      	negs	r5, r5
 800669c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066a0:	4859      	ldr	r0, [pc, #356]	@ (8006808 <_printf_i+0x238>)
 80066a2:	230a      	movs	r3, #10
 80066a4:	e011      	b.n	80066ca <_printf_i+0xfa>
 80066a6:	6821      	ldr	r1, [r4, #0]
 80066a8:	6833      	ldr	r3, [r6, #0]
 80066aa:	0608      	lsls	r0, r1, #24
 80066ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80066b0:	d402      	bmi.n	80066b8 <_printf_i+0xe8>
 80066b2:	0649      	lsls	r1, r1, #25
 80066b4:	bf48      	it	mi
 80066b6:	b2ad      	uxthmi	r5, r5
 80066b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80066ba:	4853      	ldr	r0, [pc, #332]	@ (8006808 <_printf_i+0x238>)
 80066bc:	6033      	str	r3, [r6, #0]
 80066be:	bf14      	ite	ne
 80066c0:	230a      	movne	r3, #10
 80066c2:	2308      	moveq	r3, #8
 80066c4:	2100      	movs	r1, #0
 80066c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066ca:	6866      	ldr	r6, [r4, #4]
 80066cc:	60a6      	str	r6, [r4, #8]
 80066ce:	2e00      	cmp	r6, #0
 80066d0:	bfa2      	ittt	ge
 80066d2:	6821      	ldrge	r1, [r4, #0]
 80066d4:	f021 0104 	bicge.w	r1, r1, #4
 80066d8:	6021      	strge	r1, [r4, #0]
 80066da:	b90d      	cbnz	r5, 80066e0 <_printf_i+0x110>
 80066dc:	2e00      	cmp	r6, #0
 80066de:	d04b      	beq.n	8006778 <_printf_i+0x1a8>
 80066e0:	4616      	mov	r6, r2
 80066e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80066e6:	fb03 5711 	mls	r7, r3, r1, r5
 80066ea:	5dc7      	ldrb	r7, [r0, r7]
 80066ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066f0:	462f      	mov	r7, r5
 80066f2:	42bb      	cmp	r3, r7
 80066f4:	460d      	mov	r5, r1
 80066f6:	d9f4      	bls.n	80066e2 <_printf_i+0x112>
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d10b      	bne.n	8006714 <_printf_i+0x144>
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	07df      	lsls	r7, r3, #31
 8006700:	d508      	bpl.n	8006714 <_printf_i+0x144>
 8006702:	6923      	ldr	r3, [r4, #16]
 8006704:	6861      	ldr	r1, [r4, #4]
 8006706:	4299      	cmp	r1, r3
 8006708:	bfde      	ittt	le
 800670a:	2330      	movle	r3, #48	@ 0x30
 800670c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006710:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006714:	1b92      	subs	r2, r2, r6
 8006716:	6122      	str	r2, [r4, #16]
 8006718:	f8cd a000 	str.w	sl, [sp]
 800671c:	464b      	mov	r3, r9
 800671e:	aa03      	add	r2, sp, #12
 8006720:	4621      	mov	r1, r4
 8006722:	4640      	mov	r0, r8
 8006724:	f7ff fee6 	bl	80064f4 <_printf_common>
 8006728:	3001      	adds	r0, #1
 800672a:	d14a      	bne.n	80067c2 <_printf_i+0x1f2>
 800672c:	f04f 30ff 	mov.w	r0, #4294967295
 8006730:	b004      	add	sp, #16
 8006732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	f043 0320 	orr.w	r3, r3, #32
 800673c:	6023      	str	r3, [r4, #0]
 800673e:	4833      	ldr	r0, [pc, #204]	@ (800680c <_printf_i+0x23c>)
 8006740:	2778      	movs	r7, #120	@ 0x78
 8006742:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	6831      	ldr	r1, [r6, #0]
 800674a:	061f      	lsls	r7, r3, #24
 800674c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006750:	d402      	bmi.n	8006758 <_printf_i+0x188>
 8006752:	065f      	lsls	r7, r3, #25
 8006754:	bf48      	it	mi
 8006756:	b2ad      	uxthmi	r5, r5
 8006758:	6031      	str	r1, [r6, #0]
 800675a:	07d9      	lsls	r1, r3, #31
 800675c:	bf44      	itt	mi
 800675e:	f043 0320 	orrmi.w	r3, r3, #32
 8006762:	6023      	strmi	r3, [r4, #0]
 8006764:	b11d      	cbz	r5, 800676e <_printf_i+0x19e>
 8006766:	2310      	movs	r3, #16
 8006768:	e7ac      	b.n	80066c4 <_printf_i+0xf4>
 800676a:	4827      	ldr	r0, [pc, #156]	@ (8006808 <_printf_i+0x238>)
 800676c:	e7e9      	b.n	8006742 <_printf_i+0x172>
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	f023 0320 	bic.w	r3, r3, #32
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	e7f6      	b.n	8006766 <_printf_i+0x196>
 8006778:	4616      	mov	r6, r2
 800677a:	e7bd      	b.n	80066f8 <_printf_i+0x128>
 800677c:	6833      	ldr	r3, [r6, #0]
 800677e:	6825      	ldr	r5, [r4, #0]
 8006780:	6961      	ldr	r1, [r4, #20]
 8006782:	1d18      	adds	r0, r3, #4
 8006784:	6030      	str	r0, [r6, #0]
 8006786:	062e      	lsls	r6, r5, #24
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	d501      	bpl.n	8006790 <_printf_i+0x1c0>
 800678c:	6019      	str	r1, [r3, #0]
 800678e:	e002      	b.n	8006796 <_printf_i+0x1c6>
 8006790:	0668      	lsls	r0, r5, #25
 8006792:	d5fb      	bpl.n	800678c <_printf_i+0x1bc>
 8006794:	8019      	strh	r1, [r3, #0]
 8006796:	2300      	movs	r3, #0
 8006798:	6123      	str	r3, [r4, #16]
 800679a:	4616      	mov	r6, r2
 800679c:	e7bc      	b.n	8006718 <_printf_i+0x148>
 800679e:	6833      	ldr	r3, [r6, #0]
 80067a0:	1d1a      	adds	r2, r3, #4
 80067a2:	6032      	str	r2, [r6, #0]
 80067a4:	681e      	ldr	r6, [r3, #0]
 80067a6:	6862      	ldr	r2, [r4, #4]
 80067a8:	2100      	movs	r1, #0
 80067aa:	4630      	mov	r0, r6
 80067ac:	f7f9 fd30 	bl	8000210 <memchr>
 80067b0:	b108      	cbz	r0, 80067b6 <_printf_i+0x1e6>
 80067b2:	1b80      	subs	r0, r0, r6
 80067b4:	6060      	str	r0, [r4, #4]
 80067b6:	6863      	ldr	r3, [r4, #4]
 80067b8:	6123      	str	r3, [r4, #16]
 80067ba:	2300      	movs	r3, #0
 80067bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067c0:	e7aa      	b.n	8006718 <_printf_i+0x148>
 80067c2:	6923      	ldr	r3, [r4, #16]
 80067c4:	4632      	mov	r2, r6
 80067c6:	4649      	mov	r1, r9
 80067c8:	4640      	mov	r0, r8
 80067ca:	47d0      	blx	sl
 80067cc:	3001      	adds	r0, #1
 80067ce:	d0ad      	beq.n	800672c <_printf_i+0x15c>
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	079b      	lsls	r3, r3, #30
 80067d4:	d413      	bmi.n	80067fe <_printf_i+0x22e>
 80067d6:	68e0      	ldr	r0, [r4, #12]
 80067d8:	9b03      	ldr	r3, [sp, #12]
 80067da:	4298      	cmp	r0, r3
 80067dc:	bfb8      	it	lt
 80067de:	4618      	movlt	r0, r3
 80067e0:	e7a6      	b.n	8006730 <_printf_i+0x160>
 80067e2:	2301      	movs	r3, #1
 80067e4:	4632      	mov	r2, r6
 80067e6:	4649      	mov	r1, r9
 80067e8:	4640      	mov	r0, r8
 80067ea:	47d0      	blx	sl
 80067ec:	3001      	adds	r0, #1
 80067ee:	d09d      	beq.n	800672c <_printf_i+0x15c>
 80067f0:	3501      	adds	r5, #1
 80067f2:	68e3      	ldr	r3, [r4, #12]
 80067f4:	9903      	ldr	r1, [sp, #12]
 80067f6:	1a5b      	subs	r3, r3, r1
 80067f8:	42ab      	cmp	r3, r5
 80067fa:	dcf2      	bgt.n	80067e2 <_printf_i+0x212>
 80067fc:	e7eb      	b.n	80067d6 <_printf_i+0x206>
 80067fe:	2500      	movs	r5, #0
 8006800:	f104 0619 	add.w	r6, r4, #25
 8006804:	e7f5      	b.n	80067f2 <_printf_i+0x222>
 8006806:	bf00      	nop
 8006808:	08008ba6 	.word	0x08008ba6
 800680c:	08008bb7 	.word	0x08008bb7

08006810 <std>:
 8006810:	2300      	movs	r3, #0
 8006812:	b510      	push	{r4, lr}
 8006814:	4604      	mov	r4, r0
 8006816:	e9c0 3300 	strd	r3, r3, [r0]
 800681a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800681e:	6083      	str	r3, [r0, #8]
 8006820:	8181      	strh	r1, [r0, #12]
 8006822:	6643      	str	r3, [r0, #100]	@ 0x64
 8006824:	81c2      	strh	r2, [r0, #14]
 8006826:	6183      	str	r3, [r0, #24]
 8006828:	4619      	mov	r1, r3
 800682a:	2208      	movs	r2, #8
 800682c:	305c      	adds	r0, #92	@ 0x5c
 800682e:	f000 f928 	bl	8006a82 <memset>
 8006832:	4b0d      	ldr	r3, [pc, #52]	@ (8006868 <std+0x58>)
 8006834:	6263      	str	r3, [r4, #36]	@ 0x24
 8006836:	4b0d      	ldr	r3, [pc, #52]	@ (800686c <std+0x5c>)
 8006838:	62a3      	str	r3, [r4, #40]	@ 0x28
 800683a:	4b0d      	ldr	r3, [pc, #52]	@ (8006870 <std+0x60>)
 800683c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800683e:	4b0d      	ldr	r3, [pc, #52]	@ (8006874 <std+0x64>)
 8006840:	6323      	str	r3, [r4, #48]	@ 0x30
 8006842:	4b0d      	ldr	r3, [pc, #52]	@ (8006878 <std+0x68>)
 8006844:	6224      	str	r4, [r4, #32]
 8006846:	429c      	cmp	r4, r3
 8006848:	d006      	beq.n	8006858 <std+0x48>
 800684a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800684e:	4294      	cmp	r4, r2
 8006850:	d002      	beq.n	8006858 <std+0x48>
 8006852:	33d0      	adds	r3, #208	@ 0xd0
 8006854:	429c      	cmp	r4, r3
 8006856:	d105      	bne.n	8006864 <std+0x54>
 8006858:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800685c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006860:	f000 b99c 	b.w	8006b9c <__retarget_lock_init_recursive>
 8006864:	bd10      	pop	{r4, pc}
 8006866:	bf00      	nop
 8006868:	080069fd 	.word	0x080069fd
 800686c:	08006a1f 	.word	0x08006a1f
 8006870:	08006a57 	.word	0x08006a57
 8006874:	08006a7b 	.word	0x08006a7b
 8006878:	20000528 	.word	0x20000528

0800687c <stdio_exit_handler>:
 800687c:	4a02      	ldr	r2, [pc, #8]	@ (8006888 <stdio_exit_handler+0xc>)
 800687e:	4903      	ldr	r1, [pc, #12]	@ (800688c <stdio_exit_handler+0x10>)
 8006880:	4803      	ldr	r0, [pc, #12]	@ (8006890 <stdio_exit_handler+0x14>)
 8006882:	f000 b869 	b.w	8006958 <_fwalk_sglue>
 8006886:	bf00      	nop
 8006888:	20000014 	.word	0x20000014
 800688c:	08008391 	.word	0x08008391
 8006890:	20000024 	.word	0x20000024

08006894 <cleanup_stdio>:
 8006894:	6841      	ldr	r1, [r0, #4]
 8006896:	4b0c      	ldr	r3, [pc, #48]	@ (80068c8 <cleanup_stdio+0x34>)
 8006898:	4299      	cmp	r1, r3
 800689a:	b510      	push	{r4, lr}
 800689c:	4604      	mov	r4, r0
 800689e:	d001      	beq.n	80068a4 <cleanup_stdio+0x10>
 80068a0:	f001 fd76 	bl	8008390 <_fflush_r>
 80068a4:	68a1      	ldr	r1, [r4, #8]
 80068a6:	4b09      	ldr	r3, [pc, #36]	@ (80068cc <cleanup_stdio+0x38>)
 80068a8:	4299      	cmp	r1, r3
 80068aa:	d002      	beq.n	80068b2 <cleanup_stdio+0x1e>
 80068ac:	4620      	mov	r0, r4
 80068ae:	f001 fd6f 	bl	8008390 <_fflush_r>
 80068b2:	68e1      	ldr	r1, [r4, #12]
 80068b4:	4b06      	ldr	r3, [pc, #24]	@ (80068d0 <cleanup_stdio+0x3c>)
 80068b6:	4299      	cmp	r1, r3
 80068b8:	d004      	beq.n	80068c4 <cleanup_stdio+0x30>
 80068ba:	4620      	mov	r0, r4
 80068bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068c0:	f001 bd66 	b.w	8008390 <_fflush_r>
 80068c4:	bd10      	pop	{r4, pc}
 80068c6:	bf00      	nop
 80068c8:	20000528 	.word	0x20000528
 80068cc:	20000590 	.word	0x20000590
 80068d0:	200005f8 	.word	0x200005f8

080068d4 <global_stdio_init.part.0>:
 80068d4:	b510      	push	{r4, lr}
 80068d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006904 <global_stdio_init.part.0+0x30>)
 80068d8:	4c0b      	ldr	r4, [pc, #44]	@ (8006908 <global_stdio_init.part.0+0x34>)
 80068da:	4a0c      	ldr	r2, [pc, #48]	@ (800690c <global_stdio_init.part.0+0x38>)
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	4620      	mov	r0, r4
 80068e0:	2200      	movs	r2, #0
 80068e2:	2104      	movs	r1, #4
 80068e4:	f7ff ff94 	bl	8006810 <std>
 80068e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068ec:	2201      	movs	r2, #1
 80068ee:	2109      	movs	r1, #9
 80068f0:	f7ff ff8e 	bl	8006810 <std>
 80068f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068f8:	2202      	movs	r2, #2
 80068fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068fe:	2112      	movs	r1, #18
 8006900:	f7ff bf86 	b.w	8006810 <std>
 8006904:	20000660 	.word	0x20000660
 8006908:	20000528 	.word	0x20000528
 800690c:	0800687d 	.word	0x0800687d

08006910 <__sfp_lock_acquire>:
 8006910:	4801      	ldr	r0, [pc, #4]	@ (8006918 <__sfp_lock_acquire+0x8>)
 8006912:	f000 b944 	b.w	8006b9e <__retarget_lock_acquire_recursive>
 8006916:	bf00      	nop
 8006918:	20000669 	.word	0x20000669

0800691c <__sfp_lock_release>:
 800691c:	4801      	ldr	r0, [pc, #4]	@ (8006924 <__sfp_lock_release+0x8>)
 800691e:	f000 b93f 	b.w	8006ba0 <__retarget_lock_release_recursive>
 8006922:	bf00      	nop
 8006924:	20000669 	.word	0x20000669

08006928 <__sinit>:
 8006928:	b510      	push	{r4, lr}
 800692a:	4604      	mov	r4, r0
 800692c:	f7ff fff0 	bl	8006910 <__sfp_lock_acquire>
 8006930:	6a23      	ldr	r3, [r4, #32]
 8006932:	b11b      	cbz	r3, 800693c <__sinit+0x14>
 8006934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006938:	f7ff bff0 	b.w	800691c <__sfp_lock_release>
 800693c:	4b04      	ldr	r3, [pc, #16]	@ (8006950 <__sinit+0x28>)
 800693e:	6223      	str	r3, [r4, #32]
 8006940:	4b04      	ldr	r3, [pc, #16]	@ (8006954 <__sinit+0x2c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1f5      	bne.n	8006934 <__sinit+0xc>
 8006948:	f7ff ffc4 	bl	80068d4 <global_stdio_init.part.0>
 800694c:	e7f2      	b.n	8006934 <__sinit+0xc>
 800694e:	bf00      	nop
 8006950:	08006895 	.word	0x08006895
 8006954:	20000660 	.word	0x20000660

08006958 <_fwalk_sglue>:
 8006958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800695c:	4607      	mov	r7, r0
 800695e:	4688      	mov	r8, r1
 8006960:	4614      	mov	r4, r2
 8006962:	2600      	movs	r6, #0
 8006964:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006968:	f1b9 0901 	subs.w	r9, r9, #1
 800696c:	d505      	bpl.n	800697a <_fwalk_sglue+0x22>
 800696e:	6824      	ldr	r4, [r4, #0]
 8006970:	2c00      	cmp	r4, #0
 8006972:	d1f7      	bne.n	8006964 <_fwalk_sglue+0xc>
 8006974:	4630      	mov	r0, r6
 8006976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800697a:	89ab      	ldrh	r3, [r5, #12]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d907      	bls.n	8006990 <_fwalk_sglue+0x38>
 8006980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006984:	3301      	adds	r3, #1
 8006986:	d003      	beq.n	8006990 <_fwalk_sglue+0x38>
 8006988:	4629      	mov	r1, r5
 800698a:	4638      	mov	r0, r7
 800698c:	47c0      	blx	r8
 800698e:	4306      	orrs	r6, r0
 8006990:	3568      	adds	r5, #104	@ 0x68
 8006992:	e7e9      	b.n	8006968 <_fwalk_sglue+0x10>

08006994 <sniprintf>:
 8006994:	b40c      	push	{r2, r3}
 8006996:	b530      	push	{r4, r5, lr}
 8006998:	4b17      	ldr	r3, [pc, #92]	@ (80069f8 <sniprintf+0x64>)
 800699a:	1e0c      	subs	r4, r1, #0
 800699c:	681d      	ldr	r5, [r3, #0]
 800699e:	b09d      	sub	sp, #116	@ 0x74
 80069a0:	da08      	bge.n	80069b4 <sniprintf+0x20>
 80069a2:	238b      	movs	r3, #139	@ 0x8b
 80069a4:	602b      	str	r3, [r5, #0]
 80069a6:	f04f 30ff 	mov.w	r0, #4294967295
 80069aa:	b01d      	add	sp, #116	@ 0x74
 80069ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069b0:	b002      	add	sp, #8
 80069b2:	4770      	bx	lr
 80069b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80069b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80069bc:	bf14      	ite	ne
 80069be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80069c2:	4623      	moveq	r3, r4
 80069c4:	9304      	str	r3, [sp, #16]
 80069c6:	9307      	str	r3, [sp, #28]
 80069c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80069cc:	9002      	str	r0, [sp, #8]
 80069ce:	9006      	str	r0, [sp, #24]
 80069d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80069d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80069d6:	ab21      	add	r3, sp, #132	@ 0x84
 80069d8:	a902      	add	r1, sp, #8
 80069da:	4628      	mov	r0, r5
 80069dc:	9301      	str	r3, [sp, #4]
 80069de:	f001 fb57 	bl	8008090 <_svfiprintf_r>
 80069e2:	1c43      	adds	r3, r0, #1
 80069e4:	bfbc      	itt	lt
 80069e6:	238b      	movlt	r3, #139	@ 0x8b
 80069e8:	602b      	strlt	r3, [r5, #0]
 80069ea:	2c00      	cmp	r4, #0
 80069ec:	d0dd      	beq.n	80069aa <sniprintf+0x16>
 80069ee:	9b02      	ldr	r3, [sp, #8]
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]
 80069f4:	e7d9      	b.n	80069aa <sniprintf+0x16>
 80069f6:	bf00      	nop
 80069f8:	20000020 	.word	0x20000020

080069fc <__sread>:
 80069fc:	b510      	push	{r4, lr}
 80069fe:	460c      	mov	r4, r1
 8006a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a04:	f000 f86c 	bl	8006ae0 <_read_r>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	bfab      	itete	ge
 8006a0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a0e:	89a3      	ldrhlt	r3, [r4, #12]
 8006a10:	181b      	addge	r3, r3, r0
 8006a12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a16:	bfac      	ite	ge
 8006a18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a1a:	81a3      	strhlt	r3, [r4, #12]
 8006a1c:	bd10      	pop	{r4, pc}

08006a1e <__swrite>:
 8006a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a22:	461f      	mov	r7, r3
 8006a24:	898b      	ldrh	r3, [r1, #12]
 8006a26:	05db      	lsls	r3, r3, #23
 8006a28:	4605      	mov	r5, r0
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	4616      	mov	r6, r2
 8006a2e:	d505      	bpl.n	8006a3c <__swrite+0x1e>
 8006a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a34:	2302      	movs	r3, #2
 8006a36:	2200      	movs	r2, #0
 8006a38:	f000 f840 	bl	8006abc <_lseek_r>
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a46:	81a3      	strh	r3, [r4, #12]
 8006a48:	4632      	mov	r2, r6
 8006a4a:	463b      	mov	r3, r7
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a52:	f000 b867 	b.w	8006b24 <_write_r>

08006a56 <__sseek>:
 8006a56:	b510      	push	{r4, lr}
 8006a58:	460c      	mov	r4, r1
 8006a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a5e:	f000 f82d 	bl	8006abc <_lseek_r>
 8006a62:	1c43      	adds	r3, r0, #1
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	bf15      	itete	ne
 8006a68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a72:	81a3      	strheq	r3, [r4, #12]
 8006a74:	bf18      	it	ne
 8006a76:	81a3      	strhne	r3, [r4, #12]
 8006a78:	bd10      	pop	{r4, pc}

08006a7a <__sclose>:
 8006a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a7e:	f000 b80d 	b.w	8006a9c <_close_r>

08006a82 <memset>:
 8006a82:	4402      	add	r2, r0
 8006a84:	4603      	mov	r3, r0
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d100      	bne.n	8006a8c <memset+0xa>
 8006a8a:	4770      	bx	lr
 8006a8c:	f803 1b01 	strb.w	r1, [r3], #1
 8006a90:	e7f9      	b.n	8006a86 <memset+0x4>
	...

08006a94 <_localeconv_r>:
 8006a94:	4800      	ldr	r0, [pc, #0]	@ (8006a98 <_localeconv_r+0x4>)
 8006a96:	4770      	bx	lr
 8006a98:	20000160 	.word	0x20000160

08006a9c <_close_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	4d06      	ldr	r5, [pc, #24]	@ (8006ab8 <_close_r+0x1c>)
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	4608      	mov	r0, r1
 8006aa6:	602b      	str	r3, [r5, #0]
 8006aa8:	f7fb fbb4 	bl	8002214 <_close>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	d102      	bne.n	8006ab6 <_close_r+0x1a>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	b103      	cbz	r3, 8006ab6 <_close_r+0x1a>
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	20000664 	.word	0x20000664

08006abc <_lseek_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	4d07      	ldr	r5, [pc, #28]	@ (8006adc <_lseek_r+0x20>)
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	4608      	mov	r0, r1
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	602a      	str	r2, [r5, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	f7fb fbc9 	bl	8002262 <_lseek>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d102      	bne.n	8006ada <_lseek_r+0x1e>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	b103      	cbz	r3, 8006ada <_lseek_r+0x1e>
 8006ad8:	6023      	str	r3, [r4, #0]
 8006ada:	bd38      	pop	{r3, r4, r5, pc}
 8006adc:	20000664 	.word	0x20000664

08006ae0 <_read_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4d07      	ldr	r5, [pc, #28]	@ (8006b00 <_read_r+0x20>)
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	4608      	mov	r0, r1
 8006ae8:	4611      	mov	r1, r2
 8006aea:	2200      	movs	r2, #0
 8006aec:	602a      	str	r2, [r5, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	f7fb fb57 	bl	80021a2 <_read>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_read_r+0x1e>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_read_r+0x1e>
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	20000664 	.word	0x20000664

08006b04 <_sbrk_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	4d06      	ldr	r5, [pc, #24]	@ (8006b20 <_sbrk_r+0x1c>)
 8006b08:	2300      	movs	r3, #0
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	602b      	str	r3, [r5, #0]
 8006b10:	f7fb fbb4 	bl	800227c <_sbrk>
 8006b14:	1c43      	adds	r3, r0, #1
 8006b16:	d102      	bne.n	8006b1e <_sbrk_r+0x1a>
 8006b18:	682b      	ldr	r3, [r5, #0]
 8006b1a:	b103      	cbz	r3, 8006b1e <_sbrk_r+0x1a>
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	bd38      	pop	{r3, r4, r5, pc}
 8006b20:	20000664 	.word	0x20000664

08006b24 <_write_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4d07      	ldr	r5, [pc, #28]	@ (8006b44 <_write_r+0x20>)
 8006b28:	4604      	mov	r4, r0
 8006b2a:	4608      	mov	r0, r1
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	2200      	movs	r2, #0
 8006b30:	602a      	str	r2, [r5, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	f7fb fb52 	bl	80021dc <_write>
 8006b38:	1c43      	adds	r3, r0, #1
 8006b3a:	d102      	bne.n	8006b42 <_write_r+0x1e>
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	b103      	cbz	r3, 8006b42 <_write_r+0x1e>
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	bd38      	pop	{r3, r4, r5, pc}
 8006b44:	20000664 	.word	0x20000664

08006b48 <__errno>:
 8006b48:	4b01      	ldr	r3, [pc, #4]	@ (8006b50 <__errno+0x8>)
 8006b4a:	6818      	ldr	r0, [r3, #0]
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	20000020 	.word	0x20000020

08006b54 <__libc_init_array>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	4d0d      	ldr	r5, [pc, #52]	@ (8006b8c <__libc_init_array+0x38>)
 8006b58:	4c0d      	ldr	r4, [pc, #52]	@ (8006b90 <__libc_init_array+0x3c>)
 8006b5a:	1b64      	subs	r4, r4, r5
 8006b5c:	10a4      	asrs	r4, r4, #2
 8006b5e:	2600      	movs	r6, #0
 8006b60:	42a6      	cmp	r6, r4
 8006b62:	d109      	bne.n	8006b78 <__libc_init_array+0x24>
 8006b64:	4d0b      	ldr	r5, [pc, #44]	@ (8006b94 <__libc_init_array+0x40>)
 8006b66:	4c0c      	ldr	r4, [pc, #48]	@ (8006b98 <__libc_init_array+0x44>)
 8006b68:	f001 ffa0 	bl	8008aac <_init>
 8006b6c:	1b64      	subs	r4, r4, r5
 8006b6e:	10a4      	asrs	r4, r4, #2
 8006b70:	2600      	movs	r6, #0
 8006b72:	42a6      	cmp	r6, r4
 8006b74:	d105      	bne.n	8006b82 <__libc_init_array+0x2e>
 8006b76:	bd70      	pop	{r4, r5, r6, pc}
 8006b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b7c:	4798      	blx	r3
 8006b7e:	3601      	adds	r6, #1
 8006b80:	e7ee      	b.n	8006b60 <__libc_init_array+0xc>
 8006b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b86:	4798      	blx	r3
 8006b88:	3601      	adds	r6, #1
 8006b8a:	e7f2      	b.n	8006b72 <__libc_init_array+0x1e>
 8006b8c:	08008f10 	.word	0x08008f10
 8006b90:	08008f10 	.word	0x08008f10
 8006b94:	08008f10 	.word	0x08008f10
 8006b98:	08008f18 	.word	0x08008f18

08006b9c <__retarget_lock_init_recursive>:
 8006b9c:	4770      	bx	lr

08006b9e <__retarget_lock_acquire_recursive>:
 8006b9e:	4770      	bx	lr

08006ba0 <__retarget_lock_release_recursive>:
 8006ba0:	4770      	bx	lr

08006ba2 <quorem>:
 8006ba2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba6:	6903      	ldr	r3, [r0, #16]
 8006ba8:	690c      	ldr	r4, [r1, #16]
 8006baa:	42a3      	cmp	r3, r4
 8006bac:	4607      	mov	r7, r0
 8006bae:	db7e      	blt.n	8006cae <quorem+0x10c>
 8006bb0:	3c01      	subs	r4, #1
 8006bb2:	f101 0814 	add.w	r8, r1, #20
 8006bb6:	00a3      	lsls	r3, r4, #2
 8006bb8:	f100 0514 	add.w	r5, r0, #20
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bc2:	9301      	str	r3, [sp, #4]
 8006bc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006bc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006bd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006bd8:	d32e      	bcc.n	8006c38 <quorem+0x96>
 8006bda:	f04f 0a00 	mov.w	sl, #0
 8006bde:	46c4      	mov	ip, r8
 8006be0:	46ae      	mov	lr, r5
 8006be2:	46d3      	mov	fp, sl
 8006be4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006be8:	b298      	uxth	r0, r3
 8006bea:	fb06 a000 	mla	r0, r6, r0, sl
 8006bee:	0c02      	lsrs	r2, r0, #16
 8006bf0:	0c1b      	lsrs	r3, r3, #16
 8006bf2:	fb06 2303 	mla	r3, r6, r3, r2
 8006bf6:	f8de 2000 	ldr.w	r2, [lr]
 8006bfa:	b280      	uxth	r0, r0
 8006bfc:	b292      	uxth	r2, r2
 8006bfe:	1a12      	subs	r2, r2, r0
 8006c00:	445a      	add	r2, fp
 8006c02:	f8de 0000 	ldr.w	r0, [lr]
 8006c06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006c10:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006c14:	b292      	uxth	r2, r2
 8006c16:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006c1a:	45e1      	cmp	r9, ip
 8006c1c:	f84e 2b04 	str.w	r2, [lr], #4
 8006c20:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006c24:	d2de      	bcs.n	8006be4 <quorem+0x42>
 8006c26:	9b00      	ldr	r3, [sp, #0]
 8006c28:	58eb      	ldr	r3, [r5, r3]
 8006c2a:	b92b      	cbnz	r3, 8006c38 <quorem+0x96>
 8006c2c:	9b01      	ldr	r3, [sp, #4]
 8006c2e:	3b04      	subs	r3, #4
 8006c30:	429d      	cmp	r5, r3
 8006c32:	461a      	mov	r2, r3
 8006c34:	d32f      	bcc.n	8006c96 <quorem+0xf4>
 8006c36:	613c      	str	r4, [r7, #16]
 8006c38:	4638      	mov	r0, r7
 8006c3a:	f001 f8c5 	bl	8007dc8 <__mcmp>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	db25      	blt.n	8006c8e <quorem+0xec>
 8006c42:	4629      	mov	r1, r5
 8006c44:	2000      	movs	r0, #0
 8006c46:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c4a:	f8d1 c000 	ldr.w	ip, [r1]
 8006c4e:	fa1f fe82 	uxth.w	lr, r2
 8006c52:	fa1f f38c 	uxth.w	r3, ip
 8006c56:	eba3 030e 	sub.w	r3, r3, lr
 8006c5a:	4403      	add	r3, r0
 8006c5c:	0c12      	lsrs	r2, r2, #16
 8006c5e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006c62:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c6c:	45c1      	cmp	r9, r8
 8006c6e:	f841 3b04 	str.w	r3, [r1], #4
 8006c72:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c76:	d2e6      	bcs.n	8006c46 <quorem+0xa4>
 8006c78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c80:	b922      	cbnz	r2, 8006c8c <quorem+0xea>
 8006c82:	3b04      	subs	r3, #4
 8006c84:	429d      	cmp	r5, r3
 8006c86:	461a      	mov	r2, r3
 8006c88:	d30b      	bcc.n	8006ca2 <quorem+0x100>
 8006c8a:	613c      	str	r4, [r7, #16]
 8006c8c:	3601      	adds	r6, #1
 8006c8e:	4630      	mov	r0, r6
 8006c90:	b003      	add	sp, #12
 8006c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c96:	6812      	ldr	r2, [r2, #0]
 8006c98:	3b04      	subs	r3, #4
 8006c9a:	2a00      	cmp	r2, #0
 8006c9c:	d1cb      	bne.n	8006c36 <quorem+0x94>
 8006c9e:	3c01      	subs	r4, #1
 8006ca0:	e7c6      	b.n	8006c30 <quorem+0x8e>
 8006ca2:	6812      	ldr	r2, [r2, #0]
 8006ca4:	3b04      	subs	r3, #4
 8006ca6:	2a00      	cmp	r2, #0
 8006ca8:	d1ef      	bne.n	8006c8a <quorem+0xe8>
 8006caa:	3c01      	subs	r4, #1
 8006cac:	e7ea      	b.n	8006c84 <quorem+0xe2>
 8006cae:	2000      	movs	r0, #0
 8006cb0:	e7ee      	b.n	8006c90 <quorem+0xee>
 8006cb2:	0000      	movs	r0, r0
 8006cb4:	0000      	movs	r0, r0
	...

08006cb8 <_dtoa_r>:
 8006cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cbc:	69c7      	ldr	r7, [r0, #28]
 8006cbe:	b099      	sub	sp, #100	@ 0x64
 8006cc0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006cc4:	ec55 4b10 	vmov	r4, r5, d0
 8006cc8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006cca:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ccc:	4683      	mov	fp, r0
 8006cce:	920e      	str	r2, [sp, #56]	@ 0x38
 8006cd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006cd2:	b97f      	cbnz	r7, 8006cf4 <_dtoa_r+0x3c>
 8006cd4:	2010      	movs	r0, #16
 8006cd6:	f7ff f885 	bl	8005de4 <malloc>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	f8cb 001c 	str.w	r0, [fp, #28]
 8006ce0:	b920      	cbnz	r0, 8006cec <_dtoa_r+0x34>
 8006ce2:	4ba7      	ldr	r3, [pc, #668]	@ (8006f80 <_dtoa_r+0x2c8>)
 8006ce4:	21ef      	movs	r1, #239	@ 0xef
 8006ce6:	48a7      	ldr	r0, [pc, #668]	@ (8006f84 <_dtoa_r+0x2cc>)
 8006ce8:	f001 fba2 	bl	8008430 <__assert_func>
 8006cec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006cf0:	6007      	str	r7, [r0, #0]
 8006cf2:	60c7      	str	r7, [r0, #12]
 8006cf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006cf8:	6819      	ldr	r1, [r3, #0]
 8006cfa:	b159      	cbz	r1, 8006d14 <_dtoa_r+0x5c>
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	604a      	str	r2, [r1, #4]
 8006d00:	2301      	movs	r3, #1
 8006d02:	4093      	lsls	r3, r2
 8006d04:	608b      	str	r3, [r1, #8]
 8006d06:	4658      	mov	r0, fp
 8006d08:	f000 fe24 	bl	8007954 <_Bfree>
 8006d0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	1e2b      	subs	r3, r5, #0
 8006d16:	bfb9      	ittee	lt
 8006d18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006d1c:	9303      	strlt	r3, [sp, #12]
 8006d1e:	2300      	movge	r3, #0
 8006d20:	6033      	strge	r3, [r6, #0]
 8006d22:	9f03      	ldr	r7, [sp, #12]
 8006d24:	4b98      	ldr	r3, [pc, #608]	@ (8006f88 <_dtoa_r+0x2d0>)
 8006d26:	bfbc      	itt	lt
 8006d28:	2201      	movlt	r2, #1
 8006d2a:	6032      	strlt	r2, [r6, #0]
 8006d2c:	43bb      	bics	r3, r7
 8006d2e:	d112      	bne.n	8006d56 <_dtoa_r+0x9e>
 8006d30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d3c:	4323      	orrs	r3, r4
 8006d3e:	f000 854d 	beq.w	80077dc <_dtoa_r+0xb24>
 8006d42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006f9c <_dtoa_r+0x2e4>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 854f 	beq.w	80077ec <_dtoa_r+0xb34>
 8006d4e:	f10a 0303 	add.w	r3, sl, #3
 8006d52:	f000 bd49 	b.w	80077e8 <_dtoa_r+0xb30>
 8006d56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	ec51 0b17 	vmov	r0, r1, d7
 8006d60:	2300      	movs	r3, #0
 8006d62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006d66:	f7f9 fecf 	bl	8000b08 <__aeabi_dcmpeq>
 8006d6a:	4680      	mov	r8, r0
 8006d6c:	b158      	cbz	r0, 8006d86 <_dtoa_r+0xce>
 8006d6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d70:	2301      	movs	r3, #1
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d76:	b113      	cbz	r3, 8006d7e <_dtoa_r+0xc6>
 8006d78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d7a:	4b84      	ldr	r3, [pc, #528]	@ (8006f8c <_dtoa_r+0x2d4>)
 8006d7c:	6013      	str	r3, [r2, #0]
 8006d7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006fa0 <_dtoa_r+0x2e8>
 8006d82:	f000 bd33 	b.w	80077ec <_dtoa_r+0xb34>
 8006d86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006d8a:	aa16      	add	r2, sp, #88	@ 0x58
 8006d8c:	a917      	add	r1, sp, #92	@ 0x5c
 8006d8e:	4658      	mov	r0, fp
 8006d90:	f001 f8ca 	bl	8007f28 <__d2b>
 8006d94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006d98:	4681      	mov	r9, r0
 8006d9a:	2e00      	cmp	r6, #0
 8006d9c:	d077      	beq.n	8006e8e <_dtoa_r+0x1d6>
 8006d9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006da0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006da8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006db0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006db4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006db8:	4619      	mov	r1, r3
 8006dba:	2200      	movs	r2, #0
 8006dbc:	4b74      	ldr	r3, [pc, #464]	@ (8006f90 <_dtoa_r+0x2d8>)
 8006dbe:	f7f9 fa83 	bl	80002c8 <__aeabi_dsub>
 8006dc2:	a369      	add	r3, pc, #420	@ (adr r3, 8006f68 <_dtoa_r+0x2b0>)
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	f7f9 fc36 	bl	8000638 <__aeabi_dmul>
 8006dcc:	a368      	add	r3, pc, #416	@ (adr r3, 8006f70 <_dtoa_r+0x2b8>)
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	f7f9 fa7b 	bl	80002cc <__adddf3>
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	4630      	mov	r0, r6
 8006dda:	460d      	mov	r5, r1
 8006ddc:	f7f9 fbc2 	bl	8000564 <__aeabi_i2d>
 8006de0:	a365      	add	r3, pc, #404	@ (adr r3, 8006f78 <_dtoa_r+0x2c0>)
 8006de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de6:	f7f9 fc27 	bl	8000638 <__aeabi_dmul>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	4620      	mov	r0, r4
 8006df0:	4629      	mov	r1, r5
 8006df2:	f7f9 fa6b 	bl	80002cc <__adddf3>
 8006df6:	4604      	mov	r4, r0
 8006df8:	460d      	mov	r5, r1
 8006dfa:	f7f9 fecd 	bl	8000b98 <__aeabi_d2iz>
 8006dfe:	2200      	movs	r2, #0
 8006e00:	4607      	mov	r7, r0
 8006e02:	2300      	movs	r3, #0
 8006e04:	4620      	mov	r0, r4
 8006e06:	4629      	mov	r1, r5
 8006e08:	f7f9 fe88 	bl	8000b1c <__aeabi_dcmplt>
 8006e0c:	b140      	cbz	r0, 8006e20 <_dtoa_r+0x168>
 8006e0e:	4638      	mov	r0, r7
 8006e10:	f7f9 fba8 	bl	8000564 <__aeabi_i2d>
 8006e14:	4622      	mov	r2, r4
 8006e16:	462b      	mov	r3, r5
 8006e18:	f7f9 fe76 	bl	8000b08 <__aeabi_dcmpeq>
 8006e1c:	b900      	cbnz	r0, 8006e20 <_dtoa_r+0x168>
 8006e1e:	3f01      	subs	r7, #1
 8006e20:	2f16      	cmp	r7, #22
 8006e22:	d851      	bhi.n	8006ec8 <_dtoa_r+0x210>
 8006e24:	4b5b      	ldr	r3, [pc, #364]	@ (8006f94 <_dtoa_r+0x2dc>)
 8006e26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e32:	f7f9 fe73 	bl	8000b1c <__aeabi_dcmplt>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d048      	beq.n	8006ecc <_dtoa_r+0x214>
 8006e3a:	3f01      	subs	r7, #1
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006e40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006e42:	1b9b      	subs	r3, r3, r6
 8006e44:	1e5a      	subs	r2, r3, #1
 8006e46:	bf44      	itt	mi
 8006e48:	f1c3 0801 	rsbmi	r8, r3, #1
 8006e4c:	2300      	movmi	r3, #0
 8006e4e:	9208      	str	r2, [sp, #32]
 8006e50:	bf54      	ite	pl
 8006e52:	f04f 0800 	movpl.w	r8, #0
 8006e56:	9308      	strmi	r3, [sp, #32]
 8006e58:	2f00      	cmp	r7, #0
 8006e5a:	db39      	blt.n	8006ed0 <_dtoa_r+0x218>
 8006e5c:	9b08      	ldr	r3, [sp, #32]
 8006e5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006e60:	443b      	add	r3, r7
 8006e62:	9308      	str	r3, [sp, #32]
 8006e64:	2300      	movs	r3, #0
 8006e66:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e6a:	2b09      	cmp	r3, #9
 8006e6c:	d864      	bhi.n	8006f38 <_dtoa_r+0x280>
 8006e6e:	2b05      	cmp	r3, #5
 8006e70:	bfc4      	itt	gt
 8006e72:	3b04      	subgt	r3, #4
 8006e74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e78:	f1a3 0302 	sub.w	r3, r3, #2
 8006e7c:	bfcc      	ite	gt
 8006e7e:	2400      	movgt	r4, #0
 8006e80:	2401      	movle	r4, #1
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d863      	bhi.n	8006f4e <_dtoa_r+0x296>
 8006e86:	e8df f003 	tbb	[pc, r3]
 8006e8a:	372a      	.short	0x372a
 8006e8c:	5535      	.short	0x5535
 8006e8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006e92:	441e      	add	r6, r3
 8006e94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	bfc1      	itttt	gt
 8006e9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ea0:	409f      	lslgt	r7, r3
 8006ea2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006ea6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006eaa:	bfd6      	itet	le
 8006eac:	f1c3 0320 	rsble	r3, r3, #32
 8006eb0:	ea47 0003 	orrgt.w	r0, r7, r3
 8006eb4:	fa04 f003 	lslle.w	r0, r4, r3
 8006eb8:	f7f9 fb44 	bl	8000544 <__aeabi_ui2d>
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ec2:	3e01      	subs	r6, #1
 8006ec4:	9214      	str	r2, [sp, #80]	@ 0x50
 8006ec6:	e777      	b.n	8006db8 <_dtoa_r+0x100>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e7b8      	b.n	8006e3e <_dtoa_r+0x186>
 8006ecc:	9012      	str	r0, [sp, #72]	@ 0x48
 8006ece:	e7b7      	b.n	8006e40 <_dtoa_r+0x188>
 8006ed0:	427b      	negs	r3, r7
 8006ed2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	eba8 0807 	sub.w	r8, r8, r7
 8006eda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006edc:	e7c4      	b.n	8006e68 <_dtoa_r+0x1b0>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ee2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	dc35      	bgt.n	8006f54 <_dtoa_r+0x29c>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	9307      	str	r3, [sp, #28]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ef2:	e00b      	b.n	8006f0c <_dtoa_r+0x254>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e7f3      	b.n	8006ee0 <_dtoa_r+0x228>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006efc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006efe:	18fb      	adds	r3, r7, r3
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	3301      	adds	r3, #1
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	9307      	str	r3, [sp, #28]
 8006f08:	bfb8      	it	lt
 8006f0a:	2301      	movlt	r3, #1
 8006f0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006f10:	2100      	movs	r1, #0
 8006f12:	2204      	movs	r2, #4
 8006f14:	f102 0514 	add.w	r5, r2, #20
 8006f18:	429d      	cmp	r5, r3
 8006f1a:	d91f      	bls.n	8006f5c <_dtoa_r+0x2a4>
 8006f1c:	6041      	str	r1, [r0, #4]
 8006f1e:	4658      	mov	r0, fp
 8006f20:	f000 fcd8 	bl	80078d4 <_Balloc>
 8006f24:	4682      	mov	sl, r0
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d13c      	bne.n	8006fa4 <_dtoa_r+0x2ec>
 8006f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8006f98 <_dtoa_r+0x2e0>)
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006f32:	e6d8      	b.n	8006ce6 <_dtoa_r+0x2e>
 8006f34:	2301      	movs	r3, #1
 8006f36:	e7e0      	b.n	8006efa <_dtoa_r+0x242>
 8006f38:	2401      	movs	r4, #1
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f40:	f04f 33ff 	mov.w	r3, #4294967295
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	9307      	str	r3, [sp, #28]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2312      	movs	r3, #18
 8006f4c:	e7d0      	b.n	8006ef0 <_dtoa_r+0x238>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f52:	e7f5      	b.n	8006f40 <_dtoa_r+0x288>
 8006f54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	9307      	str	r3, [sp, #28]
 8006f5a:	e7d7      	b.n	8006f0c <_dtoa_r+0x254>
 8006f5c:	3101      	adds	r1, #1
 8006f5e:	0052      	lsls	r2, r2, #1
 8006f60:	e7d8      	b.n	8006f14 <_dtoa_r+0x25c>
 8006f62:	bf00      	nop
 8006f64:	f3af 8000 	nop.w
 8006f68:	636f4361 	.word	0x636f4361
 8006f6c:	3fd287a7 	.word	0x3fd287a7
 8006f70:	8b60c8b3 	.word	0x8b60c8b3
 8006f74:	3fc68a28 	.word	0x3fc68a28
 8006f78:	509f79fb 	.word	0x509f79fb
 8006f7c:	3fd34413 	.word	0x3fd34413
 8006f80:	08008bd5 	.word	0x08008bd5
 8006f84:	08008bec 	.word	0x08008bec
 8006f88:	7ff00000 	.word	0x7ff00000
 8006f8c:	08008ba5 	.word	0x08008ba5
 8006f90:	3ff80000 	.word	0x3ff80000
 8006f94:	08008ce8 	.word	0x08008ce8
 8006f98:	08008c44 	.word	0x08008c44
 8006f9c:	08008bd1 	.word	0x08008bd1
 8006fa0:	08008ba4 	.word	0x08008ba4
 8006fa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006fa8:	6018      	str	r0, [r3, #0]
 8006faa:	9b07      	ldr	r3, [sp, #28]
 8006fac:	2b0e      	cmp	r3, #14
 8006fae:	f200 80a4 	bhi.w	80070fa <_dtoa_r+0x442>
 8006fb2:	2c00      	cmp	r4, #0
 8006fb4:	f000 80a1 	beq.w	80070fa <_dtoa_r+0x442>
 8006fb8:	2f00      	cmp	r7, #0
 8006fba:	dd33      	ble.n	8007024 <_dtoa_r+0x36c>
 8006fbc:	4bad      	ldr	r3, [pc, #692]	@ (8007274 <_dtoa_r+0x5bc>)
 8006fbe:	f007 020f 	and.w	r2, r7, #15
 8006fc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fc6:	ed93 7b00 	vldr	d7, [r3]
 8006fca:	05f8      	lsls	r0, r7, #23
 8006fcc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006fd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006fd4:	d516      	bpl.n	8007004 <_dtoa_r+0x34c>
 8006fd6:	4ba8      	ldr	r3, [pc, #672]	@ (8007278 <_dtoa_r+0x5c0>)
 8006fd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fe0:	f7f9 fc54 	bl	800088c <__aeabi_ddiv>
 8006fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fe8:	f004 040f 	and.w	r4, r4, #15
 8006fec:	2603      	movs	r6, #3
 8006fee:	4da2      	ldr	r5, [pc, #648]	@ (8007278 <_dtoa_r+0x5c0>)
 8006ff0:	b954      	cbnz	r4, 8007008 <_dtoa_r+0x350>
 8006ff2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ffa:	f7f9 fc47 	bl	800088c <__aeabi_ddiv>
 8006ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007002:	e028      	b.n	8007056 <_dtoa_r+0x39e>
 8007004:	2602      	movs	r6, #2
 8007006:	e7f2      	b.n	8006fee <_dtoa_r+0x336>
 8007008:	07e1      	lsls	r1, r4, #31
 800700a:	d508      	bpl.n	800701e <_dtoa_r+0x366>
 800700c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007010:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007014:	f7f9 fb10 	bl	8000638 <__aeabi_dmul>
 8007018:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800701c:	3601      	adds	r6, #1
 800701e:	1064      	asrs	r4, r4, #1
 8007020:	3508      	adds	r5, #8
 8007022:	e7e5      	b.n	8006ff0 <_dtoa_r+0x338>
 8007024:	f000 80d2 	beq.w	80071cc <_dtoa_r+0x514>
 8007028:	427c      	negs	r4, r7
 800702a:	4b92      	ldr	r3, [pc, #584]	@ (8007274 <_dtoa_r+0x5bc>)
 800702c:	4d92      	ldr	r5, [pc, #584]	@ (8007278 <_dtoa_r+0x5c0>)
 800702e:	f004 020f 	and.w	r2, r4, #15
 8007032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800703e:	f7f9 fafb 	bl	8000638 <__aeabi_dmul>
 8007042:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007046:	1124      	asrs	r4, r4, #4
 8007048:	2300      	movs	r3, #0
 800704a:	2602      	movs	r6, #2
 800704c:	2c00      	cmp	r4, #0
 800704e:	f040 80b2 	bne.w	80071b6 <_dtoa_r+0x4fe>
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1d3      	bne.n	8006ffe <_dtoa_r+0x346>
 8007056:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007058:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 80b7 	beq.w	80071d0 <_dtoa_r+0x518>
 8007062:	4b86      	ldr	r3, [pc, #536]	@ (800727c <_dtoa_r+0x5c4>)
 8007064:	2200      	movs	r2, #0
 8007066:	4620      	mov	r0, r4
 8007068:	4629      	mov	r1, r5
 800706a:	f7f9 fd57 	bl	8000b1c <__aeabi_dcmplt>
 800706e:	2800      	cmp	r0, #0
 8007070:	f000 80ae 	beq.w	80071d0 <_dtoa_r+0x518>
 8007074:	9b07      	ldr	r3, [sp, #28]
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 80aa 	beq.w	80071d0 <_dtoa_r+0x518>
 800707c:	9b00      	ldr	r3, [sp, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	dd37      	ble.n	80070f2 <_dtoa_r+0x43a>
 8007082:	1e7b      	subs	r3, r7, #1
 8007084:	9304      	str	r3, [sp, #16]
 8007086:	4620      	mov	r0, r4
 8007088:	4b7d      	ldr	r3, [pc, #500]	@ (8007280 <_dtoa_r+0x5c8>)
 800708a:	2200      	movs	r2, #0
 800708c:	4629      	mov	r1, r5
 800708e:	f7f9 fad3 	bl	8000638 <__aeabi_dmul>
 8007092:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007096:	9c00      	ldr	r4, [sp, #0]
 8007098:	3601      	adds	r6, #1
 800709a:	4630      	mov	r0, r6
 800709c:	f7f9 fa62 	bl	8000564 <__aeabi_i2d>
 80070a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070a4:	f7f9 fac8 	bl	8000638 <__aeabi_dmul>
 80070a8:	4b76      	ldr	r3, [pc, #472]	@ (8007284 <_dtoa_r+0x5cc>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	f7f9 f90e 	bl	80002cc <__adddf3>
 80070b0:	4605      	mov	r5, r0
 80070b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80070b6:	2c00      	cmp	r4, #0
 80070b8:	f040 808d 	bne.w	80071d6 <_dtoa_r+0x51e>
 80070bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070c0:	4b71      	ldr	r3, [pc, #452]	@ (8007288 <_dtoa_r+0x5d0>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	f7f9 f900 	bl	80002c8 <__aeabi_dsub>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070d0:	462a      	mov	r2, r5
 80070d2:	4633      	mov	r3, r6
 80070d4:	f7f9 fd40 	bl	8000b58 <__aeabi_dcmpgt>
 80070d8:	2800      	cmp	r0, #0
 80070da:	f040 828b 	bne.w	80075f4 <_dtoa_r+0x93c>
 80070de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070e2:	462a      	mov	r2, r5
 80070e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80070e8:	f7f9 fd18 	bl	8000b1c <__aeabi_dcmplt>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	f040 8128 	bne.w	8007342 <_dtoa_r+0x68a>
 80070f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80070f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80070fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f2c0 815a 	blt.w	80073b6 <_dtoa_r+0x6fe>
 8007102:	2f0e      	cmp	r7, #14
 8007104:	f300 8157 	bgt.w	80073b6 <_dtoa_r+0x6fe>
 8007108:	4b5a      	ldr	r3, [pc, #360]	@ (8007274 <_dtoa_r+0x5bc>)
 800710a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800710e:	ed93 7b00 	vldr	d7, [r3]
 8007112:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007114:	2b00      	cmp	r3, #0
 8007116:	ed8d 7b00 	vstr	d7, [sp]
 800711a:	da03      	bge.n	8007124 <_dtoa_r+0x46c>
 800711c:	9b07      	ldr	r3, [sp, #28]
 800711e:	2b00      	cmp	r3, #0
 8007120:	f340 8101 	ble.w	8007326 <_dtoa_r+0x66e>
 8007124:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007128:	4656      	mov	r6, sl
 800712a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800712e:	4620      	mov	r0, r4
 8007130:	4629      	mov	r1, r5
 8007132:	f7f9 fbab 	bl	800088c <__aeabi_ddiv>
 8007136:	f7f9 fd2f 	bl	8000b98 <__aeabi_d2iz>
 800713a:	4680      	mov	r8, r0
 800713c:	f7f9 fa12 	bl	8000564 <__aeabi_i2d>
 8007140:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007144:	f7f9 fa78 	bl	8000638 <__aeabi_dmul>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	4620      	mov	r0, r4
 800714e:	4629      	mov	r1, r5
 8007150:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007154:	f7f9 f8b8 	bl	80002c8 <__aeabi_dsub>
 8007158:	f806 4b01 	strb.w	r4, [r6], #1
 800715c:	9d07      	ldr	r5, [sp, #28]
 800715e:	eba6 040a 	sub.w	r4, r6, sl
 8007162:	42a5      	cmp	r5, r4
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	f040 8117 	bne.w	800739a <_dtoa_r+0x6e2>
 800716c:	f7f9 f8ae 	bl	80002cc <__adddf3>
 8007170:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007174:	4604      	mov	r4, r0
 8007176:	460d      	mov	r5, r1
 8007178:	f7f9 fcee 	bl	8000b58 <__aeabi_dcmpgt>
 800717c:	2800      	cmp	r0, #0
 800717e:	f040 80f9 	bne.w	8007374 <_dtoa_r+0x6bc>
 8007182:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007186:	4620      	mov	r0, r4
 8007188:	4629      	mov	r1, r5
 800718a:	f7f9 fcbd 	bl	8000b08 <__aeabi_dcmpeq>
 800718e:	b118      	cbz	r0, 8007198 <_dtoa_r+0x4e0>
 8007190:	f018 0f01 	tst.w	r8, #1
 8007194:	f040 80ee 	bne.w	8007374 <_dtoa_r+0x6bc>
 8007198:	4649      	mov	r1, r9
 800719a:	4658      	mov	r0, fp
 800719c:	f000 fbda 	bl	8007954 <_Bfree>
 80071a0:	2300      	movs	r3, #0
 80071a2:	7033      	strb	r3, [r6, #0]
 80071a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80071a6:	3701      	adds	r7, #1
 80071a8:	601f      	str	r7, [r3, #0]
 80071aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 831d 	beq.w	80077ec <_dtoa_r+0xb34>
 80071b2:	601e      	str	r6, [r3, #0]
 80071b4:	e31a      	b.n	80077ec <_dtoa_r+0xb34>
 80071b6:	07e2      	lsls	r2, r4, #31
 80071b8:	d505      	bpl.n	80071c6 <_dtoa_r+0x50e>
 80071ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071be:	f7f9 fa3b 	bl	8000638 <__aeabi_dmul>
 80071c2:	3601      	adds	r6, #1
 80071c4:	2301      	movs	r3, #1
 80071c6:	1064      	asrs	r4, r4, #1
 80071c8:	3508      	adds	r5, #8
 80071ca:	e73f      	b.n	800704c <_dtoa_r+0x394>
 80071cc:	2602      	movs	r6, #2
 80071ce:	e742      	b.n	8007056 <_dtoa_r+0x39e>
 80071d0:	9c07      	ldr	r4, [sp, #28]
 80071d2:	9704      	str	r7, [sp, #16]
 80071d4:	e761      	b.n	800709a <_dtoa_r+0x3e2>
 80071d6:	4b27      	ldr	r3, [pc, #156]	@ (8007274 <_dtoa_r+0x5bc>)
 80071d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80071de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80071e2:	4454      	add	r4, sl
 80071e4:	2900      	cmp	r1, #0
 80071e6:	d053      	beq.n	8007290 <_dtoa_r+0x5d8>
 80071e8:	4928      	ldr	r1, [pc, #160]	@ (800728c <_dtoa_r+0x5d4>)
 80071ea:	2000      	movs	r0, #0
 80071ec:	f7f9 fb4e 	bl	800088c <__aeabi_ddiv>
 80071f0:	4633      	mov	r3, r6
 80071f2:	462a      	mov	r2, r5
 80071f4:	f7f9 f868 	bl	80002c8 <__aeabi_dsub>
 80071f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071fc:	4656      	mov	r6, sl
 80071fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007202:	f7f9 fcc9 	bl	8000b98 <__aeabi_d2iz>
 8007206:	4605      	mov	r5, r0
 8007208:	f7f9 f9ac 	bl	8000564 <__aeabi_i2d>
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007214:	f7f9 f858 	bl	80002c8 <__aeabi_dsub>
 8007218:	3530      	adds	r5, #48	@ 0x30
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007222:	f806 5b01 	strb.w	r5, [r6], #1
 8007226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800722a:	f7f9 fc77 	bl	8000b1c <__aeabi_dcmplt>
 800722e:	2800      	cmp	r0, #0
 8007230:	d171      	bne.n	8007316 <_dtoa_r+0x65e>
 8007232:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007236:	4911      	ldr	r1, [pc, #68]	@ (800727c <_dtoa_r+0x5c4>)
 8007238:	2000      	movs	r0, #0
 800723a:	f7f9 f845 	bl	80002c8 <__aeabi_dsub>
 800723e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007242:	f7f9 fc6b 	bl	8000b1c <__aeabi_dcmplt>
 8007246:	2800      	cmp	r0, #0
 8007248:	f040 8095 	bne.w	8007376 <_dtoa_r+0x6be>
 800724c:	42a6      	cmp	r6, r4
 800724e:	f43f af50 	beq.w	80070f2 <_dtoa_r+0x43a>
 8007252:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007256:	4b0a      	ldr	r3, [pc, #40]	@ (8007280 <_dtoa_r+0x5c8>)
 8007258:	2200      	movs	r2, #0
 800725a:	f7f9 f9ed 	bl	8000638 <__aeabi_dmul>
 800725e:	4b08      	ldr	r3, [pc, #32]	@ (8007280 <_dtoa_r+0x5c8>)
 8007260:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007264:	2200      	movs	r2, #0
 8007266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800726a:	f7f9 f9e5 	bl	8000638 <__aeabi_dmul>
 800726e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007272:	e7c4      	b.n	80071fe <_dtoa_r+0x546>
 8007274:	08008ce8 	.word	0x08008ce8
 8007278:	08008cc0 	.word	0x08008cc0
 800727c:	3ff00000 	.word	0x3ff00000
 8007280:	40240000 	.word	0x40240000
 8007284:	401c0000 	.word	0x401c0000
 8007288:	40140000 	.word	0x40140000
 800728c:	3fe00000 	.word	0x3fe00000
 8007290:	4631      	mov	r1, r6
 8007292:	4628      	mov	r0, r5
 8007294:	f7f9 f9d0 	bl	8000638 <__aeabi_dmul>
 8007298:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800729c:	9415      	str	r4, [sp, #84]	@ 0x54
 800729e:	4656      	mov	r6, sl
 80072a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072a4:	f7f9 fc78 	bl	8000b98 <__aeabi_d2iz>
 80072a8:	4605      	mov	r5, r0
 80072aa:	f7f9 f95b 	bl	8000564 <__aeabi_i2d>
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072b6:	f7f9 f807 	bl	80002c8 <__aeabi_dsub>
 80072ba:	3530      	adds	r5, #48	@ 0x30
 80072bc:	f806 5b01 	strb.w	r5, [r6], #1
 80072c0:	4602      	mov	r2, r0
 80072c2:	460b      	mov	r3, r1
 80072c4:	42a6      	cmp	r6, r4
 80072c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072ca:	f04f 0200 	mov.w	r2, #0
 80072ce:	d124      	bne.n	800731a <_dtoa_r+0x662>
 80072d0:	4bac      	ldr	r3, [pc, #688]	@ (8007584 <_dtoa_r+0x8cc>)
 80072d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80072d6:	f7f8 fff9 	bl	80002cc <__adddf3>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072e2:	f7f9 fc39 	bl	8000b58 <__aeabi_dcmpgt>
 80072e6:	2800      	cmp	r0, #0
 80072e8:	d145      	bne.n	8007376 <_dtoa_r+0x6be>
 80072ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80072ee:	49a5      	ldr	r1, [pc, #660]	@ (8007584 <_dtoa_r+0x8cc>)
 80072f0:	2000      	movs	r0, #0
 80072f2:	f7f8 ffe9 	bl	80002c8 <__aeabi_dsub>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072fe:	f7f9 fc0d 	bl	8000b1c <__aeabi_dcmplt>
 8007302:	2800      	cmp	r0, #0
 8007304:	f43f aef5 	beq.w	80070f2 <_dtoa_r+0x43a>
 8007308:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800730a:	1e73      	subs	r3, r6, #1
 800730c:	9315      	str	r3, [sp, #84]	@ 0x54
 800730e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007312:	2b30      	cmp	r3, #48	@ 0x30
 8007314:	d0f8      	beq.n	8007308 <_dtoa_r+0x650>
 8007316:	9f04      	ldr	r7, [sp, #16]
 8007318:	e73e      	b.n	8007198 <_dtoa_r+0x4e0>
 800731a:	4b9b      	ldr	r3, [pc, #620]	@ (8007588 <_dtoa_r+0x8d0>)
 800731c:	f7f9 f98c 	bl	8000638 <__aeabi_dmul>
 8007320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007324:	e7bc      	b.n	80072a0 <_dtoa_r+0x5e8>
 8007326:	d10c      	bne.n	8007342 <_dtoa_r+0x68a>
 8007328:	4b98      	ldr	r3, [pc, #608]	@ (800758c <_dtoa_r+0x8d4>)
 800732a:	2200      	movs	r2, #0
 800732c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007330:	f7f9 f982 	bl	8000638 <__aeabi_dmul>
 8007334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007338:	f7f9 fc04 	bl	8000b44 <__aeabi_dcmpge>
 800733c:	2800      	cmp	r0, #0
 800733e:	f000 8157 	beq.w	80075f0 <_dtoa_r+0x938>
 8007342:	2400      	movs	r4, #0
 8007344:	4625      	mov	r5, r4
 8007346:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007348:	43db      	mvns	r3, r3
 800734a:	9304      	str	r3, [sp, #16]
 800734c:	4656      	mov	r6, sl
 800734e:	2700      	movs	r7, #0
 8007350:	4621      	mov	r1, r4
 8007352:	4658      	mov	r0, fp
 8007354:	f000 fafe 	bl	8007954 <_Bfree>
 8007358:	2d00      	cmp	r5, #0
 800735a:	d0dc      	beq.n	8007316 <_dtoa_r+0x65e>
 800735c:	b12f      	cbz	r7, 800736a <_dtoa_r+0x6b2>
 800735e:	42af      	cmp	r7, r5
 8007360:	d003      	beq.n	800736a <_dtoa_r+0x6b2>
 8007362:	4639      	mov	r1, r7
 8007364:	4658      	mov	r0, fp
 8007366:	f000 faf5 	bl	8007954 <_Bfree>
 800736a:	4629      	mov	r1, r5
 800736c:	4658      	mov	r0, fp
 800736e:	f000 faf1 	bl	8007954 <_Bfree>
 8007372:	e7d0      	b.n	8007316 <_dtoa_r+0x65e>
 8007374:	9704      	str	r7, [sp, #16]
 8007376:	4633      	mov	r3, r6
 8007378:	461e      	mov	r6, r3
 800737a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800737e:	2a39      	cmp	r2, #57	@ 0x39
 8007380:	d107      	bne.n	8007392 <_dtoa_r+0x6da>
 8007382:	459a      	cmp	sl, r3
 8007384:	d1f8      	bne.n	8007378 <_dtoa_r+0x6c0>
 8007386:	9a04      	ldr	r2, [sp, #16]
 8007388:	3201      	adds	r2, #1
 800738a:	9204      	str	r2, [sp, #16]
 800738c:	2230      	movs	r2, #48	@ 0x30
 800738e:	f88a 2000 	strb.w	r2, [sl]
 8007392:	781a      	ldrb	r2, [r3, #0]
 8007394:	3201      	adds	r2, #1
 8007396:	701a      	strb	r2, [r3, #0]
 8007398:	e7bd      	b.n	8007316 <_dtoa_r+0x65e>
 800739a:	4b7b      	ldr	r3, [pc, #492]	@ (8007588 <_dtoa_r+0x8d0>)
 800739c:	2200      	movs	r2, #0
 800739e:	f7f9 f94b 	bl	8000638 <__aeabi_dmul>
 80073a2:	2200      	movs	r2, #0
 80073a4:	2300      	movs	r3, #0
 80073a6:	4604      	mov	r4, r0
 80073a8:	460d      	mov	r5, r1
 80073aa:	f7f9 fbad 	bl	8000b08 <__aeabi_dcmpeq>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	f43f aebb 	beq.w	800712a <_dtoa_r+0x472>
 80073b4:	e6f0      	b.n	8007198 <_dtoa_r+0x4e0>
 80073b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80073b8:	2a00      	cmp	r2, #0
 80073ba:	f000 80db 	beq.w	8007574 <_dtoa_r+0x8bc>
 80073be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073c0:	2a01      	cmp	r2, #1
 80073c2:	f300 80bf 	bgt.w	8007544 <_dtoa_r+0x88c>
 80073c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80073c8:	2a00      	cmp	r2, #0
 80073ca:	f000 80b7 	beq.w	800753c <_dtoa_r+0x884>
 80073ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80073d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80073d4:	4646      	mov	r6, r8
 80073d6:	9a08      	ldr	r2, [sp, #32]
 80073d8:	2101      	movs	r1, #1
 80073da:	441a      	add	r2, r3
 80073dc:	4658      	mov	r0, fp
 80073de:	4498      	add	r8, r3
 80073e0:	9208      	str	r2, [sp, #32]
 80073e2:	f000 fb6b 	bl	8007abc <__i2b>
 80073e6:	4605      	mov	r5, r0
 80073e8:	b15e      	cbz	r6, 8007402 <_dtoa_r+0x74a>
 80073ea:	9b08      	ldr	r3, [sp, #32]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	dd08      	ble.n	8007402 <_dtoa_r+0x74a>
 80073f0:	42b3      	cmp	r3, r6
 80073f2:	9a08      	ldr	r2, [sp, #32]
 80073f4:	bfa8      	it	ge
 80073f6:	4633      	movge	r3, r6
 80073f8:	eba8 0803 	sub.w	r8, r8, r3
 80073fc:	1af6      	subs	r6, r6, r3
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	9308      	str	r3, [sp, #32]
 8007402:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007404:	b1f3      	cbz	r3, 8007444 <_dtoa_r+0x78c>
 8007406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 80b7 	beq.w	800757c <_dtoa_r+0x8c4>
 800740e:	b18c      	cbz	r4, 8007434 <_dtoa_r+0x77c>
 8007410:	4629      	mov	r1, r5
 8007412:	4622      	mov	r2, r4
 8007414:	4658      	mov	r0, fp
 8007416:	f000 fc11 	bl	8007c3c <__pow5mult>
 800741a:	464a      	mov	r2, r9
 800741c:	4601      	mov	r1, r0
 800741e:	4605      	mov	r5, r0
 8007420:	4658      	mov	r0, fp
 8007422:	f000 fb61 	bl	8007ae8 <__multiply>
 8007426:	4649      	mov	r1, r9
 8007428:	9004      	str	r0, [sp, #16]
 800742a:	4658      	mov	r0, fp
 800742c:	f000 fa92 	bl	8007954 <_Bfree>
 8007430:	9b04      	ldr	r3, [sp, #16]
 8007432:	4699      	mov	r9, r3
 8007434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007436:	1b1a      	subs	r2, r3, r4
 8007438:	d004      	beq.n	8007444 <_dtoa_r+0x78c>
 800743a:	4649      	mov	r1, r9
 800743c:	4658      	mov	r0, fp
 800743e:	f000 fbfd 	bl	8007c3c <__pow5mult>
 8007442:	4681      	mov	r9, r0
 8007444:	2101      	movs	r1, #1
 8007446:	4658      	mov	r0, fp
 8007448:	f000 fb38 	bl	8007abc <__i2b>
 800744c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800744e:	4604      	mov	r4, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 81cf 	beq.w	80077f4 <_dtoa_r+0xb3c>
 8007456:	461a      	mov	r2, r3
 8007458:	4601      	mov	r1, r0
 800745a:	4658      	mov	r0, fp
 800745c:	f000 fbee 	bl	8007c3c <__pow5mult>
 8007460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007462:	2b01      	cmp	r3, #1
 8007464:	4604      	mov	r4, r0
 8007466:	f300 8095 	bgt.w	8007594 <_dtoa_r+0x8dc>
 800746a:	9b02      	ldr	r3, [sp, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	f040 8087 	bne.w	8007580 <_dtoa_r+0x8c8>
 8007472:	9b03      	ldr	r3, [sp, #12]
 8007474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007478:	2b00      	cmp	r3, #0
 800747a:	f040 8089 	bne.w	8007590 <_dtoa_r+0x8d8>
 800747e:	9b03      	ldr	r3, [sp, #12]
 8007480:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007484:	0d1b      	lsrs	r3, r3, #20
 8007486:	051b      	lsls	r3, r3, #20
 8007488:	b12b      	cbz	r3, 8007496 <_dtoa_r+0x7de>
 800748a:	9b08      	ldr	r3, [sp, #32]
 800748c:	3301      	adds	r3, #1
 800748e:	9308      	str	r3, [sp, #32]
 8007490:	f108 0801 	add.w	r8, r8, #1
 8007494:	2301      	movs	r3, #1
 8007496:	930a      	str	r3, [sp, #40]	@ 0x28
 8007498:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800749a:	2b00      	cmp	r3, #0
 800749c:	f000 81b0 	beq.w	8007800 <_dtoa_r+0xb48>
 80074a0:	6923      	ldr	r3, [r4, #16]
 80074a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074a6:	6918      	ldr	r0, [r3, #16]
 80074a8:	f000 fabc 	bl	8007a24 <__hi0bits>
 80074ac:	f1c0 0020 	rsb	r0, r0, #32
 80074b0:	9b08      	ldr	r3, [sp, #32]
 80074b2:	4418      	add	r0, r3
 80074b4:	f010 001f 	ands.w	r0, r0, #31
 80074b8:	d077      	beq.n	80075aa <_dtoa_r+0x8f2>
 80074ba:	f1c0 0320 	rsb	r3, r0, #32
 80074be:	2b04      	cmp	r3, #4
 80074c0:	dd6b      	ble.n	800759a <_dtoa_r+0x8e2>
 80074c2:	9b08      	ldr	r3, [sp, #32]
 80074c4:	f1c0 001c 	rsb	r0, r0, #28
 80074c8:	4403      	add	r3, r0
 80074ca:	4480      	add	r8, r0
 80074cc:	4406      	add	r6, r0
 80074ce:	9308      	str	r3, [sp, #32]
 80074d0:	f1b8 0f00 	cmp.w	r8, #0
 80074d4:	dd05      	ble.n	80074e2 <_dtoa_r+0x82a>
 80074d6:	4649      	mov	r1, r9
 80074d8:	4642      	mov	r2, r8
 80074da:	4658      	mov	r0, fp
 80074dc:	f000 fc08 	bl	8007cf0 <__lshift>
 80074e0:	4681      	mov	r9, r0
 80074e2:	9b08      	ldr	r3, [sp, #32]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	dd05      	ble.n	80074f4 <_dtoa_r+0x83c>
 80074e8:	4621      	mov	r1, r4
 80074ea:	461a      	mov	r2, r3
 80074ec:	4658      	mov	r0, fp
 80074ee:	f000 fbff 	bl	8007cf0 <__lshift>
 80074f2:	4604      	mov	r4, r0
 80074f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d059      	beq.n	80075ae <_dtoa_r+0x8f6>
 80074fa:	4621      	mov	r1, r4
 80074fc:	4648      	mov	r0, r9
 80074fe:	f000 fc63 	bl	8007dc8 <__mcmp>
 8007502:	2800      	cmp	r0, #0
 8007504:	da53      	bge.n	80075ae <_dtoa_r+0x8f6>
 8007506:	1e7b      	subs	r3, r7, #1
 8007508:	9304      	str	r3, [sp, #16]
 800750a:	4649      	mov	r1, r9
 800750c:	2300      	movs	r3, #0
 800750e:	220a      	movs	r2, #10
 8007510:	4658      	mov	r0, fp
 8007512:	f000 fa41 	bl	8007998 <__multadd>
 8007516:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007518:	4681      	mov	r9, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 8172 	beq.w	8007804 <_dtoa_r+0xb4c>
 8007520:	2300      	movs	r3, #0
 8007522:	4629      	mov	r1, r5
 8007524:	220a      	movs	r2, #10
 8007526:	4658      	mov	r0, fp
 8007528:	f000 fa36 	bl	8007998 <__multadd>
 800752c:	9b00      	ldr	r3, [sp, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	4605      	mov	r5, r0
 8007532:	dc67      	bgt.n	8007604 <_dtoa_r+0x94c>
 8007534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007536:	2b02      	cmp	r3, #2
 8007538:	dc41      	bgt.n	80075be <_dtoa_r+0x906>
 800753a:	e063      	b.n	8007604 <_dtoa_r+0x94c>
 800753c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800753e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007542:	e746      	b.n	80073d2 <_dtoa_r+0x71a>
 8007544:	9b07      	ldr	r3, [sp, #28]
 8007546:	1e5c      	subs	r4, r3, #1
 8007548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800754a:	42a3      	cmp	r3, r4
 800754c:	bfbf      	itttt	lt
 800754e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007550:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007552:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007554:	1ae3      	sublt	r3, r4, r3
 8007556:	bfb4      	ite	lt
 8007558:	18d2      	addlt	r2, r2, r3
 800755a:	1b1c      	subge	r4, r3, r4
 800755c:	9b07      	ldr	r3, [sp, #28]
 800755e:	bfbc      	itt	lt
 8007560:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007562:	2400      	movlt	r4, #0
 8007564:	2b00      	cmp	r3, #0
 8007566:	bfb5      	itete	lt
 8007568:	eba8 0603 	sublt.w	r6, r8, r3
 800756c:	9b07      	ldrge	r3, [sp, #28]
 800756e:	2300      	movlt	r3, #0
 8007570:	4646      	movge	r6, r8
 8007572:	e730      	b.n	80073d6 <_dtoa_r+0x71e>
 8007574:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007576:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007578:	4646      	mov	r6, r8
 800757a:	e735      	b.n	80073e8 <_dtoa_r+0x730>
 800757c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800757e:	e75c      	b.n	800743a <_dtoa_r+0x782>
 8007580:	2300      	movs	r3, #0
 8007582:	e788      	b.n	8007496 <_dtoa_r+0x7de>
 8007584:	3fe00000 	.word	0x3fe00000
 8007588:	40240000 	.word	0x40240000
 800758c:	40140000 	.word	0x40140000
 8007590:	9b02      	ldr	r3, [sp, #8]
 8007592:	e780      	b.n	8007496 <_dtoa_r+0x7de>
 8007594:	2300      	movs	r3, #0
 8007596:	930a      	str	r3, [sp, #40]	@ 0x28
 8007598:	e782      	b.n	80074a0 <_dtoa_r+0x7e8>
 800759a:	d099      	beq.n	80074d0 <_dtoa_r+0x818>
 800759c:	9a08      	ldr	r2, [sp, #32]
 800759e:	331c      	adds	r3, #28
 80075a0:	441a      	add	r2, r3
 80075a2:	4498      	add	r8, r3
 80075a4:	441e      	add	r6, r3
 80075a6:	9208      	str	r2, [sp, #32]
 80075a8:	e792      	b.n	80074d0 <_dtoa_r+0x818>
 80075aa:	4603      	mov	r3, r0
 80075ac:	e7f6      	b.n	800759c <_dtoa_r+0x8e4>
 80075ae:	9b07      	ldr	r3, [sp, #28]
 80075b0:	9704      	str	r7, [sp, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	dc20      	bgt.n	80075f8 <_dtoa_r+0x940>
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	dd1e      	ble.n	80075fc <_dtoa_r+0x944>
 80075be:	9b00      	ldr	r3, [sp, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f47f aec0 	bne.w	8007346 <_dtoa_r+0x68e>
 80075c6:	4621      	mov	r1, r4
 80075c8:	2205      	movs	r2, #5
 80075ca:	4658      	mov	r0, fp
 80075cc:	f000 f9e4 	bl	8007998 <__multadd>
 80075d0:	4601      	mov	r1, r0
 80075d2:	4604      	mov	r4, r0
 80075d4:	4648      	mov	r0, r9
 80075d6:	f000 fbf7 	bl	8007dc8 <__mcmp>
 80075da:	2800      	cmp	r0, #0
 80075dc:	f77f aeb3 	ble.w	8007346 <_dtoa_r+0x68e>
 80075e0:	4656      	mov	r6, sl
 80075e2:	2331      	movs	r3, #49	@ 0x31
 80075e4:	f806 3b01 	strb.w	r3, [r6], #1
 80075e8:	9b04      	ldr	r3, [sp, #16]
 80075ea:	3301      	adds	r3, #1
 80075ec:	9304      	str	r3, [sp, #16]
 80075ee:	e6ae      	b.n	800734e <_dtoa_r+0x696>
 80075f0:	9c07      	ldr	r4, [sp, #28]
 80075f2:	9704      	str	r7, [sp, #16]
 80075f4:	4625      	mov	r5, r4
 80075f6:	e7f3      	b.n	80075e0 <_dtoa_r+0x928>
 80075f8:	9b07      	ldr	r3, [sp, #28]
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f000 8104 	beq.w	800780c <_dtoa_r+0xb54>
 8007604:	2e00      	cmp	r6, #0
 8007606:	dd05      	ble.n	8007614 <_dtoa_r+0x95c>
 8007608:	4629      	mov	r1, r5
 800760a:	4632      	mov	r2, r6
 800760c:	4658      	mov	r0, fp
 800760e:	f000 fb6f 	bl	8007cf0 <__lshift>
 8007612:	4605      	mov	r5, r0
 8007614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007616:	2b00      	cmp	r3, #0
 8007618:	d05a      	beq.n	80076d0 <_dtoa_r+0xa18>
 800761a:	6869      	ldr	r1, [r5, #4]
 800761c:	4658      	mov	r0, fp
 800761e:	f000 f959 	bl	80078d4 <_Balloc>
 8007622:	4606      	mov	r6, r0
 8007624:	b928      	cbnz	r0, 8007632 <_dtoa_r+0x97a>
 8007626:	4b84      	ldr	r3, [pc, #528]	@ (8007838 <_dtoa_r+0xb80>)
 8007628:	4602      	mov	r2, r0
 800762a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800762e:	f7ff bb5a 	b.w	8006ce6 <_dtoa_r+0x2e>
 8007632:	692a      	ldr	r2, [r5, #16]
 8007634:	3202      	adds	r2, #2
 8007636:	0092      	lsls	r2, r2, #2
 8007638:	f105 010c 	add.w	r1, r5, #12
 800763c:	300c      	adds	r0, #12
 800763e:	f000 fee9 	bl	8008414 <memcpy>
 8007642:	2201      	movs	r2, #1
 8007644:	4631      	mov	r1, r6
 8007646:	4658      	mov	r0, fp
 8007648:	f000 fb52 	bl	8007cf0 <__lshift>
 800764c:	f10a 0301 	add.w	r3, sl, #1
 8007650:	9307      	str	r3, [sp, #28]
 8007652:	9b00      	ldr	r3, [sp, #0]
 8007654:	4453      	add	r3, sl
 8007656:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007658:	9b02      	ldr	r3, [sp, #8]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	462f      	mov	r7, r5
 8007660:	930a      	str	r3, [sp, #40]	@ 0x28
 8007662:	4605      	mov	r5, r0
 8007664:	9b07      	ldr	r3, [sp, #28]
 8007666:	4621      	mov	r1, r4
 8007668:	3b01      	subs	r3, #1
 800766a:	4648      	mov	r0, r9
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	f7ff fa98 	bl	8006ba2 <quorem>
 8007672:	4639      	mov	r1, r7
 8007674:	9002      	str	r0, [sp, #8]
 8007676:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800767a:	4648      	mov	r0, r9
 800767c:	f000 fba4 	bl	8007dc8 <__mcmp>
 8007680:	462a      	mov	r2, r5
 8007682:	9008      	str	r0, [sp, #32]
 8007684:	4621      	mov	r1, r4
 8007686:	4658      	mov	r0, fp
 8007688:	f000 fbba 	bl	8007e00 <__mdiff>
 800768c:	68c2      	ldr	r2, [r0, #12]
 800768e:	4606      	mov	r6, r0
 8007690:	bb02      	cbnz	r2, 80076d4 <_dtoa_r+0xa1c>
 8007692:	4601      	mov	r1, r0
 8007694:	4648      	mov	r0, r9
 8007696:	f000 fb97 	bl	8007dc8 <__mcmp>
 800769a:	4602      	mov	r2, r0
 800769c:	4631      	mov	r1, r6
 800769e:	4658      	mov	r0, fp
 80076a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80076a2:	f000 f957 	bl	8007954 <_Bfree>
 80076a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076aa:	9e07      	ldr	r6, [sp, #28]
 80076ac:	ea43 0102 	orr.w	r1, r3, r2
 80076b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076b2:	4319      	orrs	r1, r3
 80076b4:	d110      	bne.n	80076d8 <_dtoa_r+0xa20>
 80076b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076ba:	d029      	beq.n	8007710 <_dtoa_r+0xa58>
 80076bc:	9b08      	ldr	r3, [sp, #32]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	dd02      	ble.n	80076c8 <_dtoa_r+0xa10>
 80076c2:	9b02      	ldr	r3, [sp, #8]
 80076c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80076c8:	9b00      	ldr	r3, [sp, #0]
 80076ca:	f883 8000 	strb.w	r8, [r3]
 80076ce:	e63f      	b.n	8007350 <_dtoa_r+0x698>
 80076d0:	4628      	mov	r0, r5
 80076d2:	e7bb      	b.n	800764c <_dtoa_r+0x994>
 80076d4:	2201      	movs	r2, #1
 80076d6:	e7e1      	b.n	800769c <_dtoa_r+0x9e4>
 80076d8:	9b08      	ldr	r3, [sp, #32]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	db04      	blt.n	80076e8 <_dtoa_r+0xa30>
 80076de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076e0:	430b      	orrs	r3, r1
 80076e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076e4:	430b      	orrs	r3, r1
 80076e6:	d120      	bne.n	800772a <_dtoa_r+0xa72>
 80076e8:	2a00      	cmp	r2, #0
 80076ea:	dded      	ble.n	80076c8 <_dtoa_r+0xa10>
 80076ec:	4649      	mov	r1, r9
 80076ee:	2201      	movs	r2, #1
 80076f0:	4658      	mov	r0, fp
 80076f2:	f000 fafd 	bl	8007cf0 <__lshift>
 80076f6:	4621      	mov	r1, r4
 80076f8:	4681      	mov	r9, r0
 80076fa:	f000 fb65 	bl	8007dc8 <__mcmp>
 80076fe:	2800      	cmp	r0, #0
 8007700:	dc03      	bgt.n	800770a <_dtoa_r+0xa52>
 8007702:	d1e1      	bne.n	80076c8 <_dtoa_r+0xa10>
 8007704:	f018 0f01 	tst.w	r8, #1
 8007708:	d0de      	beq.n	80076c8 <_dtoa_r+0xa10>
 800770a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800770e:	d1d8      	bne.n	80076c2 <_dtoa_r+0xa0a>
 8007710:	9a00      	ldr	r2, [sp, #0]
 8007712:	2339      	movs	r3, #57	@ 0x39
 8007714:	7013      	strb	r3, [r2, #0]
 8007716:	4633      	mov	r3, r6
 8007718:	461e      	mov	r6, r3
 800771a:	3b01      	subs	r3, #1
 800771c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007720:	2a39      	cmp	r2, #57	@ 0x39
 8007722:	d052      	beq.n	80077ca <_dtoa_r+0xb12>
 8007724:	3201      	adds	r2, #1
 8007726:	701a      	strb	r2, [r3, #0]
 8007728:	e612      	b.n	8007350 <_dtoa_r+0x698>
 800772a:	2a00      	cmp	r2, #0
 800772c:	dd07      	ble.n	800773e <_dtoa_r+0xa86>
 800772e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007732:	d0ed      	beq.n	8007710 <_dtoa_r+0xa58>
 8007734:	9a00      	ldr	r2, [sp, #0]
 8007736:	f108 0301 	add.w	r3, r8, #1
 800773a:	7013      	strb	r3, [r2, #0]
 800773c:	e608      	b.n	8007350 <_dtoa_r+0x698>
 800773e:	9b07      	ldr	r3, [sp, #28]
 8007740:	9a07      	ldr	r2, [sp, #28]
 8007742:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007748:	4293      	cmp	r3, r2
 800774a:	d028      	beq.n	800779e <_dtoa_r+0xae6>
 800774c:	4649      	mov	r1, r9
 800774e:	2300      	movs	r3, #0
 8007750:	220a      	movs	r2, #10
 8007752:	4658      	mov	r0, fp
 8007754:	f000 f920 	bl	8007998 <__multadd>
 8007758:	42af      	cmp	r7, r5
 800775a:	4681      	mov	r9, r0
 800775c:	f04f 0300 	mov.w	r3, #0
 8007760:	f04f 020a 	mov.w	r2, #10
 8007764:	4639      	mov	r1, r7
 8007766:	4658      	mov	r0, fp
 8007768:	d107      	bne.n	800777a <_dtoa_r+0xac2>
 800776a:	f000 f915 	bl	8007998 <__multadd>
 800776e:	4607      	mov	r7, r0
 8007770:	4605      	mov	r5, r0
 8007772:	9b07      	ldr	r3, [sp, #28]
 8007774:	3301      	adds	r3, #1
 8007776:	9307      	str	r3, [sp, #28]
 8007778:	e774      	b.n	8007664 <_dtoa_r+0x9ac>
 800777a:	f000 f90d 	bl	8007998 <__multadd>
 800777e:	4629      	mov	r1, r5
 8007780:	4607      	mov	r7, r0
 8007782:	2300      	movs	r3, #0
 8007784:	220a      	movs	r2, #10
 8007786:	4658      	mov	r0, fp
 8007788:	f000 f906 	bl	8007998 <__multadd>
 800778c:	4605      	mov	r5, r0
 800778e:	e7f0      	b.n	8007772 <_dtoa_r+0xaba>
 8007790:	9b00      	ldr	r3, [sp, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	bfcc      	ite	gt
 8007796:	461e      	movgt	r6, r3
 8007798:	2601      	movle	r6, #1
 800779a:	4456      	add	r6, sl
 800779c:	2700      	movs	r7, #0
 800779e:	4649      	mov	r1, r9
 80077a0:	2201      	movs	r2, #1
 80077a2:	4658      	mov	r0, fp
 80077a4:	f000 faa4 	bl	8007cf0 <__lshift>
 80077a8:	4621      	mov	r1, r4
 80077aa:	4681      	mov	r9, r0
 80077ac:	f000 fb0c 	bl	8007dc8 <__mcmp>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	dcb0      	bgt.n	8007716 <_dtoa_r+0xa5e>
 80077b4:	d102      	bne.n	80077bc <_dtoa_r+0xb04>
 80077b6:	f018 0f01 	tst.w	r8, #1
 80077ba:	d1ac      	bne.n	8007716 <_dtoa_r+0xa5e>
 80077bc:	4633      	mov	r3, r6
 80077be:	461e      	mov	r6, r3
 80077c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077c4:	2a30      	cmp	r2, #48	@ 0x30
 80077c6:	d0fa      	beq.n	80077be <_dtoa_r+0xb06>
 80077c8:	e5c2      	b.n	8007350 <_dtoa_r+0x698>
 80077ca:	459a      	cmp	sl, r3
 80077cc:	d1a4      	bne.n	8007718 <_dtoa_r+0xa60>
 80077ce:	9b04      	ldr	r3, [sp, #16]
 80077d0:	3301      	adds	r3, #1
 80077d2:	9304      	str	r3, [sp, #16]
 80077d4:	2331      	movs	r3, #49	@ 0x31
 80077d6:	f88a 3000 	strb.w	r3, [sl]
 80077da:	e5b9      	b.n	8007350 <_dtoa_r+0x698>
 80077dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800783c <_dtoa_r+0xb84>
 80077e2:	b11b      	cbz	r3, 80077ec <_dtoa_r+0xb34>
 80077e4:	f10a 0308 	add.w	r3, sl, #8
 80077e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	4650      	mov	r0, sl
 80077ee:	b019      	add	sp, #100	@ 0x64
 80077f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	f77f ae37 	ble.w	800746a <_dtoa_r+0x7b2>
 80077fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007800:	2001      	movs	r0, #1
 8007802:	e655      	b.n	80074b0 <_dtoa_r+0x7f8>
 8007804:	9b00      	ldr	r3, [sp, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	f77f aed6 	ble.w	80075b8 <_dtoa_r+0x900>
 800780c:	4656      	mov	r6, sl
 800780e:	4621      	mov	r1, r4
 8007810:	4648      	mov	r0, r9
 8007812:	f7ff f9c6 	bl	8006ba2 <quorem>
 8007816:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800781a:	f806 8b01 	strb.w	r8, [r6], #1
 800781e:	9b00      	ldr	r3, [sp, #0]
 8007820:	eba6 020a 	sub.w	r2, r6, sl
 8007824:	4293      	cmp	r3, r2
 8007826:	ddb3      	ble.n	8007790 <_dtoa_r+0xad8>
 8007828:	4649      	mov	r1, r9
 800782a:	2300      	movs	r3, #0
 800782c:	220a      	movs	r2, #10
 800782e:	4658      	mov	r0, fp
 8007830:	f000 f8b2 	bl	8007998 <__multadd>
 8007834:	4681      	mov	r9, r0
 8007836:	e7ea      	b.n	800780e <_dtoa_r+0xb56>
 8007838:	08008c44 	.word	0x08008c44
 800783c:	08008bc8 	.word	0x08008bc8

08007840 <_free_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	4605      	mov	r5, r0
 8007844:	2900      	cmp	r1, #0
 8007846:	d041      	beq.n	80078cc <_free_r+0x8c>
 8007848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800784c:	1f0c      	subs	r4, r1, #4
 800784e:	2b00      	cmp	r3, #0
 8007850:	bfb8      	it	lt
 8007852:	18e4      	addlt	r4, r4, r3
 8007854:	f7fe fb78 	bl	8005f48 <__malloc_lock>
 8007858:	4a1d      	ldr	r2, [pc, #116]	@ (80078d0 <_free_r+0x90>)
 800785a:	6813      	ldr	r3, [r2, #0]
 800785c:	b933      	cbnz	r3, 800786c <_free_r+0x2c>
 800785e:	6063      	str	r3, [r4, #4]
 8007860:	6014      	str	r4, [r2, #0]
 8007862:	4628      	mov	r0, r5
 8007864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007868:	f7fe bb74 	b.w	8005f54 <__malloc_unlock>
 800786c:	42a3      	cmp	r3, r4
 800786e:	d908      	bls.n	8007882 <_free_r+0x42>
 8007870:	6820      	ldr	r0, [r4, #0]
 8007872:	1821      	adds	r1, r4, r0
 8007874:	428b      	cmp	r3, r1
 8007876:	bf01      	itttt	eq
 8007878:	6819      	ldreq	r1, [r3, #0]
 800787a:	685b      	ldreq	r3, [r3, #4]
 800787c:	1809      	addeq	r1, r1, r0
 800787e:	6021      	streq	r1, [r4, #0]
 8007880:	e7ed      	b.n	800785e <_free_r+0x1e>
 8007882:	461a      	mov	r2, r3
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	b10b      	cbz	r3, 800788c <_free_r+0x4c>
 8007888:	42a3      	cmp	r3, r4
 800788a:	d9fa      	bls.n	8007882 <_free_r+0x42>
 800788c:	6811      	ldr	r1, [r2, #0]
 800788e:	1850      	adds	r0, r2, r1
 8007890:	42a0      	cmp	r0, r4
 8007892:	d10b      	bne.n	80078ac <_free_r+0x6c>
 8007894:	6820      	ldr	r0, [r4, #0]
 8007896:	4401      	add	r1, r0
 8007898:	1850      	adds	r0, r2, r1
 800789a:	4283      	cmp	r3, r0
 800789c:	6011      	str	r1, [r2, #0]
 800789e:	d1e0      	bne.n	8007862 <_free_r+0x22>
 80078a0:	6818      	ldr	r0, [r3, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	6053      	str	r3, [r2, #4]
 80078a6:	4408      	add	r0, r1
 80078a8:	6010      	str	r0, [r2, #0]
 80078aa:	e7da      	b.n	8007862 <_free_r+0x22>
 80078ac:	d902      	bls.n	80078b4 <_free_r+0x74>
 80078ae:	230c      	movs	r3, #12
 80078b0:	602b      	str	r3, [r5, #0]
 80078b2:	e7d6      	b.n	8007862 <_free_r+0x22>
 80078b4:	6820      	ldr	r0, [r4, #0]
 80078b6:	1821      	adds	r1, r4, r0
 80078b8:	428b      	cmp	r3, r1
 80078ba:	bf04      	itt	eq
 80078bc:	6819      	ldreq	r1, [r3, #0]
 80078be:	685b      	ldreq	r3, [r3, #4]
 80078c0:	6063      	str	r3, [r4, #4]
 80078c2:	bf04      	itt	eq
 80078c4:	1809      	addeq	r1, r1, r0
 80078c6:	6021      	streq	r1, [r4, #0]
 80078c8:	6054      	str	r4, [r2, #4]
 80078ca:	e7ca      	b.n	8007862 <_free_r+0x22>
 80078cc:	bd38      	pop	{r3, r4, r5, pc}
 80078ce:	bf00      	nop
 80078d0:	20000524 	.word	0x20000524

080078d4 <_Balloc>:
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	69c6      	ldr	r6, [r0, #28]
 80078d8:	4604      	mov	r4, r0
 80078da:	460d      	mov	r5, r1
 80078dc:	b976      	cbnz	r6, 80078fc <_Balloc+0x28>
 80078de:	2010      	movs	r0, #16
 80078e0:	f7fe fa80 	bl	8005de4 <malloc>
 80078e4:	4602      	mov	r2, r0
 80078e6:	61e0      	str	r0, [r4, #28]
 80078e8:	b920      	cbnz	r0, 80078f4 <_Balloc+0x20>
 80078ea:	4b18      	ldr	r3, [pc, #96]	@ (800794c <_Balloc+0x78>)
 80078ec:	4818      	ldr	r0, [pc, #96]	@ (8007950 <_Balloc+0x7c>)
 80078ee:	216b      	movs	r1, #107	@ 0x6b
 80078f0:	f000 fd9e 	bl	8008430 <__assert_func>
 80078f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078f8:	6006      	str	r6, [r0, #0]
 80078fa:	60c6      	str	r6, [r0, #12]
 80078fc:	69e6      	ldr	r6, [r4, #28]
 80078fe:	68f3      	ldr	r3, [r6, #12]
 8007900:	b183      	cbz	r3, 8007924 <_Balloc+0x50>
 8007902:	69e3      	ldr	r3, [r4, #28]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800790a:	b9b8      	cbnz	r0, 800793c <_Balloc+0x68>
 800790c:	2101      	movs	r1, #1
 800790e:	fa01 f605 	lsl.w	r6, r1, r5
 8007912:	1d72      	adds	r2, r6, #5
 8007914:	0092      	lsls	r2, r2, #2
 8007916:	4620      	mov	r0, r4
 8007918:	f000 fda8 	bl	800846c <_calloc_r>
 800791c:	b160      	cbz	r0, 8007938 <_Balloc+0x64>
 800791e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007922:	e00e      	b.n	8007942 <_Balloc+0x6e>
 8007924:	2221      	movs	r2, #33	@ 0x21
 8007926:	2104      	movs	r1, #4
 8007928:	4620      	mov	r0, r4
 800792a:	f000 fd9f 	bl	800846c <_calloc_r>
 800792e:	69e3      	ldr	r3, [r4, #28]
 8007930:	60f0      	str	r0, [r6, #12]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e4      	bne.n	8007902 <_Balloc+0x2e>
 8007938:	2000      	movs	r0, #0
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	6802      	ldr	r2, [r0, #0]
 800793e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007942:	2300      	movs	r3, #0
 8007944:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007948:	e7f7      	b.n	800793a <_Balloc+0x66>
 800794a:	bf00      	nop
 800794c:	08008bd5 	.word	0x08008bd5
 8007950:	08008c55 	.word	0x08008c55

08007954 <_Bfree>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	69c6      	ldr	r6, [r0, #28]
 8007958:	4605      	mov	r5, r0
 800795a:	460c      	mov	r4, r1
 800795c:	b976      	cbnz	r6, 800797c <_Bfree+0x28>
 800795e:	2010      	movs	r0, #16
 8007960:	f7fe fa40 	bl	8005de4 <malloc>
 8007964:	4602      	mov	r2, r0
 8007966:	61e8      	str	r0, [r5, #28]
 8007968:	b920      	cbnz	r0, 8007974 <_Bfree+0x20>
 800796a:	4b09      	ldr	r3, [pc, #36]	@ (8007990 <_Bfree+0x3c>)
 800796c:	4809      	ldr	r0, [pc, #36]	@ (8007994 <_Bfree+0x40>)
 800796e:	218f      	movs	r1, #143	@ 0x8f
 8007970:	f000 fd5e 	bl	8008430 <__assert_func>
 8007974:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007978:	6006      	str	r6, [r0, #0]
 800797a:	60c6      	str	r6, [r0, #12]
 800797c:	b13c      	cbz	r4, 800798e <_Bfree+0x3a>
 800797e:	69eb      	ldr	r3, [r5, #28]
 8007980:	6862      	ldr	r2, [r4, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007988:	6021      	str	r1, [r4, #0]
 800798a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800798e:	bd70      	pop	{r4, r5, r6, pc}
 8007990:	08008bd5 	.word	0x08008bd5
 8007994:	08008c55 	.word	0x08008c55

08007998 <__multadd>:
 8007998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800799c:	690d      	ldr	r5, [r1, #16]
 800799e:	4607      	mov	r7, r0
 80079a0:	460c      	mov	r4, r1
 80079a2:	461e      	mov	r6, r3
 80079a4:	f101 0c14 	add.w	ip, r1, #20
 80079a8:	2000      	movs	r0, #0
 80079aa:	f8dc 3000 	ldr.w	r3, [ip]
 80079ae:	b299      	uxth	r1, r3
 80079b0:	fb02 6101 	mla	r1, r2, r1, r6
 80079b4:	0c1e      	lsrs	r6, r3, #16
 80079b6:	0c0b      	lsrs	r3, r1, #16
 80079b8:	fb02 3306 	mla	r3, r2, r6, r3
 80079bc:	b289      	uxth	r1, r1
 80079be:	3001      	adds	r0, #1
 80079c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079c4:	4285      	cmp	r5, r0
 80079c6:	f84c 1b04 	str.w	r1, [ip], #4
 80079ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079ce:	dcec      	bgt.n	80079aa <__multadd+0x12>
 80079d0:	b30e      	cbz	r6, 8007a16 <__multadd+0x7e>
 80079d2:	68a3      	ldr	r3, [r4, #8]
 80079d4:	42ab      	cmp	r3, r5
 80079d6:	dc19      	bgt.n	8007a0c <__multadd+0x74>
 80079d8:	6861      	ldr	r1, [r4, #4]
 80079da:	4638      	mov	r0, r7
 80079dc:	3101      	adds	r1, #1
 80079de:	f7ff ff79 	bl	80078d4 <_Balloc>
 80079e2:	4680      	mov	r8, r0
 80079e4:	b928      	cbnz	r0, 80079f2 <__multadd+0x5a>
 80079e6:	4602      	mov	r2, r0
 80079e8:	4b0c      	ldr	r3, [pc, #48]	@ (8007a1c <__multadd+0x84>)
 80079ea:	480d      	ldr	r0, [pc, #52]	@ (8007a20 <__multadd+0x88>)
 80079ec:	21ba      	movs	r1, #186	@ 0xba
 80079ee:	f000 fd1f 	bl	8008430 <__assert_func>
 80079f2:	6922      	ldr	r2, [r4, #16]
 80079f4:	3202      	adds	r2, #2
 80079f6:	f104 010c 	add.w	r1, r4, #12
 80079fa:	0092      	lsls	r2, r2, #2
 80079fc:	300c      	adds	r0, #12
 80079fe:	f000 fd09 	bl	8008414 <memcpy>
 8007a02:	4621      	mov	r1, r4
 8007a04:	4638      	mov	r0, r7
 8007a06:	f7ff ffa5 	bl	8007954 <_Bfree>
 8007a0a:	4644      	mov	r4, r8
 8007a0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a10:	3501      	adds	r5, #1
 8007a12:	615e      	str	r6, [r3, #20]
 8007a14:	6125      	str	r5, [r4, #16]
 8007a16:	4620      	mov	r0, r4
 8007a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a1c:	08008c44 	.word	0x08008c44
 8007a20:	08008c55 	.word	0x08008c55

08007a24 <__hi0bits>:
 8007a24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007a28:	4603      	mov	r3, r0
 8007a2a:	bf36      	itet	cc
 8007a2c:	0403      	lslcc	r3, r0, #16
 8007a2e:	2000      	movcs	r0, #0
 8007a30:	2010      	movcc	r0, #16
 8007a32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a36:	bf3c      	itt	cc
 8007a38:	021b      	lslcc	r3, r3, #8
 8007a3a:	3008      	addcc	r0, #8
 8007a3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a40:	bf3c      	itt	cc
 8007a42:	011b      	lslcc	r3, r3, #4
 8007a44:	3004      	addcc	r0, #4
 8007a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a4a:	bf3c      	itt	cc
 8007a4c:	009b      	lslcc	r3, r3, #2
 8007a4e:	3002      	addcc	r0, #2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	db05      	blt.n	8007a60 <__hi0bits+0x3c>
 8007a54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a58:	f100 0001 	add.w	r0, r0, #1
 8007a5c:	bf08      	it	eq
 8007a5e:	2020      	moveq	r0, #32
 8007a60:	4770      	bx	lr

08007a62 <__lo0bits>:
 8007a62:	6803      	ldr	r3, [r0, #0]
 8007a64:	4602      	mov	r2, r0
 8007a66:	f013 0007 	ands.w	r0, r3, #7
 8007a6a:	d00b      	beq.n	8007a84 <__lo0bits+0x22>
 8007a6c:	07d9      	lsls	r1, r3, #31
 8007a6e:	d421      	bmi.n	8007ab4 <__lo0bits+0x52>
 8007a70:	0798      	lsls	r0, r3, #30
 8007a72:	bf49      	itett	mi
 8007a74:	085b      	lsrmi	r3, r3, #1
 8007a76:	089b      	lsrpl	r3, r3, #2
 8007a78:	2001      	movmi	r0, #1
 8007a7a:	6013      	strmi	r3, [r2, #0]
 8007a7c:	bf5c      	itt	pl
 8007a7e:	6013      	strpl	r3, [r2, #0]
 8007a80:	2002      	movpl	r0, #2
 8007a82:	4770      	bx	lr
 8007a84:	b299      	uxth	r1, r3
 8007a86:	b909      	cbnz	r1, 8007a8c <__lo0bits+0x2a>
 8007a88:	0c1b      	lsrs	r3, r3, #16
 8007a8a:	2010      	movs	r0, #16
 8007a8c:	b2d9      	uxtb	r1, r3
 8007a8e:	b909      	cbnz	r1, 8007a94 <__lo0bits+0x32>
 8007a90:	3008      	adds	r0, #8
 8007a92:	0a1b      	lsrs	r3, r3, #8
 8007a94:	0719      	lsls	r1, r3, #28
 8007a96:	bf04      	itt	eq
 8007a98:	091b      	lsreq	r3, r3, #4
 8007a9a:	3004      	addeq	r0, #4
 8007a9c:	0799      	lsls	r1, r3, #30
 8007a9e:	bf04      	itt	eq
 8007aa0:	089b      	lsreq	r3, r3, #2
 8007aa2:	3002      	addeq	r0, #2
 8007aa4:	07d9      	lsls	r1, r3, #31
 8007aa6:	d403      	bmi.n	8007ab0 <__lo0bits+0x4e>
 8007aa8:	085b      	lsrs	r3, r3, #1
 8007aaa:	f100 0001 	add.w	r0, r0, #1
 8007aae:	d003      	beq.n	8007ab8 <__lo0bits+0x56>
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	4770      	bx	lr
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	4770      	bx	lr
 8007ab8:	2020      	movs	r0, #32
 8007aba:	4770      	bx	lr

08007abc <__i2b>:
 8007abc:	b510      	push	{r4, lr}
 8007abe:	460c      	mov	r4, r1
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	f7ff ff07 	bl	80078d4 <_Balloc>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	b928      	cbnz	r0, 8007ad6 <__i2b+0x1a>
 8007aca:	4b05      	ldr	r3, [pc, #20]	@ (8007ae0 <__i2b+0x24>)
 8007acc:	4805      	ldr	r0, [pc, #20]	@ (8007ae4 <__i2b+0x28>)
 8007ace:	f240 1145 	movw	r1, #325	@ 0x145
 8007ad2:	f000 fcad 	bl	8008430 <__assert_func>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	6144      	str	r4, [r0, #20]
 8007ada:	6103      	str	r3, [r0, #16]
 8007adc:	bd10      	pop	{r4, pc}
 8007ade:	bf00      	nop
 8007ae0:	08008c44 	.word	0x08008c44
 8007ae4:	08008c55 	.word	0x08008c55

08007ae8 <__multiply>:
 8007ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aec:	4614      	mov	r4, r2
 8007aee:	690a      	ldr	r2, [r1, #16]
 8007af0:	6923      	ldr	r3, [r4, #16]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	bfa8      	it	ge
 8007af6:	4623      	movge	r3, r4
 8007af8:	460f      	mov	r7, r1
 8007afa:	bfa4      	itt	ge
 8007afc:	460c      	movge	r4, r1
 8007afe:	461f      	movge	r7, r3
 8007b00:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007b04:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007b08:	68a3      	ldr	r3, [r4, #8]
 8007b0a:	6861      	ldr	r1, [r4, #4]
 8007b0c:	eb0a 0609 	add.w	r6, sl, r9
 8007b10:	42b3      	cmp	r3, r6
 8007b12:	b085      	sub	sp, #20
 8007b14:	bfb8      	it	lt
 8007b16:	3101      	addlt	r1, #1
 8007b18:	f7ff fedc 	bl	80078d4 <_Balloc>
 8007b1c:	b930      	cbnz	r0, 8007b2c <__multiply+0x44>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	4b44      	ldr	r3, [pc, #272]	@ (8007c34 <__multiply+0x14c>)
 8007b22:	4845      	ldr	r0, [pc, #276]	@ (8007c38 <__multiply+0x150>)
 8007b24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007b28:	f000 fc82 	bl	8008430 <__assert_func>
 8007b2c:	f100 0514 	add.w	r5, r0, #20
 8007b30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b34:	462b      	mov	r3, r5
 8007b36:	2200      	movs	r2, #0
 8007b38:	4543      	cmp	r3, r8
 8007b3a:	d321      	bcc.n	8007b80 <__multiply+0x98>
 8007b3c:	f107 0114 	add.w	r1, r7, #20
 8007b40:	f104 0214 	add.w	r2, r4, #20
 8007b44:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007b48:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007b4c:	9302      	str	r3, [sp, #8]
 8007b4e:	1b13      	subs	r3, r2, r4
 8007b50:	3b15      	subs	r3, #21
 8007b52:	f023 0303 	bic.w	r3, r3, #3
 8007b56:	3304      	adds	r3, #4
 8007b58:	f104 0715 	add.w	r7, r4, #21
 8007b5c:	42ba      	cmp	r2, r7
 8007b5e:	bf38      	it	cc
 8007b60:	2304      	movcc	r3, #4
 8007b62:	9301      	str	r3, [sp, #4]
 8007b64:	9b02      	ldr	r3, [sp, #8]
 8007b66:	9103      	str	r1, [sp, #12]
 8007b68:	428b      	cmp	r3, r1
 8007b6a:	d80c      	bhi.n	8007b86 <__multiply+0x9e>
 8007b6c:	2e00      	cmp	r6, #0
 8007b6e:	dd03      	ble.n	8007b78 <__multiply+0x90>
 8007b70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d05b      	beq.n	8007c30 <__multiply+0x148>
 8007b78:	6106      	str	r6, [r0, #16]
 8007b7a:	b005      	add	sp, #20
 8007b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b80:	f843 2b04 	str.w	r2, [r3], #4
 8007b84:	e7d8      	b.n	8007b38 <__multiply+0x50>
 8007b86:	f8b1 a000 	ldrh.w	sl, [r1]
 8007b8a:	f1ba 0f00 	cmp.w	sl, #0
 8007b8e:	d024      	beq.n	8007bda <__multiply+0xf2>
 8007b90:	f104 0e14 	add.w	lr, r4, #20
 8007b94:	46a9      	mov	r9, r5
 8007b96:	f04f 0c00 	mov.w	ip, #0
 8007b9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b9e:	f8d9 3000 	ldr.w	r3, [r9]
 8007ba2:	fa1f fb87 	uxth.w	fp, r7
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	fb0a 330b 	mla	r3, sl, fp, r3
 8007bac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007bb0:	f8d9 7000 	ldr.w	r7, [r9]
 8007bb4:	4463      	add	r3, ip
 8007bb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007bba:	fb0a c70b 	mla	r7, sl, fp, ip
 8007bbe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007bc8:	4572      	cmp	r2, lr
 8007bca:	f849 3b04 	str.w	r3, [r9], #4
 8007bce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007bd2:	d8e2      	bhi.n	8007b9a <__multiply+0xb2>
 8007bd4:	9b01      	ldr	r3, [sp, #4]
 8007bd6:	f845 c003 	str.w	ip, [r5, r3]
 8007bda:	9b03      	ldr	r3, [sp, #12]
 8007bdc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007be0:	3104      	adds	r1, #4
 8007be2:	f1b9 0f00 	cmp.w	r9, #0
 8007be6:	d021      	beq.n	8007c2c <__multiply+0x144>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	f104 0c14 	add.w	ip, r4, #20
 8007bee:	46ae      	mov	lr, r5
 8007bf0:	f04f 0a00 	mov.w	sl, #0
 8007bf4:	f8bc b000 	ldrh.w	fp, [ip]
 8007bf8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007bfc:	fb09 770b 	mla	r7, r9, fp, r7
 8007c00:	4457      	add	r7, sl
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007c08:	f84e 3b04 	str.w	r3, [lr], #4
 8007c0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007c10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c14:	f8be 3000 	ldrh.w	r3, [lr]
 8007c18:	fb09 330a 	mla	r3, r9, sl, r3
 8007c1c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007c20:	4562      	cmp	r2, ip
 8007c22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c26:	d8e5      	bhi.n	8007bf4 <__multiply+0x10c>
 8007c28:	9f01      	ldr	r7, [sp, #4]
 8007c2a:	51eb      	str	r3, [r5, r7]
 8007c2c:	3504      	adds	r5, #4
 8007c2e:	e799      	b.n	8007b64 <__multiply+0x7c>
 8007c30:	3e01      	subs	r6, #1
 8007c32:	e79b      	b.n	8007b6c <__multiply+0x84>
 8007c34:	08008c44 	.word	0x08008c44
 8007c38:	08008c55 	.word	0x08008c55

08007c3c <__pow5mult>:
 8007c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c40:	4615      	mov	r5, r2
 8007c42:	f012 0203 	ands.w	r2, r2, #3
 8007c46:	4607      	mov	r7, r0
 8007c48:	460e      	mov	r6, r1
 8007c4a:	d007      	beq.n	8007c5c <__pow5mult+0x20>
 8007c4c:	4c25      	ldr	r4, [pc, #148]	@ (8007ce4 <__pow5mult+0xa8>)
 8007c4e:	3a01      	subs	r2, #1
 8007c50:	2300      	movs	r3, #0
 8007c52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c56:	f7ff fe9f 	bl	8007998 <__multadd>
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	10ad      	asrs	r5, r5, #2
 8007c5e:	d03d      	beq.n	8007cdc <__pow5mult+0xa0>
 8007c60:	69fc      	ldr	r4, [r7, #28]
 8007c62:	b97c      	cbnz	r4, 8007c84 <__pow5mult+0x48>
 8007c64:	2010      	movs	r0, #16
 8007c66:	f7fe f8bd 	bl	8005de4 <malloc>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	61f8      	str	r0, [r7, #28]
 8007c6e:	b928      	cbnz	r0, 8007c7c <__pow5mult+0x40>
 8007c70:	4b1d      	ldr	r3, [pc, #116]	@ (8007ce8 <__pow5mult+0xac>)
 8007c72:	481e      	ldr	r0, [pc, #120]	@ (8007cec <__pow5mult+0xb0>)
 8007c74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007c78:	f000 fbda 	bl	8008430 <__assert_func>
 8007c7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c80:	6004      	str	r4, [r0, #0]
 8007c82:	60c4      	str	r4, [r0, #12]
 8007c84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007c88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c8c:	b94c      	cbnz	r4, 8007ca2 <__pow5mult+0x66>
 8007c8e:	f240 2171 	movw	r1, #625	@ 0x271
 8007c92:	4638      	mov	r0, r7
 8007c94:	f7ff ff12 	bl	8007abc <__i2b>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	6003      	str	r3, [r0, #0]
 8007ca2:	f04f 0900 	mov.w	r9, #0
 8007ca6:	07eb      	lsls	r3, r5, #31
 8007ca8:	d50a      	bpl.n	8007cc0 <__pow5mult+0x84>
 8007caa:	4631      	mov	r1, r6
 8007cac:	4622      	mov	r2, r4
 8007cae:	4638      	mov	r0, r7
 8007cb0:	f7ff ff1a 	bl	8007ae8 <__multiply>
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	4680      	mov	r8, r0
 8007cb8:	4638      	mov	r0, r7
 8007cba:	f7ff fe4b 	bl	8007954 <_Bfree>
 8007cbe:	4646      	mov	r6, r8
 8007cc0:	106d      	asrs	r5, r5, #1
 8007cc2:	d00b      	beq.n	8007cdc <__pow5mult+0xa0>
 8007cc4:	6820      	ldr	r0, [r4, #0]
 8007cc6:	b938      	cbnz	r0, 8007cd8 <__pow5mult+0x9c>
 8007cc8:	4622      	mov	r2, r4
 8007cca:	4621      	mov	r1, r4
 8007ccc:	4638      	mov	r0, r7
 8007cce:	f7ff ff0b 	bl	8007ae8 <__multiply>
 8007cd2:	6020      	str	r0, [r4, #0]
 8007cd4:	f8c0 9000 	str.w	r9, [r0]
 8007cd8:	4604      	mov	r4, r0
 8007cda:	e7e4      	b.n	8007ca6 <__pow5mult+0x6a>
 8007cdc:	4630      	mov	r0, r6
 8007cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ce2:	bf00      	nop
 8007ce4:	08008cb0 	.word	0x08008cb0
 8007ce8:	08008bd5 	.word	0x08008bd5
 8007cec:	08008c55 	.word	0x08008c55

08007cf0 <__lshift>:
 8007cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf4:	460c      	mov	r4, r1
 8007cf6:	6849      	ldr	r1, [r1, #4]
 8007cf8:	6923      	ldr	r3, [r4, #16]
 8007cfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cfe:	68a3      	ldr	r3, [r4, #8]
 8007d00:	4607      	mov	r7, r0
 8007d02:	4691      	mov	r9, r2
 8007d04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d08:	f108 0601 	add.w	r6, r8, #1
 8007d0c:	42b3      	cmp	r3, r6
 8007d0e:	db0b      	blt.n	8007d28 <__lshift+0x38>
 8007d10:	4638      	mov	r0, r7
 8007d12:	f7ff fddf 	bl	80078d4 <_Balloc>
 8007d16:	4605      	mov	r5, r0
 8007d18:	b948      	cbnz	r0, 8007d2e <__lshift+0x3e>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	4b28      	ldr	r3, [pc, #160]	@ (8007dc0 <__lshift+0xd0>)
 8007d1e:	4829      	ldr	r0, [pc, #164]	@ (8007dc4 <__lshift+0xd4>)
 8007d20:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007d24:	f000 fb84 	bl	8008430 <__assert_func>
 8007d28:	3101      	adds	r1, #1
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	e7ee      	b.n	8007d0c <__lshift+0x1c>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f100 0114 	add.w	r1, r0, #20
 8007d34:	f100 0210 	add.w	r2, r0, #16
 8007d38:	4618      	mov	r0, r3
 8007d3a:	4553      	cmp	r3, sl
 8007d3c:	db33      	blt.n	8007da6 <__lshift+0xb6>
 8007d3e:	6920      	ldr	r0, [r4, #16]
 8007d40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d44:	f104 0314 	add.w	r3, r4, #20
 8007d48:	f019 091f 	ands.w	r9, r9, #31
 8007d4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d54:	d02b      	beq.n	8007dae <__lshift+0xbe>
 8007d56:	f1c9 0e20 	rsb	lr, r9, #32
 8007d5a:	468a      	mov	sl, r1
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	6818      	ldr	r0, [r3, #0]
 8007d60:	fa00 f009 	lsl.w	r0, r0, r9
 8007d64:	4310      	orrs	r0, r2
 8007d66:	f84a 0b04 	str.w	r0, [sl], #4
 8007d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d6e:	459c      	cmp	ip, r3
 8007d70:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d74:	d8f3      	bhi.n	8007d5e <__lshift+0x6e>
 8007d76:	ebac 0304 	sub.w	r3, ip, r4
 8007d7a:	3b15      	subs	r3, #21
 8007d7c:	f023 0303 	bic.w	r3, r3, #3
 8007d80:	3304      	adds	r3, #4
 8007d82:	f104 0015 	add.w	r0, r4, #21
 8007d86:	4584      	cmp	ip, r0
 8007d88:	bf38      	it	cc
 8007d8a:	2304      	movcc	r3, #4
 8007d8c:	50ca      	str	r2, [r1, r3]
 8007d8e:	b10a      	cbz	r2, 8007d94 <__lshift+0xa4>
 8007d90:	f108 0602 	add.w	r6, r8, #2
 8007d94:	3e01      	subs	r6, #1
 8007d96:	4638      	mov	r0, r7
 8007d98:	612e      	str	r6, [r5, #16]
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	f7ff fdda 	bl	8007954 <_Bfree>
 8007da0:	4628      	mov	r0, r5
 8007da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007daa:	3301      	adds	r3, #1
 8007dac:	e7c5      	b.n	8007d3a <__lshift+0x4a>
 8007dae:	3904      	subs	r1, #4
 8007db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007db4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007db8:	459c      	cmp	ip, r3
 8007dba:	d8f9      	bhi.n	8007db0 <__lshift+0xc0>
 8007dbc:	e7ea      	b.n	8007d94 <__lshift+0xa4>
 8007dbe:	bf00      	nop
 8007dc0:	08008c44 	.word	0x08008c44
 8007dc4:	08008c55 	.word	0x08008c55

08007dc8 <__mcmp>:
 8007dc8:	690a      	ldr	r2, [r1, #16]
 8007dca:	4603      	mov	r3, r0
 8007dcc:	6900      	ldr	r0, [r0, #16]
 8007dce:	1a80      	subs	r0, r0, r2
 8007dd0:	b530      	push	{r4, r5, lr}
 8007dd2:	d10e      	bne.n	8007df2 <__mcmp+0x2a>
 8007dd4:	3314      	adds	r3, #20
 8007dd6:	3114      	adds	r1, #20
 8007dd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ddc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007de0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007de4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007de8:	4295      	cmp	r5, r2
 8007dea:	d003      	beq.n	8007df4 <__mcmp+0x2c>
 8007dec:	d205      	bcs.n	8007dfa <__mcmp+0x32>
 8007dee:	f04f 30ff 	mov.w	r0, #4294967295
 8007df2:	bd30      	pop	{r4, r5, pc}
 8007df4:	42a3      	cmp	r3, r4
 8007df6:	d3f3      	bcc.n	8007de0 <__mcmp+0x18>
 8007df8:	e7fb      	b.n	8007df2 <__mcmp+0x2a>
 8007dfa:	2001      	movs	r0, #1
 8007dfc:	e7f9      	b.n	8007df2 <__mcmp+0x2a>
	...

08007e00 <__mdiff>:
 8007e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e04:	4689      	mov	r9, r1
 8007e06:	4606      	mov	r6, r0
 8007e08:	4611      	mov	r1, r2
 8007e0a:	4648      	mov	r0, r9
 8007e0c:	4614      	mov	r4, r2
 8007e0e:	f7ff ffdb 	bl	8007dc8 <__mcmp>
 8007e12:	1e05      	subs	r5, r0, #0
 8007e14:	d112      	bne.n	8007e3c <__mdiff+0x3c>
 8007e16:	4629      	mov	r1, r5
 8007e18:	4630      	mov	r0, r6
 8007e1a:	f7ff fd5b 	bl	80078d4 <_Balloc>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	b928      	cbnz	r0, 8007e2e <__mdiff+0x2e>
 8007e22:	4b3f      	ldr	r3, [pc, #252]	@ (8007f20 <__mdiff+0x120>)
 8007e24:	f240 2137 	movw	r1, #567	@ 0x237
 8007e28:	483e      	ldr	r0, [pc, #248]	@ (8007f24 <__mdiff+0x124>)
 8007e2a:	f000 fb01 	bl	8008430 <__assert_func>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e34:	4610      	mov	r0, r2
 8007e36:	b003      	add	sp, #12
 8007e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3c:	bfbc      	itt	lt
 8007e3e:	464b      	movlt	r3, r9
 8007e40:	46a1      	movlt	r9, r4
 8007e42:	4630      	mov	r0, r6
 8007e44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e48:	bfba      	itte	lt
 8007e4a:	461c      	movlt	r4, r3
 8007e4c:	2501      	movlt	r5, #1
 8007e4e:	2500      	movge	r5, #0
 8007e50:	f7ff fd40 	bl	80078d4 <_Balloc>
 8007e54:	4602      	mov	r2, r0
 8007e56:	b918      	cbnz	r0, 8007e60 <__mdiff+0x60>
 8007e58:	4b31      	ldr	r3, [pc, #196]	@ (8007f20 <__mdiff+0x120>)
 8007e5a:	f240 2145 	movw	r1, #581	@ 0x245
 8007e5e:	e7e3      	b.n	8007e28 <__mdiff+0x28>
 8007e60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e64:	6926      	ldr	r6, [r4, #16]
 8007e66:	60c5      	str	r5, [r0, #12]
 8007e68:	f109 0310 	add.w	r3, r9, #16
 8007e6c:	f109 0514 	add.w	r5, r9, #20
 8007e70:	f104 0e14 	add.w	lr, r4, #20
 8007e74:	f100 0b14 	add.w	fp, r0, #20
 8007e78:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e7c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	46d9      	mov	r9, fp
 8007e84:	f04f 0c00 	mov.w	ip, #0
 8007e88:	9b01      	ldr	r3, [sp, #4]
 8007e8a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e8e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007e92:	9301      	str	r3, [sp, #4]
 8007e94:	fa1f f38a 	uxth.w	r3, sl
 8007e98:	4619      	mov	r1, r3
 8007e9a:	b283      	uxth	r3, r0
 8007e9c:	1acb      	subs	r3, r1, r3
 8007e9e:	0c00      	lsrs	r0, r0, #16
 8007ea0:	4463      	add	r3, ip
 8007ea2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007ea6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007eb0:	4576      	cmp	r6, lr
 8007eb2:	f849 3b04 	str.w	r3, [r9], #4
 8007eb6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007eba:	d8e5      	bhi.n	8007e88 <__mdiff+0x88>
 8007ebc:	1b33      	subs	r3, r6, r4
 8007ebe:	3b15      	subs	r3, #21
 8007ec0:	f023 0303 	bic.w	r3, r3, #3
 8007ec4:	3415      	adds	r4, #21
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	42a6      	cmp	r6, r4
 8007eca:	bf38      	it	cc
 8007ecc:	2304      	movcc	r3, #4
 8007ece:	441d      	add	r5, r3
 8007ed0:	445b      	add	r3, fp
 8007ed2:	461e      	mov	r6, r3
 8007ed4:	462c      	mov	r4, r5
 8007ed6:	4544      	cmp	r4, r8
 8007ed8:	d30e      	bcc.n	8007ef8 <__mdiff+0xf8>
 8007eda:	f108 0103 	add.w	r1, r8, #3
 8007ede:	1b49      	subs	r1, r1, r5
 8007ee0:	f021 0103 	bic.w	r1, r1, #3
 8007ee4:	3d03      	subs	r5, #3
 8007ee6:	45a8      	cmp	r8, r5
 8007ee8:	bf38      	it	cc
 8007eea:	2100      	movcc	r1, #0
 8007eec:	440b      	add	r3, r1
 8007eee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ef2:	b191      	cbz	r1, 8007f1a <__mdiff+0x11a>
 8007ef4:	6117      	str	r7, [r2, #16]
 8007ef6:	e79d      	b.n	8007e34 <__mdiff+0x34>
 8007ef8:	f854 1b04 	ldr.w	r1, [r4], #4
 8007efc:	46e6      	mov	lr, ip
 8007efe:	0c08      	lsrs	r0, r1, #16
 8007f00:	fa1c fc81 	uxtah	ip, ip, r1
 8007f04:	4471      	add	r1, lr
 8007f06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007f0a:	b289      	uxth	r1, r1
 8007f0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007f10:	f846 1b04 	str.w	r1, [r6], #4
 8007f14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f18:	e7dd      	b.n	8007ed6 <__mdiff+0xd6>
 8007f1a:	3f01      	subs	r7, #1
 8007f1c:	e7e7      	b.n	8007eee <__mdiff+0xee>
 8007f1e:	bf00      	nop
 8007f20:	08008c44 	.word	0x08008c44
 8007f24:	08008c55 	.word	0x08008c55

08007f28 <__d2b>:
 8007f28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f2c:	460f      	mov	r7, r1
 8007f2e:	2101      	movs	r1, #1
 8007f30:	ec59 8b10 	vmov	r8, r9, d0
 8007f34:	4616      	mov	r6, r2
 8007f36:	f7ff fccd 	bl	80078d4 <_Balloc>
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	b930      	cbnz	r0, 8007f4c <__d2b+0x24>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	4b23      	ldr	r3, [pc, #140]	@ (8007fd0 <__d2b+0xa8>)
 8007f42:	4824      	ldr	r0, [pc, #144]	@ (8007fd4 <__d2b+0xac>)
 8007f44:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f48:	f000 fa72 	bl	8008430 <__assert_func>
 8007f4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f54:	b10d      	cbz	r5, 8007f5a <__d2b+0x32>
 8007f56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f5a:	9301      	str	r3, [sp, #4]
 8007f5c:	f1b8 0300 	subs.w	r3, r8, #0
 8007f60:	d023      	beq.n	8007faa <__d2b+0x82>
 8007f62:	4668      	mov	r0, sp
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	f7ff fd7c 	bl	8007a62 <__lo0bits>
 8007f6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f6e:	b1d0      	cbz	r0, 8007fa6 <__d2b+0x7e>
 8007f70:	f1c0 0320 	rsb	r3, r0, #32
 8007f74:	fa02 f303 	lsl.w	r3, r2, r3
 8007f78:	430b      	orrs	r3, r1
 8007f7a:	40c2      	lsrs	r2, r0
 8007f7c:	6163      	str	r3, [r4, #20]
 8007f7e:	9201      	str	r2, [sp, #4]
 8007f80:	9b01      	ldr	r3, [sp, #4]
 8007f82:	61a3      	str	r3, [r4, #24]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	bf0c      	ite	eq
 8007f88:	2201      	moveq	r2, #1
 8007f8a:	2202      	movne	r2, #2
 8007f8c:	6122      	str	r2, [r4, #16]
 8007f8e:	b1a5      	cbz	r5, 8007fba <__d2b+0x92>
 8007f90:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007f94:	4405      	add	r5, r0
 8007f96:	603d      	str	r5, [r7, #0]
 8007f98:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007f9c:	6030      	str	r0, [r6, #0]
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	b003      	add	sp, #12
 8007fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fa6:	6161      	str	r1, [r4, #20]
 8007fa8:	e7ea      	b.n	8007f80 <__d2b+0x58>
 8007faa:	a801      	add	r0, sp, #4
 8007fac:	f7ff fd59 	bl	8007a62 <__lo0bits>
 8007fb0:	9b01      	ldr	r3, [sp, #4]
 8007fb2:	6163      	str	r3, [r4, #20]
 8007fb4:	3020      	adds	r0, #32
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	e7e8      	b.n	8007f8c <__d2b+0x64>
 8007fba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fbe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007fc2:	6038      	str	r0, [r7, #0]
 8007fc4:	6918      	ldr	r0, [r3, #16]
 8007fc6:	f7ff fd2d 	bl	8007a24 <__hi0bits>
 8007fca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fce:	e7e5      	b.n	8007f9c <__d2b+0x74>
 8007fd0:	08008c44 	.word	0x08008c44
 8007fd4:	08008c55 	.word	0x08008c55

08007fd8 <__ssputs_r>:
 8007fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fdc:	688e      	ldr	r6, [r1, #8]
 8007fde:	461f      	mov	r7, r3
 8007fe0:	42be      	cmp	r6, r7
 8007fe2:	680b      	ldr	r3, [r1, #0]
 8007fe4:	4682      	mov	sl, r0
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	4690      	mov	r8, r2
 8007fea:	d82d      	bhi.n	8008048 <__ssputs_r+0x70>
 8007fec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ff0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ff4:	d026      	beq.n	8008044 <__ssputs_r+0x6c>
 8007ff6:	6965      	ldr	r5, [r4, #20]
 8007ff8:	6909      	ldr	r1, [r1, #16]
 8007ffa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ffe:	eba3 0901 	sub.w	r9, r3, r1
 8008002:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008006:	1c7b      	adds	r3, r7, #1
 8008008:	444b      	add	r3, r9
 800800a:	106d      	asrs	r5, r5, #1
 800800c:	429d      	cmp	r5, r3
 800800e:	bf38      	it	cc
 8008010:	461d      	movcc	r5, r3
 8008012:	0553      	lsls	r3, r2, #21
 8008014:	d527      	bpl.n	8008066 <__ssputs_r+0x8e>
 8008016:	4629      	mov	r1, r5
 8008018:	f7fd ff16 	bl	8005e48 <_malloc_r>
 800801c:	4606      	mov	r6, r0
 800801e:	b360      	cbz	r0, 800807a <__ssputs_r+0xa2>
 8008020:	6921      	ldr	r1, [r4, #16]
 8008022:	464a      	mov	r2, r9
 8008024:	f000 f9f6 	bl	8008414 <memcpy>
 8008028:	89a3      	ldrh	r3, [r4, #12]
 800802a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800802e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008032:	81a3      	strh	r3, [r4, #12]
 8008034:	6126      	str	r6, [r4, #16]
 8008036:	6165      	str	r5, [r4, #20]
 8008038:	444e      	add	r6, r9
 800803a:	eba5 0509 	sub.w	r5, r5, r9
 800803e:	6026      	str	r6, [r4, #0]
 8008040:	60a5      	str	r5, [r4, #8]
 8008042:	463e      	mov	r6, r7
 8008044:	42be      	cmp	r6, r7
 8008046:	d900      	bls.n	800804a <__ssputs_r+0x72>
 8008048:	463e      	mov	r6, r7
 800804a:	6820      	ldr	r0, [r4, #0]
 800804c:	4632      	mov	r2, r6
 800804e:	4641      	mov	r1, r8
 8008050:	f000 f9c6 	bl	80083e0 <memmove>
 8008054:	68a3      	ldr	r3, [r4, #8]
 8008056:	1b9b      	subs	r3, r3, r6
 8008058:	60a3      	str	r3, [r4, #8]
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	4433      	add	r3, r6
 800805e:	6023      	str	r3, [r4, #0]
 8008060:	2000      	movs	r0, #0
 8008062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008066:	462a      	mov	r2, r5
 8008068:	f000 fa26 	bl	80084b8 <_realloc_r>
 800806c:	4606      	mov	r6, r0
 800806e:	2800      	cmp	r0, #0
 8008070:	d1e0      	bne.n	8008034 <__ssputs_r+0x5c>
 8008072:	6921      	ldr	r1, [r4, #16]
 8008074:	4650      	mov	r0, sl
 8008076:	f7ff fbe3 	bl	8007840 <_free_r>
 800807a:	230c      	movs	r3, #12
 800807c:	f8ca 3000 	str.w	r3, [sl]
 8008080:	89a3      	ldrh	r3, [r4, #12]
 8008082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008086:	81a3      	strh	r3, [r4, #12]
 8008088:	f04f 30ff 	mov.w	r0, #4294967295
 800808c:	e7e9      	b.n	8008062 <__ssputs_r+0x8a>
	...

08008090 <_svfiprintf_r>:
 8008090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008094:	4698      	mov	r8, r3
 8008096:	898b      	ldrh	r3, [r1, #12]
 8008098:	061b      	lsls	r3, r3, #24
 800809a:	b09d      	sub	sp, #116	@ 0x74
 800809c:	4607      	mov	r7, r0
 800809e:	460d      	mov	r5, r1
 80080a0:	4614      	mov	r4, r2
 80080a2:	d510      	bpl.n	80080c6 <_svfiprintf_r+0x36>
 80080a4:	690b      	ldr	r3, [r1, #16]
 80080a6:	b973      	cbnz	r3, 80080c6 <_svfiprintf_r+0x36>
 80080a8:	2140      	movs	r1, #64	@ 0x40
 80080aa:	f7fd fecd 	bl	8005e48 <_malloc_r>
 80080ae:	6028      	str	r0, [r5, #0]
 80080b0:	6128      	str	r0, [r5, #16]
 80080b2:	b930      	cbnz	r0, 80080c2 <_svfiprintf_r+0x32>
 80080b4:	230c      	movs	r3, #12
 80080b6:	603b      	str	r3, [r7, #0]
 80080b8:	f04f 30ff 	mov.w	r0, #4294967295
 80080bc:	b01d      	add	sp, #116	@ 0x74
 80080be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c2:	2340      	movs	r3, #64	@ 0x40
 80080c4:	616b      	str	r3, [r5, #20]
 80080c6:	2300      	movs	r3, #0
 80080c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80080ca:	2320      	movs	r3, #32
 80080cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80080d4:	2330      	movs	r3, #48	@ 0x30
 80080d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008274 <_svfiprintf_r+0x1e4>
 80080da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080de:	f04f 0901 	mov.w	r9, #1
 80080e2:	4623      	mov	r3, r4
 80080e4:	469a      	mov	sl, r3
 80080e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080ea:	b10a      	cbz	r2, 80080f0 <_svfiprintf_r+0x60>
 80080ec:	2a25      	cmp	r2, #37	@ 0x25
 80080ee:	d1f9      	bne.n	80080e4 <_svfiprintf_r+0x54>
 80080f0:	ebba 0b04 	subs.w	fp, sl, r4
 80080f4:	d00b      	beq.n	800810e <_svfiprintf_r+0x7e>
 80080f6:	465b      	mov	r3, fp
 80080f8:	4622      	mov	r2, r4
 80080fa:	4629      	mov	r1, r5
 80080fc:	4638      	mov	r0, r7
 80080fe:	f7ff ff6b 	bl	8007fd8 <__ssputs_r>
 8008102:	3001      	adds	r0, #1
 8008104:	f000 80a7 	beq.w	8008256 <_svfiprintf_r+0x1c6>
 8008108:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800810a:	445a      	add	r2, fp
 800810c:	9209      	str	r2, [sp, #36]	@ 0x24
 800810e:	f89a 3000 	ldrb.w	r3, [sl]
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 809f 	beq.w	8008256 <_svfiprintf_r+0x1c6>
 8008118:	2300      	movs	r3, #0
 800811a:	f04f 32ff 	mov.w	r2, #4294967295
 800811e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008122:	f10a 0a01 	add.w	sl, sl, #1
 8008126:	9304      	str	r3, [sp, #16]
 8008128:	9307      	str	r3, [sp, #28]
 800812a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800812e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008130:	4654      	mov	r4, sl
 8008132:	2205      	movs	r2, #5
 8008134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008138:	484e      	ldr	r0, [pc, #312]	@ (8008274 <_svfiprintf_r+0x1e4>)
 800813a:	f7f8 f869 	bl	8000210 <memchr>
 800813e:	9a04      	ldr	r2, [sp, #16]
 8008140:	b9d8      	cbnz	r0, 800817a <_svfiprintf_r+0xea>
 8008142:	06d0      	lsls	r0, r2, #27
 8008144:	bf44      	itt	mi
 8008146:	2320      	movmi	r3, #32
 8008148:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800814c:	0711      	lsls	r1, r2, #28
 800814e:	bf44      	itt	mi
 8008150:	232b      	movmi	r3, #43	@ 0x2b
 8008152:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008156:	f89a 3000 	ldrb.w	r3, [sl]
 800815a:	2b2a      	cmp	r3, #42	@ 0x2a
 800815c:	d015      	beq.n	800818a <_svfiprintf_r+0xfa>
 800815e:	9a07      	ldr	r2, [sp, #28]
 8008160:	4654      	mov	r4, sl
 8008162:	2000      	movs	r0, #0
 8008164:	f04f 0c0a 	mov.w	ip, #10
 8008168:	4621      	mov	r1, r4
 800816a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800816e:	3b30      	subs	r3, #48	@ 0x30
 8008170:	2b09      	cmp	r3, #9
 8008172:	d94b      	bls.n	800820c <_svfiprintf_r+0x17c>
 8008174:	b1b0      	cbz	r0, 80081a4 <_svfiprintf_r+0x114>
 8008176:	9207      	str	r2, [sp, #28]
 8008178:	e014      	b.n	80081a4 <_svfiprintf_r+0x114>
 800817a:	eba0 0308 	sub.w	r3, r0, r8
 800817e:	fa09 f303 	lsl.w	r3, r9, r3
 8008182:	4313      	orrs	r3, r2
 8008184:	9304      	str	r3, [sp, #16]
 8008186:	46a2      	mov	sl, r4
 8008188:	e7d2      	b.n	8008130 <_svfiprintf_r+0xa0>
 800818a:	9b03      	ldr	r3, [sp, #12]
 800818c:	1d19      	adds	r1, r3, #4
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	9103      	str	r1, [sp, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	bfbb      	ittet	lt
 8008196:	425b      	neglt	r3, r3
 8008198:	f042 0202 	orrlt.w	r2, r2, #2
 800819c:	9307      	strge	r3, [sp, #28]
 800819e:	9307      	strlt	r3, [sp, #28]
 80081a0:	bfb8      	it	lt
 80081a2:	9204      	strlt	r2, [sp, #16]
 80081a4:	7823      	ldrb	r3, [r4, #0]
 80081a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80081a8:	d10a      	bne.n	80081c0 <_svfiprintf_r+0x130>
 80081aa:	7863      	ldrb	r3, [r4, #1]
 80081ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80081ae:	d132      	bne.n	8008216 <_svfiprintf_r+0x186>
 80081b0:	9b03      	ldr	r3, [sp, #12]
 80081b2:	1d1a      	adds	r2, r3, #4
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	9203      	str	r2, [sp, #12]
 80081b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081bc:	3402      	adds	r4, #2
 80081be:	9305      	str	r3, [sp, #20]
 80081c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008284 <_svfiprintf_r+0x1f4>
 80081c4:	7821      	ldrb	r1, [r4, #0]
 80081c6:	2203      	movs	r2, #3
 80081c8:	4650      	mov	r0, sl
 80081ca:	f7f8 f821 	bl	8000210 <memchr>
 80081ce:	b138      	cbz	r0, 80081e0 <_svfiprintf_r+0x150>
 80081d0:	9b04      	ldr	r3, [sp, #16]
 80081d2:	eba0 000a 	sub.w	r0, r0, sl
 80081d6:	2240      	movs	r2, #64	@ 0x40
 80081d8:	4082      	lsls	r2, r0
 80081da:	4313      	orrs	r3, r2
 80081dc:	3401      	adds	r4, #1
 80081de:	9304      	str	r3, [sp, #16]
 80081e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e4:	4824      	ldr	r0, [pc, #144]	@ (8008278 <_svfiprintf_r+0x1e8>)
 80081e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081ea:	2206      	movs	r2, #6
 80081ec:	f7f8 f810 	bl	8000210 <memchr>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d036      	beq.n	8008262 <_svfiprintf_r+0x1d2>
 80081f4:	4b21      	ldr	r3, [pc, #132]	@ (800827c <_svfiprintf_r+0x1ec>)
 80081f6:	bb1b      	cbnz	r3, 8008240 <_svfiprintf_r+0x1b0>
 80081f8:	9b03      	ldr	r3, [sp, #12]
 80081fa:	3307      	adds	r3, #7
 80081fc:	f023 0307 	bic.w	r3, r3, #7
 8008200:	3308      	adds	r3, #8
 8008202:	9303      	str	r3, [sp, #12]
 8008204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008206:	4433      	add	r3, r6
 8008208:	9309      	str	r3, [sp, #36]	@ 0x24
 800820a:	e76a      	b.n	80080e2 <_svfiprintf_r+0x52>
 800820c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008210:	460c      	mov	r4, r1
 8008212:	2001      	movs	r0, #1
 8008214:	e7a8      	b.n	8008168 <_svfiprintf_r+0xd8>
 8008216:	2300      	movs	r3, #0
 8008218:	3401      	adds	r4, #1
 800821a:	9305      	str	r3, [sp, #20]
 800821c:	4619      	mov	r1, r3
 800821e:	f04f 0c0a 	mov.w	ip, #10
 8008222:	4620      	mov	r0, r4
 8008224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008228:	3a30      	subs	r2, #48	@ 0x30
 800822a:	2a09      	cmp	r2, #9
 800822c:	d903      	bls.n	8008236 <_svfiprintf_r+0x1a6>
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0c6      	beq.n	80081c0 <_svfiprintf_r+0x130>
 8008232:	9105      	str	r1, [sp, #20]
 8008234:	e7c4      	b.n	80081c0 <_svfiprintf_r+0x130>
 8008236:	fb0c 2101 	mla	r1, ip, r1, r2
 800823a:	4604      	mov	r4, r0
 800823c:	2301      	movs	r3, #1
 800823e:	e7f0      	b.n	8008222 <_svfiprintf_r+0x192>
 8008240:	ab03      	add	r3, sp, #12
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	462a      	mov	r2, r5
 8008246:	4b0e      	ldr	r3, [pc, #56]	@ (8008280 <_svfiprintf_r+0x1f0>)
 8008248:	a904      	add	r1, sp, #16
 800824a:	4638      	mov	r0, r7
 800824c:	f7fd ff28 	bl	80060a0 <_printf_float>
 8008250:	1c42      	adds	r2, r0, #1
 8008252:	4606      	mov	r6, r0
 8008254:	d1d6      	bne.n	8008204 <_svfiprintf_r+0x174>
 8008256:	89ab      	ldrh	r3, [r5, #12]
 8008258:	065b      	lsls	r3, r3, #25
 800825a:	f53f af2d 	bmi.w	80080b8 <_svfiprintf_r+0x28>
 800825e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008260:	e72c      	b.n	80080bc <_svfiprintf_r+0x2c>
 8008262:	ab03      	add	r3, sp, #12
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	462a      	mov	r2, r5
 8008268:	4b05      	ldr	r3, [pc, #20]	@ (8008280 <_svfiprintf_r+0x1f0>)
 800826a:	a904      	add	r1, sp, #16
 800826c:	4638      	mov	r0, r7
 800826e:	f7fe f9af 	bl	80065d0 <_printf_i>
 8008272:	e7ed      	b.n	8008250 <_svfiprintf_r+0x1c0>
 8008274:	08008db0 	.word	0x08008db0
 8008278:	08008dba 	.word	0x08008dba
 800827c:	080060a1 	.word	0x080060a1
 8008280:	08007fd9 	.word	0x08007fd9
 8008284:	08008db6 	.word	0x08008db6

08008288 <__sflush_r>:
 8008288:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800828c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008290:	0716      	lsls	r6, r2, #28
 8008292:	4605      	mov	r5, r0
 8008294:	460c      	mov	r4, r1
 8008296:	d454      	bmi.n	8008342 <__sflush_r+0xba>
 8008298:	684b      	ldr	r3, [r1, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	dc02      	bgt.n	80082a4 <__sflush_r+0x1c>
 800829e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	dd48      	ble.n	8008336 <__sflush_r+0xae>
 80082a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082a6:	2e00      	cmp	r6, #0
 80082a8:	d045      	beq.n	8008336 <__sflush_r+0xae>
 80082aa:	2300      	movs	r3, #0
 80082ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80082b0:	682f      	ldr	r7, [r5, #0]
 80082b2:	6a21      	ldr	r1, [r4, #32]
 80082b4:	602b      	str	r3, [r5, #0]
 80082b6:	d030      	beq.n	800831a <__sflush_r+0x92>
 80082b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	0759      	lsls	r1, r3, #29
 80082be:	d505      	bpl.n	80082cc <__sflush_r+0x44>
 80082c0:	6863      	ldr	r3, [r4, #4]
 80082c2:	1ad2      	subs	r2, r2, r3
 80082c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80082c6:	b10b      	cbz	r3, 80082cc <__sflush_r+0x44>
 80082c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082ca:	1ad2      	subs	r2, r2, r3
 80082cc:	2300      	movs	r3, #0
 80082ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082d0:	6a21      	ldr	r1, [r4, #32]
 80082d2:	4628      	mov	r0, r5
 80082d4:	47b0      	blx	r6
 80082d6:	1c43      	adds	r3, r0, #1
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	d106      	bne.n	80082ea <__sflush_r+0x62>
 80082dc:	6829      	ldr	r1, [r5, #0]
 80082de:	291d      	cmp	r1, #29
 80082e0:	d82b      	bhi.n	800833a <__sflush_r+0xb2>
 80082e2:	4a2a      	ldr	r2, [pc, #168]	@ (800838c <__sflush_r+0x104>)
 80082e4:	410a      	asrs	r2, r1
 80082e6:	07d6      	lsls	r6, r2, #31
 80082e8:	d427      	bmi.n	800833a <__sflush_r+0xb2>
 80082ea:	2200      	movs	r2, #0
 80082ec:	6062      	str	r2, [r4, #4]
 80082ee:	04d9      	lsls	r1, r3, #19
 80082f0:	6922      	ldr	r2, [r4, #16]
 80082f2:	6022      	str	r2, [r4, #0]
 80082f4:	d504      	bpl.n	8008300 <__sflush_r+0x78>
 80082f6:	1c42      	adds	r2, r0, #1
 80082f8:	d101      	bne.n	80082fe <__sflush_r+0x76>
 80082fa:	682b      	ldr	r3, [r5, #0]
 80082fc:	b903      	cbnz	r3, 8008300 <__sflush_r+0x78>
 80082fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8008300:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008302:	602f      	str	r7, [r5, #0]
 8008304:	b1b9      	cbz	r1, 8008336 <__sflush_r+0xae>
 8008306:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800830a:	4299      	cmp	r1, r3
 800830c:	d002      	beq.n	8008314 <__sflush_r+0x8c>
 800830e:	4628      	mov	r0, r5
 8008310:	f7ff fa96 	bl	8007840 <_free_r>
 8008314:	2300      	movs	r3, #0
 8008316:	6363      	str	r3, [r4, #52]	@ 0x34
 8008318:	e00d      	b.n	8008336 <__sflush_r+0xae>
 800831a:	2301      	movs	r3, #1
 800831c:	4628      	mov	r0, r5
 800831e:	47b0      	blx	r6
 8008320:	4602      	mov	r2, r0
 8008322:	1c50      	adds	r0, r2, #1
 8008324:	d1c9      	bne.n	80082ba <__sflush_r+0x32>
 8008326:	682b      	ldr	r3, [r5, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d0c6      	beq.n	80082ba <__sflush_r+0x32>
 800832c:	2b1d      	cmp	r3, #29
 800832e:	d001      	beq.n	8008334 <__sflush_r+0xac>
 8008330:	2b16      	cmp	r3, #22
 8008332:	d11e      	bne.n	8008372 <__sflush_r+0xea>
 8008334:	602f      	str	r7, [r5, #0]
 8008336:	2000      	movs	r0, #0
 8008338:	e022      	b.n	8008380 <__sflush_r+0xf8>
 800833a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800833e:	b21b      	sxth	r3, r3
 8008340:	e01b      	b.n	800837a <__sflush_r+0xf2>
 8008342:	690f      	ldr	r7, [r1, #16]
 8008344:	2f00      	cmp	r7, #0
 8008346:	d0f6      	beq.n	8008336 <__sflush_r+0xae>
 8008348:	0793      	lsls	r3, r2, #30
 800834a:	680e      	ldr	r6, [r1, #0]
 800834c:	bf08      	it	eq
 800834e:	694b      	ldreq	r3, [r1, #20]
 8008350:	600f      	str	r7, [r1, #0]
 8008352:	bf18      	it	ne
 8008354:	2300      	movne	r3, #0
 8008356:	eba6 0807 	sub.w	r8, r6, r7
 800835a:	608b      	str	r3, [r1, #8]
 800835c:	f1b8 0f00 	cmp.w	r8, #0
 8008360:	dde9      	ble.n	8008336 <__sflush_r+0xae>
 8008362:	6a21      	ldr	r1, [r4, #32]
 8008364:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008366:	4643      	mov	r3, r8
 8008368:	463a      	mov	r2, r7
 800836a:	4628      	mov	r0, r5
 800836c:	47b0      	blx	r6
 800836e:	2800      	cmp	r0, #0
 8008370:	dc08      	bgt.n	8008384 <__sflush_r+0xfc>
 8008372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800837a:	81a3      	strh	r3, [r4, #12]
 800837c:	f04f 30ff 	mov.w	r0, #4294967295
 8008380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008384:	4407      	add	r7, r0
 8008386:	eba8 0800 	sub.w	r8, r8, r0
 800838a:	e7e7      	b.n	800835c <__sflush_r+0xd4>
 800838c:	dfbffffe 	.word	0xdfbffffe

08008390 <_fflush_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	690b      	ldr	r3, [r1, #16]
 8008394:	4605      	mov	r5, r0
 8008396:	460c      	mov	r4, r1
 8008398:	b913      	cbnz	r3, 80083a0 <_fflush_r+0x10>
 800839a:	2500      	movs	r5, #0
 800839c:	4628      	mov	r0, r5
 800839e:	bd38      	pop	{r3, r4, r5, pc}
 80083a0:	b118      	cbz	r0, 80083aa <_fflush_r+0x1a>
 80083a2:	6a03      	ldr	r3, [r0, #32]
 80083a4:	b90b      	cbnz	r3, 80083aa <_fflush_r+0x1a>
 80083a6:	f7fe fabf 	bl	8006928 <__sinit>
 80083aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d0f3      	beq.n	800839a <_fflush_r+0xa>
 80083b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80083b4:	07d0      	lsls	r0, r2, #31
 80083b6:	d404      	bmi.n	80083c2 <_fflush_r+0x32>
 80083b8:	0599      	lsls	r1, r3, #22
 80083ba:	d402      	bmi.n	80083c2 <_fflush_r+0x32>
 80083bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083be:	f7fe fbee 	bl	8006b9e <__retarget_lock_acquire_recursive>
 80083c2:	4628      	mov	r0, r5
 80083c4:	4621      	mov	r1, r4
 80083c6:	f7ff ff5f 	bl	8008288 <__sflush_r>
 80083ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083cc:	07da      	lsls	r2, r3, #31
 80083ce:	4605      	mov	r5, r0
 80083d0:	d4e4      	bmi.n	800839c <_fflush_r+0xc>
 80083d2:	89a3      	ldrh	r3, [r4, #12]
 80083d4:	059b      	lsls	r3, r3, #22
 80083d6:	d4e1      	bmi.n	800839c <_fflush_r+0xc>
 80083d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083da:	f7fe fbe1 	bl	8006ba0 <__retarget_lock_release_recursive>
 80083de:	e7dd      	b.n	800839c <_fflush_r+0xc>

080083e0 <memmove>:
 80083e0:	4288      	cmp	r0, r1
 80083e2:	b510      	push	{r4, lr}
 80083e4:	eb01 0402 	add.w	r4, r1, r2
 80083e8:	d902      	bls.n	80083f0 <memmove+0x10>
 80083ea:	4284      	cmp	r4, r0
 80083ec:	4623      	mov	r3, r4
 80083ee:	d807      	bhi.n	8008400 <memmove+0x20>
 80083f0:	1e43      	subs	r3, r0, #1
 80083f2:	42a1      	cmp	r1, r4
 80083f4:	d008      	beq.n	8008408 <memmove+0x28>
 80083f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083fe:	e7f8      	b.n	80083f2 <memmove+0x12>
 8008400:	4402      	add	r2, r0
 8008402:	4601      	mov	r1, r0
 8008404:	428a      	cmp	r2, r1
 8008406:	d100      	bne.n	800840a <memmove+0x2a>
 8008408:	bd10      	pop	{r4, pc}
 800840a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800840e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008412:	e7f7      	b.n	8008404 <memmove+0x24>

08008414 <memcpy>:
 8008414:	440a      	add	r2, r1
 8008416:	4291      	cmp	r1, r2
 8008418:	f100 33ff 	add.w	r3, r0, #4294967295
 800841c:	d100      	bne.n	8008420 <memcpy+0xc>
 800841e:	4770      	bx	lr
 8008420:	b510      	push	{r4, lr}
 8008422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800842a:	4291      	cmp	r1, r2
 800842c:	d1f9      	bne.n	8008422 <memcpy+0xe>
 800842e:	bd10      	pop	{r4, pc}

08008430 <__assert_func>:
 8008430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008432:	4614      	mov	r4, r2
 8008434:	461a      	mov	r2, r3
 8008436:	4b09      	ldr	r3, [pc, #36]	@ (800845c <__assert_func+0x2c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4605      	mov	r5, r0
 800843c:	68d8      	ldr	r0, [r3, #12]
 800843e:	b954      	cbnz	r4, 8008456 <__assert_func+0x26>
 8008440:	4b07      	ldr	r3, [pc, #28]	@ (8008460 <__assert_func+0x30>)
 8008442:	461c      	mov	r4, r3
 8008444:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008448:	9100      	str	r1, [sp, #0]
 800844a:	462b      	mov	r3, r5
 800844c:	4905      	ldr	r1, [pc, #20]	@ (8008464 <__assert_func+0x34>)
 800844e:	f000 f86f 	bl	8008530 <fiprintf>
 8008452:	f000 f87f 	bl	8008554 <abort>
 8008456:	4b04      	ldr	r3, [pc, #16]	@ (8008468 <__assert_func+0x38>)
 8008458:	e7f4      	b.n	8008444 <__assert_func+0x14>
 800845a:	bf00      	nop
 800845c:	20000020 	.word	0x20000020
 8008460:	08008e06 	.word	0x08008e06
 8008464:	08008dd8 	.word	0x08008dd8
 8008468:	08008dcb 	.word	0x08008dcb

0800846c <_calloc_r>:
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	fba1 5402 	umull	r5, r4, r1, r2
 8008472:	b93c      	cbnz	r4, 8008484 <_calloc_r+0x18>
 8008474:	4629      	mov	r1, r5
 8008476:	f7fd fce7 	bl	8005e48 <_malloc_r>
 800847a:	4606      	mov	r6, r0
 800847c:	b928      	cbnz	r0, 800848a <_calloc_r+0x1e>
 800847e:	2600      	movs	r6, #0
 8008480:	4630      	mov	r0, r6
 8008482:	bd70      	pop	{r4, r5, r6, pc}
 8008484:	220c      	movs	r2, #12
 8008486:	6002      	str	r2, [r0, #0]
 8008488:	e7f9      	b.n	800847e <_calloc_r+0x12>
 800848a:	462a      	mov	r2, r5
 800848c:	4621      	mov	r1, r4
 800848e:	f7fe faf8 	bl	8006a82 <memset>
 8008492:	e7f5      	b.n	8008480 <_calloc_r+0x14>

08008494 <__ascii_mbtowc>:
 8008494:	b082      	sub	sp, #8
 8008496:	b901      	cbnz	r1, 800849a <__ascii_mbtowc+0x6>
 8008498:	a901      	add	r1, sp, #4
 800849a:	b142      	cbz	r2, 80084ae <__ascii_mbtowc+0x1a>
 800849c:	b14b      	cbz	r3, 80084b2 <__ascii_mbtowc+0x1e>
 800849e:	7813      	ldrb	r3, [r2, #0]
 80084a0:	600b      	str	r3, [r1, #0]
 80084a2:	7812      	ldrb	r2, [r2, #0]
 80084a4:	1e10      	subs	r0, r2, #0
 80084a6:	bf18      	it	ne
 80084a8:	2001      	movne	r0, #1
 80084aa:	b002      	add	sp, #8
 80084ac:	4770      	bx	lr
 80084ae:	4610      	mov	r0, r2
 80084b0:	e7fb      	b.n	80084aa <__ascii_mbtowc+0x16>
 80084b2:	f06f 0001 	mvn.w	r0, #1
 80084b6:	e7f8      	b.n	80084aa <__ascii_mbtowc+0x16>

080084b8 <_realloc_r>:
 80084b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084bc:	4680      	mov	r8, r0
 80084be:	4615      	mov	r5, r2
 80084c0:	460c      	mov	r4, r1
 80084c2:	b921      	cbnz	r1, 80084ce <_realloc_r+0x16>
 80084c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084c8:	4611      	mov	r1, r2
 80084ca:	f7fd bcbd 	b.w	8005e48 <_malloc_r>
 80084ce:	b92a      	cbnz	r2, 80084dc <_realloc_r+0x24>
 80084d0:	f7ff f9b6 	bl	8007840 <_free_r>
 80084d4:	2400      	movs	r4, #0
 80084d6:	4620      	mov	r0, r4
 80084d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084dc:	f000 f841 	bl	8008562 <_malloc_usable_size_r>
 80084e0:	4285      	cmp	r5, r0
 80084e2:	4606      	mov	r6, r0
 80084e4:	d802      	bhi.n	80084ec <_realloc_r+0x34>
 80084e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80084ea:	d8f4      	bhi.n	80084d6 <_realloc_r+0x1e>
 80084ec:	4629      	mov	r1, r5
 80084ee:	4640      	mov	r0, r8
 80084f0:	f7fd fcaa 	bl	8005e48 <_malloc_r>
 80084f4:	4607      	mov	r7, r0
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d0ec      	beq.n	80084d4 <_realloc_r+0x1c>
 80084fa:	42b5      	cmp	r5, r6
 80084fc:	462a      	mov	r2, r5
 80084fe:	4621      	mov	r1, r4
 8008500:	bf28      	it	cs
 8008502:	4632      	movcs	r2, r6
 8008504:	f7ff ff86 	bl	8008414 <memcpy>
 8008508:	4621      	mov	r1, r4
 800850a:	4640      	mov	r0, r8
 800850c:	f7ff f998 	bl	8007840 <_free_r>
 8008510:	463c      	mov	r4, r7
 8008512:	e7e0      	b.n	80084d6 <_realloc_r+0x1e>

08008514 <__ascii_wctomb>:
 8008514:	4603      	mov	r3, r0
 8008516:	4608      	mov	r0, r1
 8008518:	b141      	cbz	r1, 800852c <__ascii_wctomb+0x18>
 800851a:	2aff      	cmp	r2, #255	@ 0xff
 800851c:	d904      	bls.n	8008528 <__ascii_wctomb+0x14>
 800851e:	228a      	movs	r2, #138	@ 0x8a
 8008520:	601a      	str	r2, [r3, #0]
 8008522:	f04f 30ff 	mov.w	r0, #4294967295
 8008526:	4770      	bx	lr
 8008528:	700a      	strb	r2, [r1, #0]
 800852a:	2001      	movs	r0, #1
 800852c:	4770      	bx	lr
	...

08008530 <fiprintf>:
 8008530:	b40e      	push	{r1, r2, r3}
 8008532:	b503      	push	{r0, r1, lr}
 8008534:	4601      	mov	r1, r0
 8008536:	ab03      	add	r3, sp, #12
 8008538:	4805      	ldr	r0, [pc, #20]	@ (8008550 <fiprintf+0x20>)
 800853a:	f853 2b04 	ldr.w	r2, [r3], #4
 800853e:	6800      	ldr	r0, [r0, #0]
 8008540:	9301      	str	r3, [sp, #4]
 8008542:	f000 f83f 	bl	80085c4 <_vfiprintf_r>
 8008546:	b002      	add	sp, #8
 8008548:	f85d eb04 	ldr.w	lr, [sp], #4
 800854c:	b003      	add	sp, #12
 800854e:	4770      	bx	lr
 8008550:	20000020 	.word	0x20000020

08008554 <abort>:
 8008554:	b508      	push	{r3, lr}
 8008556:	2006      	movs	r0, #6
 8008558:	f000 fa08 	bl	800896c <raise>
 800855c:	2001      	movs	r0, #1
 800855e:	f7f9 fe15 	bl	800218c <_exit>

08008562 <_malloc_usable_size_r>:
 8008562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008566:	1f18      	subs	r0, r3, #4
 8008568:	2b00      	cmp	r3, #0
 800856a:	bfbc      	itt	lt
 800856c:	580b      	ldrlt	r3, [r1, r0]
 800856e:	18c0      	addlt	r0, r0, r3
 8008570:	4770      	bx	lr

08008572 <__sfputc_r>:
 8008572:	6893      	ldr	r3, [r2, #8]
 8008574:	3b01      	subs	r3, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	b410      	push	{r4}
 800857a:	6093      	str	r3, [r2, #8]
 800857c:	da08      	bge.n	8008590 <__sfputc_r+0x1e>
 800857e:	6994      	ldr	r4, [r2, #24]
 8008580:	42a3      	cmp	r3, r4
 8008582:	db01      	blt.n	8008588 <__sfputc_r+0x16>
 8008584:	290a      	cmp	r1, #10
 8008586:	d103      	bne.n	8008590 <__sfputc_r+0x1e>
 8008588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800858c:	f000 b932 	b.w	80087f4 <__swbuf_r>
 8008590:	6813      	ldr	r3, [r2, #0]
 8008592:	1c58      	adds	r0, r3, #1
 8008594:	6010      	str	r0, [r2, #0]
 8008596:	7019      	strb	r1, [r3, #0]
 8008598:	4608      	mov	r0, r1
 800859a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <__sfputs_r>:
 80085a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a2:	4606      	mov	r6, r0
 80085a4:	460f      	mov	r7, r1
 80085a6:	4614      	mov	r4, r2
 80085a8:	18d5      	adds	r5, r2, r3
 80085aa:	42ac      	cmp	r4, r5
 80085ac:	d101      	bne.n	80085b2 <__sfputs_r+0x12>
 80085ae:	2000      	movs	r0, #0
 80085b0:	e007      	b.n	80085c2 <__sfputs_r+0x22>
 80085b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085b6:	463a      	mov	r2, r7
 80085b8:	4630      	mov	r0, r6
 80085ba:	f7ff ffda 	bl	8008572 <__sfputc_r>
 80085be:	1c43      	adds	r3, r0, #1
 80085c0:	d1f3      	bne.n	80085aa <__sfputs_r+0xa>
 80085c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085c4 <_vfiprintf_r>:
 80085c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c8:	460d      	mov	r5, r1
 80085ca:	b09d      	sub	sp, #116	@ 0x74
 80085cc:	4614      	mov	r4, r2
 80085ce:	4698      	mov	r8, r3
 80085d0:	4606      	mov	r6, r0
 80085d2:	b118      	cbz	r0, 80085dc <_vfiprintf_r+0x18>
 80085d4:	6a03      	ldr	r3, [r0, #32]
 80085d6:	b90b      	cbnz	r3, 80085dc <_vfiprintf_r+0x18>
 80085d8:	f7fe f9a6 	bl	8006928 <__sinit>
 80085dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085de:	07d9      	lsls	r1, r3, #31
 80085e0:	d405      	bmi.n	80085ee <_vfiprintf_r+0x2a>
 80085e2:	89ab      	ldrh	r3, [r5, #12]
 80085e4:	059a      	lsls	r2, r3, #22
 80085e6:	d402      	bmi.n	80085ee <_vfiprintf_r+0x2a>
 80085e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085ea:	f7fe fad8 	bl	8006b9e <__retarget_lock_acquire_recursive>
 80085ee:	89ab      	ldrh	r3, [r5, #12]
 80085f0:	071b      	lsls	r3, r3, #28
 80085f2:	d501      	bpl.n	80085f8 <_vfiprintf_r+0x34>
 80085f4:	692b      	ldr	r3, [r5, #16]
 80085f6:	b99b      	cbnz	r3, 8008620 <_vfiprintf_r+0x5c>
 80085f8:	4629      	mov	r1, r5
 80085fa:	4630      	mov	r0, r6
 80085fc:	f000 f938 	bl	8008870 <__swsetup_r>
 8008600:	b170      	cbz	r0, 8008620 <_vfiprintf_r+0x5c>
 8008602:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008604:	07dc      	lsls	r4, r3, #31
 8008606:	d504      	bpl.n	8008612 <_vfiprintf_r+0x4e>
 8008608:	f04f 30ff 	mov.w	r0, #4294967295
 800860c:	b01d      	add	sp, #116	@ 0x74
 800860e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008612:	89ab      	ldrh	r3, [r5, #12]
 8008614:	0598      	lsls	r0, r3, #22
 8008616:	d4f7      	bmi.n	8008608 <_vfiprintf_r+0x44>
 8008618:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800861a:	f7fe fac1 	bl	8006ba0 <__retarget_lock_release_recursive>
 800861e:	e7f3      	b.n	8008608 <_vfiprintf_r+0x44>
 8008620:	2300      	movs	r3, #0
 8008622:	9309      	str	r3, [sp, #36]	@ 0x24
 8008624:	2320      	movs	r3, #32
 8008626:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800862a:	f8cd 800c 	str.w	r8, [sp, #12]
 800862e:	2330      	movs	r3, #48	@ 0x30
 8008630:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80087e0 <_vfiprintf_r+0x21c>
 8008634:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008638:	f04f 0901 	mov.w	r9, #1
 800863c:	4623      	mov	r3, r4
 800863e:	469a      	mov	sl, r3
 8008640:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008644:	b10a      	cbz	r2, 800864a <_vfiprintf_r+0x86>
 8008646:	2a25      	cmp	r2, #37	@ 0x25
 8008648:	d1f9      	bne.n	800863e <_vfiprintf_r+0x7a>
 800864a:	ebba 0b04 	subs.w	fp, sl, r4
 800864e:	d00b      	beq.n	8008668 <_vfiprintf_r+0xa4>
 8008650:	465b      	mov	r3, fp
 8008652:	4622      	mov	r2, r4
 8008654:	4629      	mov	r1, r5
 8008656:	4630      	mov	r0, r6
 8008658:	f7ff ffa2 	bl	80085a0 <__sfputs_r>
 800865c:	3001      	adds	r0, #1
 800865e:	f000 80a7 	beq.w	80087b0 <_vfiprintf_r+0x1ec>
 8008662:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008664:	445a      	add	r2, fp
 8008666:	9209      	str	r2, [sp, #36]	@ 0x24
 8008668:	f89a 3000 	ldrb.w	r3, [sl]
 800866c:	2b00      	cmp	r3, #0
 800866e:	f000 809f 	beq.w	80087b0 <_vfiprintf_r+0x1ec>
 8008672:	2300      	movs	r3, #0
 8008674:	f04f 32ff 	mov.w	r2, #4294967295
 8008678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800867c:	f10a 0a01 	add.w	sl, sl, #1
 8008680:	9304      	str	r3, [sp, #16]
 8008682:	9307      	str	r3, [sp, #28]
 8008684:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008688:	931a      	str	r3, [sp, #104]	@ 0x68
 800868a:	4654      	mov	r4, sl
 800868c:	2205      	movs	r2, #5
 800868e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008692:	4853      	ldr	r0, [pc, #332]	@ (80087e0 <_vfiprintf_r+0x21c>)
 8008694:	f7f7 fdbc 	bl	8000210 <memchr>
 8008698:	9a04      	ldr	r2, [sp, #16]
 800869a:	b9d8      	cbnz	r0, 80086d4 <_vfiprintf_r+0x110>
 800869c:	06d1      	lsls	r1, r2, #27
 800869e:	bf44      	itt	mi
 80086a0:	2320      	movmi	r3, #32
 80086a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086a6:	0713      	lsls	r3, r2, #28
 80086a8:	bf44      	itt	mi
 80086aa:	232b      	movmi	r3, #43	@ 0x2b
 80086ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086b0:	f89a 3000 	ldrb.w	r3, [sl]
 80086b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80086b6:	d015      	beq.n	80086e4 <_vfiprintf_r+0x120>
 80086b8:	9a07      	ldr	r2, [sp, #28]
 80086ba:	4654      	mov	r4, sl
 80086bc:	2000      	movs	r0, #0
 80086be:	f04f 0c0a 	mov.w	ip, #10
 80086c2:	4621      	mov	r1, r4
 80086c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086c8:	3b30      	subs	r3, #48	@ 0x30
 80086ca:	2b09      	cmp	r3, #9
 80086cc:	d94b      	bls.n	8008766 <_vfiprintf_r+0x1a2>
 80086ce:	b1b0      	cbz	r0, 80086fe <_vfiprintf_r+0x13a>
 80086d0:	9207      	str	r2, [sp, #28]
 80086d2:	e014      	b.n	80086fe <_vfiprintf_r+0x13a>
 80086d4:	eba0 0308 	sub.w	r3, r0, r8
 80086d8:	fa09 f303 	lsl.w	r3, r9, r3
 80086dc:	4313      	orrs	r3, r2
 80086de:	9304      	str	r3, [sp, #16]
 80086e0:	46a2      	mov	sl, r4
 80086e2:	e7d2      	b.n	800868a <_vfiprintf_r+0xc6>
 80086e4:	9b03      	ldr	r3, [sp, #12]
 80086e6:	1d19      	adds	r1, r3, #4
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	9103      	str	r1, [sp, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	bfbb      	ittet	lt
 80086f0:	425b      	neglt	r3, r3
 80086f2:	f042 0202 	orrlt.w	r2, r2, #2
 80086f6:	9307      	strge	r3, [sp, #28]
 80086f8:	9307      	strlt	r3, [sp, #28]
 80086fa:	bfb8      	it	lt
 80086fc:	9204      	strlt	r2, [sp, #16]
 80086fe:	7823      	ldrb	r3, [r4, #0]
 8008700:	2b2e      	cmp	r3, #46	@ 0x2e
 8008702:	d10a      	bne.n	800871a <_vfiprintf_r+0x156>
 8008704:	7863      	ldrb	r3, [r4, #1]
 8008706:	2b2a      	cmp	r3, #42	@ 0x2a
 8008708:	d132      	bne.n	8008770 <_vfiprintf_r+0x1ac>
 800870a:	9b03      	ldr	r3, [sp, #12]
 800870c:	1d1a      	adds	r2, r3, #4
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	9203      	str	r2, [sp, #12]
 8008712:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008716:	3402      	adds	r4, #2
 8008718:	9305      	str	r3, [sp, #20]
 800871a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80087f0 <_vfiprintf_r+0x22c>
 800871e:	7821      	ldrb	r1, [r4, #0]
 8008720:	2203      	movs	r2, #3
 8008722:	4650      	mov	r0, sl
 8008724:	f7f7 fd74 	bl	8000210 <memchr>
 8008728:	b138      	cbz	r0, 800873a <_vfiprintf_r+0x176>
 800872a:	9b04      	ldr	r3, [sp, #16]
 800872c:	eba0 000a 	sub.w	r0, r0, sl
 8008730:	2240      	movs	r2, #64	@ 0x40
 8008732:	4082      	lsls	r2, r0
 8008734:	4313      	orrs	r3, r2
 8008736:	3401      	adds	r4, #1
 8008738:	9304      	str	r3, [sp, #16]
 800873a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800873e:	4829      	ldr	r0, [pc, #164]	@ (80087e4 <_vfiprintf_r+0x220>)
 8008740:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008744:	2206      	movs	r2, #6
 8008746:	f7f7 fd63 	bl	8000210 <memchr>
 800874a:	2800      	cmp	r0, #0
 800874c:	d03f      	beq.n	80087ce <_vfiprintf_r+0x20a>
 800874e:	4b26      	ldr	r3, [pc, #152]	@ (80087e8 <_vfiprintf_r+0x224>)
 8008750:	bb1b      	cbnz	r3, 800879a <_vfiprintf_r+0x1d6>
 8008752:	9b03      	ldr	r3, [sp, #12]
 8008754:	3307      	adds	r3, #7
 8008756:	f023 0307 	bic.w	r3, r3, #7
 800875a:	3308      	adds	r3, #8
 800875c:	9303      	str	r3, [sp, #12]
 800875e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008760:	443b      	add	r3, r7
 8008762:	9309      	str	r3, [sp, #36]	@ 0x24
 8008764:	e76a      	b.n	800863c <_vfiprintf_r+0x78>
 8008766:	fb0c 3202 	mla	r2, ip, r2, r3
 800876a:	460c      	mov	r4, r1
 800876c:	2001      	movs	r0, #1
 800876e:	e7a8      	b.n	80086c2 <_vfiprintf_r+0xfe>
 8008770:	2300      	movs	r3, #0
 8008772:	3401      	adds	r4, #1
 8008774:	9305      	str	r3, [sp, #20]
 8008776:	4619      	mov	r1, r3
 8008778:	f04f 0c0a 	mov.w	ip, #10
 800877c:	4620      	mov	r0, r4
 800877e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008782:	3a30      	subs	r2, #48	@ 0x30
 8008784:	2a09      	cmp	r2, #9
 8008786:	d903      	bls.n	8008790 <_vfiprintf_r+0x1cc>
 8008788:	2b00      	cmp	r3, #0
 800878a:	d0c6      	beq.n	800871a <_vfiprintf_r+0x156>
 800878c:	9105      	str	r1, [sp, #20]
 800878e:	e7c4      	b.n	800871a <_vfiprintf_r+0x156>
 8008790:	fb0c 2101 	mla	r1, ip, r1, r2
 8008794:	4604      	mov	r4, r0
 8008796:	2301      	movs	r3, #1
 8008798:	e7f0      	b.n	800877c <_vfiprintf_r+0x1b8>
 800879a:	ab03      	add	r3, sp, #12
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	462a      	mov	r2, r5
 80087a0:	4b12      	ldr	r3, [pc, #72]	@ (80087ec <_vfiprintf_r+0x228>)
 80087a2:	a904      	add	r1, sp, #16
 80087a4:	4630      	mov	r0, r6
 80087a6:	f7fd fc7b 	bl	80060a0 <_printf_float>
 80087aa:	4607      	mov	r7, r0
 80087ac:	1c78      	adds	r0, r7, #1
 80087ae:	d1d6      	bne.n	800875e <_vfiprintf_r+0x19a>
 80087b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087b2:	07d9      	lsls	r1, r3, #31
 80087b4:	d405      	bmi.n	80087c2 <_vfiprintf_r+0x1fe>
 80087b6:	89ab      	ldrh	r3, [r5, #12]
 80087b8:	059a      	lsls	r2, r3, #22
 80087ba:	d402      	bmi.n	80087c2 <_vfiprintf_r+0x1fe>
 80087bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087be:	f7fe f9ef 	bl	8006ba0 <__retarget_lock_release_recursive>
 80087c2:	89ab      	ldrh	r3, [r5, #12]
 80087c4:	065b      	lsls	r3, r3, #25
 80087c6:	f53f af1f 	bmi.w	8008608 <_vfiprintf_r+0x44>
 80087ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087cc:	e71e      	b.n	800860c <_vfiprintf_r+0x48>
 80087ce:	ab03      	add	r3, sp, #12
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	462a      	mov	r2, r5
 80087d4:	4b05      	ldr	r3, [pc, #20]	@ (80087ec <_vfiprintf_r+0x228>)
 80087d6:	a904      	add	r1, sp, #16
 80087d8:	4630      	mov	r0, r6
 80087da:	f7fd fef9 	bl	80065d0 <_printf_i>
 80087de:	e7e4      	b.n	80087aa <_vfiprintf_r+0x1e6>
 80087e0:	08008db0 	.word	0x08008db0
 80087e4:	08008dba 	.word	0x08008dba
 80087e8:	080060a1 	.word	0x080060a1
 80087ec:	080085a1 	.word	0x080085a1
 80087f0:	08008db6 	.word	0x08008db6

080087f4 <__swbuf_r>:
 80087f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f6:	460e      	mov	r6, r1
 80087f8:	4614      	mov	r4, r2
 80087fa:	4605      	mov	r5, r0
 80087fc:	b118      	cbz	r0, 8008806 <__swbuf_r+0x12>
 80087fe:	6a03      	ldr	r3, [r0, #32]
 8008800:	b90b      	cbnz	r3, 8008806 <__swbuf_r+0x12>
 8008802:	f7fe f891 	bl	8006928 <__sinit>
 8008806:	69a3      	ldr	r3, [r4, #24]
 8008808:	60a3      	str	r3, [r4, #8]
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	071a      	lsls	r2, r3, #28
 800880e:	d501      	bpl.n	8008814 <__swbuf_r+0x20>
 8008810:	6923      	ldr	r3, [r4, #16]
 8008812:	b943      	cbnz	r3, 8008826 <__swbuf_r+0x32>
 8008814:	4621      	mov	r1, r4
 8008816:	4628      	mov	r0, r5
 8008818:	f000 f82a 	bl	8008870 <__swsetup_r>
 800881c:	b118      	cbz	r0, 8008826 <__swbuf_r+0x32>
 800881e:	f04f 37ff 	mov.w	r7, #4294967295
 8008822:	4638      	mov	r0, r7
 8008824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008826:	6823      	ldr	r3, [r4, #0]
 8008828:	6922      	ldr	r2, [r4, #16]
 800882a:	1a98      	subs	r0, r3, r2
 800882c:	6963      	ldr	r3, [r4, #20]
 800882e:	b2f6      	uxtb	r6, r6
 8008830:	4283      	cmp	r3, r0
 8008832:	4637      	mov	r7, r6
 8008834:	dc05      	bgt.n	8008842 <__swbuf_r+0x4e>
 8008836:	4621      	mov	r1, r4
 8008838:	4628      	mov	r0, r5
 800883a:	f7ff fda9 	bl	8008390 <_fflush_r>
 800883e:	2800      	cmp	r0, #0
 8008840:	d1ed      	bne.n	800881e <__swbuf_r+0x2a>
 8008842:	68a3      	ldr	r3, [r4, #8]
 8008844:	3b01      	subs	r3, #1
 8008846:	60a3      	str	r3, [r4, #8]
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	1c5a      	adds	r2, r3, #1
 800884c:	6022      	str	r2, [r4, #0]
 800884e:	701e      	strb	r6, [r3, #0]
 8008850:	6962      	ldr	r2, [r4, #20]
 8008852:	1c43      	adds	r3, r0, #1
 8008854:	429a      	cmp	r2, r3
 8008856:	d004      	beq.n	8008862 <__swbuf_r+0x6e>
 8008858:	89a3      	ldrh	r3, [r4, #12]
 800885a:	07db      	lsls	r3, r3, #31
 800885c:	d5e1      	bpl.n	8008822 <__swbuf_r+0x2e>
 800885e:	2e0a      	cmp	r6, #10
 8008860:	d1df      	bne.n	8008822 <__swbuf_r+0x2e>
 8008862:	4621      	mov	r1, r4
 8008864:	4628      	mov	r0, r5
 8008866:	f7ff fd93 	bl	8008390 <_fflush_r>
 800886a:	2800      	cmp	r0, #0
 800886c:	d0d9      	beq.n	8008822 <__swbuf_r+0x2e>
 800886e:	e7d6      	b.n	800881e <__swbuf_r+0x2a>

08008870 <__swsetup_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	4b29      	ldr	r3, [pc, #164]	@ (8008918 <__swsetup_r+0xa8>)
 8008874:	4605      	mov	r5, r0
 8008876:	6818      	ldr	r0, [r3, #0]
 8008878:	460c      	mov	r4, r1
 800887a:	b118      	cbz	r0, 8008884 <__swsetup_r+0x14>
 800887c:	6a03      	ldr	r3, [r0, #32]
 800887e:	b90b      	cbnz	r3, 8008884 <__swsetup_r+0x14>
 8008880:	f7fe f852 	bl	8006928 <__sinit>
 8008884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008888:	0719      	lsls	r1, r3, #28
 800888a:	d422      	bmi.n	80088d2 <__swsetup_r+0x62>
 800888c:	06da      	lsls	r2, r3, #27
 800888e:	d407      	bmi.n	80088a0 <__swsetup_r+0x30>
 8008890:	2209      	movs	r2, #9
 8008892:	602a      	str	r2, [r5, #0]
 8008894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008898:	81a3      	strh	r3, [r4, #12]
 800889a:	f04f 30ff 	mov.w	r0, #4294967295
 800889e:	e033      	b.n	8008908 <__swsetup_r+0x98>
 80088a0:	0758      	lsls	r0, r3, #29
 80088a2:	d512      	bpl.n	80088ca <__swsetup_r+0x5a>
 80088a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088a6:	b141      	cbz	r1, 80088ba <__swsetup_r+0x4a>
 80088a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088ac:	4299      	cmp	r1, r3
 80088ae:	d002      	beq.n	80088b6 <__swsetup_r+0x46>
 80088b0:	4628      	mov	r0, r5
 80088b2:	f7fe ffc5 	bl	8007840 <_free_r>
 80088b6:	2300      	movs	r3, #0
 80088b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80088ba:	89a3      	ldrh	r3, [r4, #12]
 80088bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088c0:	81a3      	strh	r3, [r4, #12]
 80088c2:	2300      	movs	r3, #0
 80088c4:	6063      	str	r3, [r4, #4]
 80088c6:	6923      	ldr	r3, [r4, #16]
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	89a3      	ldrh	r3, [r4, #12]
 80088cc:	f043 0308 	orr.w	r3, r3, #8
 80088d0:	81a3      	strh	r3, [r4, #12]
 80088d2:	6923      	ldr	r3, [r4, #16]
 80088d4:	b94b      	cbnz	r3, 80088ea <__swsetup_r+0x7a>
 80088d6:	89a3      	ldrh	r3, [r4, #12]
 80088d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088e0:	d003      	beq.n	80088ea <__swsetup_r+0x7a>
 80088e2:	4621      	mov	r1, r4
 80088e4:	4628      	mov	r0, r5
 80088e6:	f000 f883 	bl	80089f0 <__smakebuf_r>
 80088ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ee:	f013 0201 	ands.w	r2, r3, #1
 80088f2:	d00a      	beq.n	800890a <__swsetup_r+0x9a>
 80088f4:	2200      	movs	r2, #0
 80088f6:	60a2      	str	r2, [r4, #8]
 80088f8:	6962      	ldr	r2, [r4, #20]
 80088fa:	4252      	negs	r2, r2
 80088fc:	61a2      	str	r2, [r4, #24]
 80088fe:	6922      	ldr	r2, [r4, #16]
 8008900:	b942      	cbnz	r2, 8008914 <__swsetup_r+0xa4>
 8008902:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008906:	d1c5      	bne.n	8008894 <__swsetup_r+0x24>
 8008908:	bd38      	pop	{r3, r4, r5, pc}
 800890a:	0799      	lsls	r1, r3, #30
 800890c:	bf58      	it	pl
 800890e:	6962      	ldrpl	r2, [r4, #20]
 8008910:	60a2      	str	r2, [r4, #8]
 8008912:	e7f4      	b.n	80088fe <__swsetup_r+0x8e>
 8008914:	2000      	movs	r0, #0
 8008916:	e7f7      	b.n	8008908 <__swsetup_r+0x98>
 8008918:	20000020 	.word	0x20000020

0800891c <_raise_r>:
 800891c:	291f      	cmp	r1, #31
 800891e:	b538      	push	{r3, r4, r5, lr}
 8008920:	4605      	mov	r5, r0
 8008922:	460c      	mov	r4, r1
 8008924:	d904      	bls.n	8008930 <_raise_r+0x14>
 8008926:	2316      	movs	r3, #22
 8008928:	6003      	str	r3, [r0, #0]
 800892a:	f04f 30ff 	mov.w	r0, #4294967295
 800892e:	bd38      	pop	{r3, r4, r5, pc}
 8008930:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008932:	b112      	cbz	r2, 800893a <_raise_r+0x1e>
 8008934:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008938:	b94b      	cbnz	r3, 800894e <_raise_r+0x32>
 800893a:	4628      	mov	r0, r5
 800893c:	f000 f830 	bl	80089a0 <_getpid_r>
 8008940:	4622      	mov	r2, r4
 8008942:	4601      	mov	r1, r0
 8008944:	4628      	mov	r0, r5
 8008946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800894a:	f000 b817 	b.w	800897c <_kill_r>
 800894e:	2b01      	cmp	r3, #1
 8008950:	d00a      	beq.n	8008968 <_raise_r+0x4c>
 8008952:	1c59      	adds	r1, r3, #1
 8008954:	d103      	bne.n	800895e <_raise_r+0x42>
 8008956:	2316      	movs	r3, #22
 8008958:	6003      	str	r3, [r0, #0]
 800895a:	2001      	movs	r0, #1
 800895c:	e7e7      	b.n	800892e <_raise_r+0x12>
 800895e:	2100      	movs	r1, #0
 8008960:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008964:	4620      	mov	r0, r4
 8008966:	4798      	blx	r3
 8008968:	2000      	movs	r0, #0
 800896a:	e7e0      	b.n	800892e <_raise_r+0x12>

0800896c <raise>:
 800896c:	4b02      	ldr	r3, [pc, #8]	@ (8008978 <raise+0xc>)
 800896e:	4601      	mov	r1, r0
 8008970:	6818      	ldr	r0, [r3, #0]
 8008972:	f7ff bfd3 	b.w	800891c <_raise_r>
 8008976:	bf00      	nop
 8008978:	20000020 	.word	0x20000020

0800897c <_kill_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4d07      	ldr	r5, [pc, #28]	@ (800899c <_kill_r+0x20>)
 8008980:	2300      	movs	r3, #0
 8008982:	4604      	mov	r4, r0
 8008984:	4608      	mov	r0, r1
 8008986:	4611      	mov	r1, r2
 8008988:	602b      	str	r3, [r5, #0]
 800898a:	f7f9 fbef 	bl	800216c <_kill>
 800898e:	1c43      	adds	r3, r0, #1
 8008990:	d102      	bne.n	8008998 <_kill_r+0x1c>
 8008992:	682b      	ldr	r3, [r5, #0]
 8008994:	b103      	cbz	r3, 8008998 <_kill_r+0x1c>
 8008996:	6023      	str	r3, [r4, #0]
 8008998:	bd38      	pop	{r3, r4, r5, pc}
 800899a:	bf00      	nop
 800899c:	20000664 	.word	0x20000664

080089a0 <_getpid_r>:
 80089a0:	f7f9 bbdc 	b.w	800215c <_getpid>

080089a4 <__swhatbuf_r>:
 80089a4:	b570      	push	{r4, r5, r6, lr}
 80089a6:	460c      	mov	r4, r1
 80089a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ac:	2900      	cmp	r1, #0
 80089ae:	b096      	sub	sp, #88	@ 0x58
 80089b0:	4615      	mov	r5, r2
 80089b2:	461e      	mov	r6, r3
 80089b4:	da0d      	bge.n	80089d2 <__swhatbuf_r+0x2e>
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089bc:	f04f 0100 	mov.w	r1, #0
 80089c0:	bf14      	ite	ne
 80089c2:	2340      	movne	r3, #64	@ 0x40
 80089c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089c8:	2000      	movs	r0, #0
 80089ca:	6031      	str	r1, [r6, #0]
 80089cc:	602b      	str	r3, [r5, #0]
 80089ce:	b016      	add	sp, #88	@ 0x58
 80089d0:	bd70      	pop	{r4, r5, r6, pc}
 80089d2:	466a      	mov	r2, sp
 80089d4:	f000 f848 	bl	8008a68 <_fstat_r>
 80089d8:	2800      	cmp	r0, #0
 80089da:	dbec      	blt.n	80089b6 <__swhatbuf_r+0x12>
 80089dc:	9901      	ldr	r1, [sp, #4]
 80089de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089e6:	4259      	negs	r1, r3
 80089e8:	4159      	adcs	r1, r3
 80089ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089ee:	e7eb      	b.n	80089c8 <__swhatbuf_r+0x24>

080089f0 <__smakebuf_r>:
 80089f0:	898b      	ldrh	r3, [r1, #12]
 80089f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089f4:	079d      	lsls	r5, r3, #30
 80089f6:	4606      	mov	r6, r0
 80089f8:	460c      	mov	r4, r1
 80089fa:	d507      	bpl.n	8008a0c <__smakebuf_r+0x1c>
 80089fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	6123      	str	r3, [r4, #16]
 8008a04:	2301      	movs	r3, #1
 8008a06:	6163      	str	r3, [r4, #20]
 8008a08:	b003      	add	sp, #12
 8008a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a0c:	ab01      	add	r3, sp, #4
 8008a0e:	466a      	mov	r2, sp
 8008a10:	f7ff ffc8 	bl	80089a4 <__swhatbuf_r>
 8008a14:	9f00      	ldr	r7, [sp, #0]
 8008a16:	4605      	mov	r5, r0
 8008a18:	4639      	mov	r1, r7
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f7fd fa14 	bl	8005e48 <_malloc_r>
 8008a20:	b948      	cbnz	r0, 8008a36 <__smakebuf_r+0x46>
 8008a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a26:	059a      	lsls	r2, r3, #22
 8008a28:	d4ee      	bmi.n	8008a08 <__smakebuf_r+0x18>
 8008a2a:	f023 0303 	bic.w	r3, r3, #3
 8008a2e:	f043 0302 	orr.w	r3, r3, #2
 8008a32:	81a3      	strh	r3, [r4, #12]
 8008a34:	e7e2      	b.n	80089fc <__smakebuf_r+0xc>
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	6020      	str	r0, [r4, #0]
 8008a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a3e:	81a3      	strh	r3, [r4, #12]
 8008a40:	9b01      	ldr	r3, [sp, #4]
 8008a42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a46:	b15b      	cbz	r3, 8008a60 <__smakebuf_r+0x70>
 8008a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f000 f81d 	bl	8008a8c <_isatty_r>
 8008a52:	b128      	cbz	r0, 8008a60 <__smakebuf_r+0x70>
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	f023 0303 	bic.w	r3, r3, #3
 8008a5a:	f043 0301 	orr.w	r3, r3, #1
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	89a3      	ldrh	r3, [r4, #12]
 8008a62:	431d      	orrs	r5, r3
 8008a64:	81a5      	strh	r5, [r4, #12]
 8008a66:	e7cf      	b.n	8008a08 <__smakebuf_r+0x18>

08008a68 <_fstat_r>:
 8008a68:	b538      	push	{r3, r4, r5, lr}
 8008a6a:	4d07      	ldr	r5, [pc, #28]	@ (8008a88 <_fstat_r+0x20>)
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	4604      	mov	r4, r0
 8008a70:	4608      	mov	r0, r1
 8008a72:	4611      	mov	r1, r2
 8008a74:	602b      	str	r3, [r5, #0]
 8008a76:	f7f9 fbd9 	bl	800222c <_fstat>
 8008a7a:	1c43      	adds	r3, r0, #1
 8008a7c:	d102      	bne.n	8008a84 <_fstat_r+0x1c>
 8008a7e:	682b      	ldr	r3, [r5, #0]
 8008a80:	b103      	cbz	r3, 8008a84 <_fstat_r+0x1c>
 8008a82:	6023      	str	r3, [r4, #0]
 8008a84:	bd38      	pop	{r3, r4, r5, pc}
 8008a86:	bf00      	nop
 8008a88:	20000664 	.word	0x20000664

08008a8c <_isatty_r>:
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4d06      	ldr	r5, [pc, #24]	@ (8008aa8 <_isatty_r+0x1c>)
 8008a90:	2300      	movs	r3, #0
 8008a92:	4604      	mov	r4, r0
 8008a94:	4608      	mov	r0, r1
 8008a96:	602b      	str	r3, [r5, #0]
 8008a98:	f7f9 fbd8 	bl	800224c <_isatty>
 8008a9c:	1c43      	adds	r3, r0, #1
 8008a9e:	d102      	bne.n	8008aa6 <_isatty_r+0x1a>
 8008aa0:	682b      	ldr	r3, [r5, #0]
 8008aa2:	b103      	cbz	r3, 8008aa6 <_isatty_r+0x1a>
 8008aa4:	6023      	str	r3, [r4, #0]
 8008aa6:	bd38      	pop	{r3, r4, r5, pc}
 8008aa8:	20000664 	.word	0x20000664

08008aac <_init>:
 8008aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aae:	bf00      	nop
 8008ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab2:	bc08      	pop	{r3}
 8008ab4:	469e      	mov	lr, r3
 8008ab6:	4770      	bx	lr

08008ab8 <_fini>:
 8008ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aba:	bf00      	nop
 8008abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008abe:	bc08      	pop	{r3}
 8008ac0:	469e      	mov	lr, r3
 8008ac2:	4770      	bx	lr
